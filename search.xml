<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[【随笔】外卖与影子]]></title>
      <url>https://blog.coder4j.cn/2020/08/22/yuque-%E3%80%90%E9%9A%8F%E7%AC%94%E3%80%91%E5%A4%96%E5%8D%96%E4%B8%8E%E5%BD%B1%E5%AD%90/</url>
      <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/119443/1598085674717-7de8bea9-c78a-4322-906f-a0c024260b1c.jpeg#align=left&amp;display=inline&amp;height=397&amp;margin=%5Bobject%20Object%5D&amp;name=mmexport1597409074531.jpg&amp;originHeight=397&amp;originWidth=540&amp;size=25289&amp;status=done&amp;style=none&amp;width=540" alt="mmexport1597409074531.jpg"></p>
<h3 id="失败的外卖"><a href="#失败的外卖" class="headerlink" title="失败的外卖"></a>失败的外卖</h3><p>前几天点喜茶，很不开心，外卖小哥把能犯的错误全都犯了。</p>
<p>首先送晚了，并且在还没送到时，就提前很久，点了已送达。另外，外卖几乎全撒了，点了 12 杯奶茶，送到时只剩 3 杯，其他 9 杯压根没见到。</p>
<p>这些其实都可以理解，但是最终送到时，小哥却一直在甩锅，非说我地址填错了，他导航时一直报偏离路线，还导致他其他单都超时，仿佛错的都是我。</p>
<p>首先，地址绝对是没问题的，用这个地址收了几年的外卖跟快递，第一次遇到说这个地址找不到的。其次，他说导航一直报偏离路线，按道理来说偏离路线，这就说明他没按导航规划的路线走。最重要的是外卖漏洒跟地址正不正确并没有关联关系，这个理由完全站不住脚。这种明明做错了，但是强词夺理让人很反感。</p>
<h3 id="讨厌的影子"><a href="#讨厌的影子" class="headerlink" title="讨厌的影子"></a>讨厌的影子</h3><p>很久之前，看过一句话 – <strong>你讨厌的人身上也一定有你自己的影子。</strong>我第一次听到时觉得十分的扯淡，我讨厌的人身上怎么会有我的影子，难道我讨厌我自己？但是后来随着经历的事情变多，发觉它还是有一定的合理性的。甚至在心理学上还有一个类型的概念 – 《<a href="https://baike.baidu.com/item/%E6%8A%95%E5%B0%84" target="_blank" rel="noopener">投射</a>》 理论。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1598089411507-9219f306-785f-48ce-838f-82896033500e.png#align=left&amp;display=inline&amp;height=467&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=934&amp;originWidth=1500&amp;size=159758&amp;status=done&amp;style=none&amp;width=750" alt="image.png"></p>
<p>自从明白这个道理后，我在遇到让我反感的人或事后。我就会想想这个人或这件事有没有我的影子。有则改之，无则加勉。有点类似老祖宗说的『<strong>见贤思齐焉，见不贤而内自省也</strong>』。</p>
<p>晚到、提前关单、漏洒。这些我都能理解，但是最后的甩锅行为却让我十分的反感。反感之后，就在思考这件事上是不是有我自己的影子。</p>
<p>其实整件事上最大的槽点，就是最后的甩锅行为。当时只要稍微表达一丝丝歉意，而不是一上来就盛气凌人，反而指责他人有问题，况且还在他人并没有错误的情况下。即使他人也有问题，这也不能掩盖自己的错误事实。</p>
<p>这样一想，发现自己身上还的确有同样的问题。把送外卖换成写代码，把晚到、提前关单、漏洒换成出现 bug，就变得很明显了。</p>
<p>当出现线上 bug 时，我可能会有一大堆理由，这个逻辑是产品经理设计的、开发时间太紧、在我本地是好的、测试是怎么测的，有 bug 还能上线。。。仿佛我自己才是最委屈的那个。但是细想一下，又跟 <strong>因为地址写错，所以漏洒</strong> 一样都是一些站不住脚的借口。</p>
<p>逻辑是产品设计的，但是实现是自己实现的，也经过产品评审会、技术评审会，而且没有提出异意。开发时间太紧，这也是最常遇到的，工期太紧的确会出现产品质量下降，但是也不是必然的理由。如果时间太紧有没有向上提出异意，如果时间无法延长，在保证核心业务的情况下，是否同产品商量过削减其它不紧急的业务逻辑，如果都不可以，是否向上反馈了质量风险。最后，出现线上问题，一般来说，测试同学有很大的责任，但是测试同学，特别是功能测试，很难完全覆盖所有的业务分支，最了解自己代码逻辑的只有自己，单元测试的覆盖率是否达标。</p>
<p>其实又何止打代码这一件事，生活中例子比比皆是，<strong>错了不可怕，怕的是认识不到自己错了</strong>。拿外界或他人的过错来掩盖自己的问题，是没法进步的。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1598093265108-073f57ea-d1d9-41b4-95eb-b13a349c89e4.png#align=left&amp;display=inline&amp;height=164&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=328&amp;originWidth=600&amp;size=309171&amp;status=done&amp;style=none&amp;width=300" alt="image.png"></p>
<h3 id="差评的权力"><a href="#差评的权力" class="headerlink" title="差评的权力"></a>差评的权力</h3><p>再说回外卖的事，我到最后也没有给小哥打差评。事实上无论是在网购、外卖还是打车。。。有评分功能的产品上，我几乎没有打过差评，除非我认为对方是恶意为之。大部分情况下我都表示理解。每次我想打差评的时候，都会脑补一个外卖小哥幸幸苦苦跑一天，结果因为一次失误被投诉，一天的收入被罚款。一个司机一天兢兢业业的开车，结果因为某次接乘客的时候，走错一个路口，导致出现延误被差评。</p>
<p>感性上，让我一直不要打差评，但是理性上，我又一直告诉我自己这样做是错误的。</p>
<p>不知道从什么时候开始，外卖平台都多了个 <strong>准时赔付 </strong>的功能。平台会估算一个送达时间，你可以按餐额的一定比例买份准时赔付险。如果没有按时送达，会进行赔付。刚开始看到这个功能的时候，我觉得很好。但是没用几次，我发现这个功能就是个鸡肋。因为那些准时的外卖小哥，不管你买不买赔付险，他们一般都会准时送到。而那些不太准时的外卖小哥，通常在时间期限快到的时候，打个电话给你，说他在楼下了，或者快到了，他们先点已送达然后关闭订单了，更有甚者直接一声不吭点了已送达，实际上超过约定时间很久才送到。而赔付险是按外卖小哥点击已送达的时间为准，所以几乎没有什么约束力。</p>
<p>为什么会出现这种情况呢？我觉得就是因为我放弃了差评的权力，没有及时的负面反馈，事情就向更负面的方向发展。</p>
<p>如果仔细想想这个 <strong>准时赔付险</strong> 本身就是很荒唐的一件事。也是消费者放弃自己差评权力造成的。试想我买了一份外卖，平台告诉我会在某个时间送达，这算是一种契约了，但是我为了外卖小哥按平台约定的时间送到，我需再额外加钱买个 <strong>准时赔付险 </strong>让他去履行当初本该履行的契约。外卖费用就变成了 <strong>本身餐费 + 运送费 + 准时送到的额外费 </strong>。这就像 A 借给 B 100 块钱，然后快到了还钱的时候，B 对 A 说，<strong>如果想让我准时还钱。那你得先给我钱。</strong></p>
<p>记得有一次《奇葩说》，好像有一个类似给不给差评的辩题。有一个发言让我印象深刻，她说 <strong>对于出错的外卖小哥，她表示感情上的理解，但是她还是要给差评，因为如果不给，那就是对那些没有出错的外卖小哥不公平，</strong>我深以为然。</p>
<p>本文地址 <a href="https://blog.coder4j.cn/2020/08/22/yuque-【随笔】外卖与影子/">https://blog.coder4j.cn/2020/08/22/yuque-【随笔】外卖与影子/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[【测试】 Java如何优雅的生成测试数据]]></title>
      <url>https://blog.coder4j.cn/2020/04/19/yuque-%E3%80%90%E6%B5%8B%E8%AF%95%E3%80%91-Java%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1596466683511-3126376c-fb13-4a4c-9b14-3b31d8aa198c.png#align=left&amp;display=inline&amp;height=383&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=383&amp;originWidth=900&amp;size=38900&amp;status=done&amp;style=none&amp;width=900" alt="image.png"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在日常的测试中，我们经常需要提前准备一大堆测试数据，用来验证业务逻辑。当然对于简单的数据类型完全可以通过 JDK 自带的  <code>Random</code>  类来实现。但是对于一个比较复杂的类，或者参数的格式有特殊要求的时候，<code>Random</code>  就不适用了，这个时候就需要借助一些能够生成测试数据的框架。</p>
<h2 id="相关框架"><a href="#相关框架" class="headerlink" title="相关框架"></a>相关框架</h2><p>我在实际调研中，找到了 2 个在个人看来还不错的生成框架，他们分别是：</p>
<ol>
<li><a href="https://github.com/jsonzou/jmockdata" target="_blank" rel="noopener">jmockdata</a></li>
<li><a href="https://github.com/DiUS/java-faker" target="_blank" rel="noopener">java-faker</a></li>
</ol>
<p>下面我将一一介绍这些框架的优缺点以及适用场景。话不多说，直接开始撸代码。</p>
<h3 id="JmockData"><a href="#JmockData" class="headerlink" title="JmockData"></a>JmockData</h3><p>首先出场的是 JmockData 框架，它是官方定义如下：</p>
<blockquote>
<p>一款实现模拟 JAVA 类型或对象的实例化并随机初始化对象的数据的工具框架。</p>
</blockquote>
<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.jsonzou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jmockdata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="基础类型数据生成"><a href="#基础类型数据生成" class="headerlink" title="基础类型数据生成"></a>基础类型数据生成</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBaseType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 基础数据类型</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JMockData<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JMockData<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JMockData<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JMockData<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JMockData<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JMockData<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JMockData<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 基础数据类型的数组</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JMockData<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JMockData<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JMockData<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JMockData<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JMockData<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JMockData<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JMockData<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token number">0</span>
<span class="token number">2610</span>
<span class="token number">3401</span>
<span class="token number">8582.18</span>
<span class="token number">7194.44</span>
5Xu7
<span class="token number">9051.92</span>
<span class="token punctuation">[</span>B<span class="token annotation punctuation">@7fbe847c</span>
<span class="token punctuation">[</span>I<span class="token annotation punctuation">@41975e01</span>
<span class="token punctuation">[</span>J<span class="token annotation punctuation">@c2e1f26</span>
<span class="token punctuation">[</span>D<span class="token annotation punctuation">@dcf3e99</span>
<span class="token punctuation">[</span>F<span class="token annotation punctuation">@6d9c638</span>
<span class="token punctuation">[</span>Ljava<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">;</span><span class="token annotation punctuation">@7dc5e7b4</span>
<span class="token punctuation">[</span>Ljava<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigDecimal<span class="token punctuation">;</span><span class="token annotation punctuation">@1ee0005</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="JavaBean-类型数据生成"><a href="#JavaBean-类型数据生成" class="headerlink" title="JavaBean 类型数据生成"></a>JavaBean 类型数据生成</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * java bean 测试
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJavaBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Person mock <span class="token operator">=</span> JMockData<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h5><pre class="line-numbers language-java"><code class="language-java">Person<span class="token punctuation">[</span>address<span class="token operator">=</span>RrayfQIK<span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">5863</span><span class="token punctuation">,</span>idCard<span class="token operator">=</span>SDn<span class="token punctuation">,</span>name<span class="token operator">=</span>j<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里可以看到，使用 <code>JMockdata.mock(xx.class);</code> 可以很容易的生成一个 JavaBean。框架通过反射，在底层遍历获得类的属性与类型，然后填充数据。</p>
<p>但是与此同时，大家也发现了，虽然我们可以的的确确的生成了一个 <code>Person</code> 类，也给它的每个属性都填充了值，但是生成的数据只是根据类型简单生成的，比如 <code>age</code> 字段被填充的是 5863。如果数据有现实含义，没有规则的随机就很容易出现乌龙。</p>
<p>要解决这个问题，我们就要限制随机数据的范围，可以通过它的配置功能实现。</p>
<h4 id="使用随机配置"><a href="#使用随机配置" class="headerlink" title="使用随机配置"></a>使用随机配置</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJavaBeanWithConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        MockConfig mockConfig <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">MockConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">subConfig</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span>
                        <span class="token comment" spellcheck="true">// 设置 int 的范围</span>
                        <span class="token punctuation">.</span><span class="token function">intRange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">subConfig</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span>
                        <span class="token comment" spellcheck="true">// 设置生成邮箱正则</span>
                        <span class="token punctuation">.</span><span class="token function">stringRegex</span><span class="token punctuation">(</span><span class="token string">"[a-z0-9]{5,15}\\@\\w{3,5}\\.[a-z]{2,3}"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">globalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Person mock <span class="token operator">=</span> JMockData<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> mockConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h5><pre class="line-numbers language-java"><code class="language-java">Person<span class="token punctuation">[</span>address<span class="token operator">=</span>hXttj2s<span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>email<span class="token operator">=</span>w14hnn<span class="token annotation punctuation">@UvFB9</span><span class="token punctuation">.</span>kt<span class="token punctuation">,</span>idCard<span class="token operator">=</span>V5bBdX<span class="token punctuation">,</span>name<span class="token operator">=</span>KM8<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以看到 <code>age</code> 跟 <code>email</code> 已经正常了，可以通过他强大的配置功能对于数据进行生成的限制，但是你也发现了，对于一些有简单边界的数据，这样做可以，否则就像 address 、 name 这样的数据，很难通过简单规则去生成。</p>
<p>而对于有现实意义的数据生成，可以使用 java-faker 框架。</p>
<h3 id="Java-faker"><a href="#Java-faker" class="headerlink" title="Java-faker"></a>Java-faker</h3><h4 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.javafaker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javafaker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="数据生成"><a href="#数据生成" class="headerlink" title="数据生成"></a>数据生成</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRandomName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Faker faker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Faker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Name name <span class="token operator">=</span> faker<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"firstName : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">firstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bloodGroup : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">bloodGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"suffix : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">suffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"title : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lastName : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">lastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nameWithMiddle : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">nameWithMiddle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fullName : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"prefix : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="生成结果"><a href="#生成结果" class="headerlink" title="生成结果"></a>生成结果</h5><pre class="line-numbers language-java"><code class="language-java">firstName <span class="token operator">:</span> Hollis
username <span class="token operator">:</span> cristy<span class="token punctuation">.</span>white
bloodGroup <span class="token operator">:</span> O<span class="token operator">-</span>
suffix <span class="token operator">:</span> Sr<span class="token punctuation">.</span>
title <span class="token operator">:</span> Product Implementation Specialist
lastName <span class="token operator">:</span> Johnston
nameWithMiddle <span class="token operator">:</span> Alesia Hagenes Kiehn
fullName <span class="token operator">:</span> Dr<span class="token punctuation">.</span> Pat Marvin
name <span class="token operator">:</span> Ms<span class="token punctuation">.</span> Jamal Rau
prefix <span class="token operator">:</span> Mr<span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到 java-faker 生成数据特别的方便，基本格式如下：</p>
<pre class="line-numbers language-java"><code class="language-java">        Faker faker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Faker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Xx xx <span class="token operator">=</span> faker<span class="token punctuation">.</span><span class="token function">xx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xx<span class="token punctuation">.</span>yyyy<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>步骤：</p>
<ol>
<li>创建 faker 对象</li>
<li>通过 faker 对象获得要生成的实体对象</li>
<li>调用实体对象获得对于生成的部分</li>
</ol>
<p>这里的实体对象，对应上面的 name，也就说我们要生成姓名相关的数据，拿到实体对象后还可以只获得其中的部分数据，比如姓名中的姓或名，还有前缀，甚至血型，可以说是非常全面。</p>
<p>而且 java-faker 支持的实体对象特别的多，如下：</p>
<blockquote>
<ul>
<li>Address</li>
<li>Ancient</li>
<li>Animal</li>
<li>App</li>
<li>Aqua Teen Hunger Force</li>
<li>Artist</li>
<li>Avatar</li>
<li>Back To The Future</li>
<li>Aviation</li>
<li>Basketball</li>
<li>Beer</li>
<li>Bojack Horseman</li>
<li>Book</li>
<li>Bool</li>
<li>Business</li>
<li>ChuckNorris</li>
<li>Cat</li>
<li>Code</li>
<li>Coin</li>
<li>Color</li>
<li>Commerce</li>
<li>Company</li>
<li>Crypto</li>
<li>DateAndTime</li>
<li>Demographic</li>
<li>Disease</li>
<li>Dog</li>
<li>DragonBall</li>
<li>Dune</li>
<li>Educator</li>
<li>Esports</li>
<li>File</li>
<li>Finance</li>
<li>Food</li>
<li>Friends</li>
<li>FunnyName</li>
<li>GameOfThrones</li>
<li>Gender</li>
<li>Hacker</li>
<li>HarryPotter</li>
<li>Hipster</li>
<li>HitchhikersGuideToTheGalaxy</li>
<li>Hobbit</li>
<li>HowIMetYourMother</li>
<li>IdNumber</li>
<li>Internet</li>
<li>Job</li>
<li>Kaamelott</li>
<li>LeagueOfLegends</li>
<li>Lebowski</li>
<li>LordOfTheRings</li>
<li>Lorem</li>
<li>Matz</li>
<li>Music</li>
<li>Name</li>
<li>Nation</li>
<li>Number</li>
<li>Options</li>
<li>Overwatch</li>
<li>PhoneNumber</li>
<li>Pokemon</li>
<li>Princess Bride</li>
<li>Relationship Terms</li>
<li>RickAndMorty</li>
<li>Robin</li>
<li>RockBand</li>
<li>Shakespeare</li>
<li>SlackEmoji</li>
<li>Space</li>
<li>StarTrek</li>
<li>Stock</li>
<li>Superhero</li>
<li>Team</li>
<li>TwinPeaks</li>
<li>University</li>
<li>Weather</li>
<li>Witcher</li>
<li>Yoda</li>
<li>Zelda</li>
</ul>
</blockquote>
<p>从身份证到姓名再到地址、动物、书籍、头像、职位等等，基本上覆盖了我们生活中的方方页面。</p>
<p>另外，java-faker 更贴心的是帮我们实现了国际化，可能刚才看了姓名的例子，有些朋友觉得这个框架好看但不好用，就拿生成姓名来说，生成都是 Johnston、Tom、Kiwi 之类英文名，在国内很少用到这些数据。其实 java-faker 已经考虑到这个问题。而且只要改一行代码就可以了。</p>
<h5 id="修改后的代码"><a href="#修改后的代码" class="headerlink" title="修改后的代码"></a>修改后的代码</h5><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 原代码 Faker faker = new Faker();</span>
        <span class="token comment" spellcheck="true">// 新代码</span>
        Faker faker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Faker</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>CHINA<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Name name <span class="token operator">=</span> faker<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"firstName : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">firstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bloodGroup : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">bloodGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"suffix : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">suffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"title : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lastName : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">lastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nameWithMiddle : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">nameWithMiddle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fullName : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"prefix : "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="生成结果-1"><a href="#生成结果-1" class="headerlink" title="生成结果"></a>生成结果</h5><pre class="line-numbers language-java"><code class="language-java">firstName <span class="token operator">:</span> 熠彤
username <span class="token operator">:</span> 烨霖<span class="token punctuation">.</span>龙
bloodGroup <span class="token operator">:</span> A<span class="token operator">-</span>
suffix <span class="token operator">:</span> IV
title <span class="token operator">:</span> Investor Division Engineer
lastName <span class="token operator">:</span> 范
nameWithMiddle <span class="token operator">:</span> 胡思
fullName <span class="token operator">:</span> 孟鸿涛
name <span class="token operator">:</span> 黎航
prefix <span class="token operator">:</span> Miss
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>只需要，把之前的 Faker faker = new Faker(); 改成 Faker faker = new Faker(Locale.CHINA); 即可。如果你想生成其它国家的内容也是可以的，java-faker 支持的国家如下：</p>
<blockquote>
<ul>
<li>bg</li>
<li>ca</li>
<li>ca-CAT</li>
<li>da-DK</li>
<li>de</li>
<li>de-AT</li>
<li>de-CH</li>
<li>en</li>
<li>en-AU</li>
<li>en-au-ocker</li>
<li>en-BORK</li>
<li>en-CA</li>
<li>en-GB</li>
<li>en-IND</li>
<li>en-MS</li>
<li>en-NEP</li>
<li>en-NG</li>
<li>en-NZ</li>
<li>en-PAK</li>
<li>en-SG</li>
<li>en-UG</li>
<li>en-US</li>
<li>en-ZA</li>
<li>es</li>
<li>es-MX</li>
<li>fa</li>
<li>fi-FI</li>
<li>fr</li>
<li>he</li>
<li>hu</li>
<li>in-ID</li>
<li>it</li>
<li>ja</li>
<li>ko</li>
<li>nb-NO</li>
<li>nl</li>
<li>pl</li>
<li>pt</li>
<li>pt-BR</li>
<li>ru</li>
<li>sk</li>
<li>sv</li>
<li>sv-SE</li>
<li>tr</li>
<li>uk</li>
<li>vi</li>
<li>zh-CN</li>
<li>zh-TW</li>
</ul>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="JmockData-1"><a href="#JmockData-1" class="headerlink" title="JmockData"></a>JmockData</h3><p>个人感觉它是 plus 版的 Random 类，方便简单的按类型生成数据，也可以自己给定配置与规则去生成，缺点，上文也说了，生成的数据没有太多实际意义，简单数据还好，如果像姓名、地址等有现实意义的数据，就不太合适了。</p>
<h3 id="Java-faker-1"><a href="#Java-faker-1" class="headerlink" title="Java-faker"></a>Java-faker</h3><p>java-faker 其实是迁移自 ruby 中大名鼎鼎的 faker。很多语言都有他的对应迁移，比如 python、java。所以数据量和功能是很完善并且经过考验的，使用起来也很方便。实际工作中，可以优化使用。如果要说缺点，个人觉得他有些地方国际化的并不全面，比如车牌、身份证之类的。如果对于这些数据有比较严格的要求，推荐另一个项目 <a href="https://github.com/yindz/common-random" target="_blank" rel="noopener">yindz/common-random: 简单易用的随机数据生成器。</a>这个项目对于本地化数据，做了很多处理，基本够用。</p>
<p>本文地址 <a href="https://blog.coder4j.cn/2020/04/19/yuque-【测试】-Java如何优雅的生成测试数据/">https://blog.coder4j.cn/2020/04/19/yuque-【测试】-Java如何优雅的生成测试数据/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[【随笔】开源之殇]]></title>
      <url>https://blog.coder4j.cn/2020/03/31/yuque-%E3%80%90%E9%9A%8F%E7%AC%94%E3%80%91%E5%BC%80%E6%BA%90%E4%B9%8B%E6%AE%87/</url>
      <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1585665681398-9d34e534-df66-4ee2-a177-8ac14fbdfc86.png#align=left&amp;display=inline&amp;height=383&amp;name=image.png&amp;originHeight=383&amp;originWidth=900&amp;size=288525&amp;status=done&amp;style=none&amp;width=900" alt="image.png"></h1><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>这两天有个<a href="https://www.ithome.com/0/480/137.htm" target="_blank" rel="noopener">新闻</a>比较火，一个叫丹尼斯·普什卡列夫的俄罗斯程序员，因为骑车撞人被判 18 个月。骑车撞人可能不是什么大新闻，造成严重后果的，被判刑也无可厚非。</p>
<p>可问题就出在这个撞人的程序员上，他是前端知名开源框架 <a href="https://github.com/zloirock/core-js" target="_blank" rel="noopener">core-js</a> 的作者。这个库有多知名呢？反正苹果公司在使用，并且 vue 也依赖这个项目。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1585656907662-cfbdaf7d-0893-4853-bdc5-53462a4f28f9.png#align=left&amp;display=inline&amp;height=441&amp;name=image.png&amp;originHeight=882&amp;originWidth=2550&amp;size=257910&amp;status=done&amp;style=none&amp;width=1275" alt="image.png"></p>
<p>上图是 core-js 在 npm 的项目截图，可以看到每周有 2600w+ 次的下载量。这个体量可以说是一个前端生态的基础框架了。</p>
<p>说了这么多，我只想表达这个项目真的很重要，有很多很多人每天都在使用。</p>
<p>所以在得知作者被判刑之后引起了很多人的担忧，项目没人维护了，在项目的 github 上的 issues 就有人直接了当的问作者，入狱之后这个项目怎么办。</p>
<p>有人提议作者转移 core-js 的控制权，毕竟他有很长一段时间是没法维护的。甚至还有人建议作者在监狱的图书馆里继续维护这个项目。</p>
<p>总之大多人关心的是这个开源项目未来是否能继续稳定的使用，而不是作者本人以及交通事故的受害者。虽说不上对错，但总感悲凉，人都已经入狱了，还被人催着维护项目。</p>
<h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>另一件事，部分人可能有些印象，2017 年的年中的时候，有一篇文章在开源界传的很广。帖子的标题叫作  <a href="https://www.v2ex.com/t/367424" target="_blank" rel="noopener">知名公司（努比亚/中兴）拿我的开源软件（ XXL-JOB）申请国家知识专利，我该怎么办？</a>部分内容如下：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1585659106524-005508a6-23a1-4bd7-ad4c-0ae1ea443947.png#align=left&amp;display=inline&amp;height=591&amp;name=image.png&amp;originHeight=1182&amp;originWidth=1518&amp;size=460162&amp;status=done&amp;style=none&amp;width=759" alt="image.png"></p>
<p>一家国内知名企业把一个开源项目一字未改的拿取申请了国家专利。也就是说你辛辛苦苦写的代码，无偿给别人使用，别人拿着你的代码去申请了知识产权，到头来自己使用自己的项目都可能被告侵权。是不是很魔幻。</p>
<p>其实这个开源项目在业内有一定的知名度，作者本身也有一定的影响力。甚至当时开源中国网站也介入维权。下面是开源中国官方的<a href="https://my.oschina.net/javayou/blog/918941" target="_blank" rel="noopener">维权进展报告</a>。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1585660110740-818e47fa-3771-428b-b6f0-9100343f4b77.png#align=left&amp;display=inline&amp;height=621&amp;name=image.png&amp;originHeight=1242&amp;originWidth=1848&amp;size=300281&amp;status=done&amp;style=none&amp;width=924" alt="image.png"></p>
<p>注意这个最新进展报告的发布时间及文章的最后一句话。到写本文时（2020-03-31），我仍然可以在专利网站上找到这个专利申请。大概率永远也不会有什么改变。</p>
<h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>去年，我在 v 站看到了一篇帖子，一直在脑海里久久不能平息，帖子的标题是  <a href="https://www.v2ex.com/t/625470" target="_blank" rel="noopener">程序员总喜欢自断后路，难怪职业生涯只能到 35 岁</a> 。原帖内容如下：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1585660758808-70f7f05f-4962-4b4f-b8a3-04403d9cbb41.png#align=left&amp;display=inline&amp;height=891&amp;name=image.png&amp;originHeight=1783&amp;originWidth=1520&amp;size=625284&amp;status=done&amp;style=none&amp;width=760" alt="image.png"></p>
<p>如果早几年，我还在学校，或者刚刚接触 IT 行业，我点开这篇文章，肯定一喷到底。现在看到这样的内容，只能无言以对。我知道作者只是一时情绪激动，通过偏激的方式去表达，但是我能感同身受到作者的那种愤怒与无奈。</p>
<h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><p>刚接触到 github 的时候，我感到很震惊，怎么会有人把自己写的代码无偿的提供给其它人使用。接触久了，我又觉得理所应当，熟视无睹后，觉得 IT 行业本来就应该是这样的。但是再久点，我又开始疑惑，真的是理所应当的吗？我接触到的各行各业，从来没有看到过任何一个行业，有 IT 行业，这种如此普遍的共享与开源精神。</p>
<p>时至今日，我仍不明白开源的精神究竟是什么，又是什么力量驱动着无数程序员为之通宵达旦，呕心沥血而不求回报。</p>
<p>我想，开源也许是独属于程序员的浪漫主义吧。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1585667451352-29d2a9e3-1fbd-479e-b51c-3b100f2ddea7.png#align=left&amp;display=inline&amp;height=266&amp;name=image.png&amp;originHeight=250&amp;originWidth=450&amp;size=109976&amp;status=done&amp;style=none&amp;width=479" alt="image.png"></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2020/03/31/yuque-【随笔】开源之殇/">https://blog.coder4j.cn/2020/03/31/yuque-【随笔】开源之殇/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[【Maven】maven 插件开发实战]]></title>
      <url>https://blog.coder4j.cn/2020/03/30/yuque-%E3%80%90Maven%E3%80%91maven-%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1585583078647-c0a12206-3334-4eaf-9588-fd384bd43d3b.png#align=left&amp;display=inline&amp;height=383&amp;name=image.png&amp;originHeight=383&amp;originWidth=900&amp;size=137499&amp;status=done&amp;style=none&amp;width=900" alt="image.png"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，maven 实质上是一个插件执行框架，所有的工作都是通过插件完成的。包括我们日常使用到的类似 install、clean、deploy、compiler。。。这些命令，其实底层都是一个一个的 maven 插件。</p>
<h2 id="如何开发自己的插件"><a href="#如何开发自己的插件" class="headerlink" title="如何开发自己的插件"></a>如何开发自己的插件</h2><h3 id="1-maven-插件的命名规范"><a href="#1-maven-插件的命名规范" class="headerlink" title="1. maven 插件的命名规范"></a>1. maven 插件的命名规范</h3><p>在写一个项目之前，第一件事就是确定一个名称。maven 插件也不例外。它有着自己的一套命名规范。但是规范很简单，一句话就可以概括，<strong>官方插件命名的格式为 maven-xxx-plugin,非官方的插件命名为 xxx-maven-plugin 。</strong>是不是觉得很眼熟，没错，spring boot starter 的命名也有类似的规范。</p>
<p>好的，我们的第一个 maven 插件项目就叫 demo-maven-plugin 吧。</p>
<h3 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2. 创建项目"></a>2. 创建项目</h3><p>名称起好了，下一步就是创建这个项目。如果你使用 idea 的话，那么创建十分的便捷，按如下步骤即可：</p>
<h4 id="2-1-选择-org-apache-maven-archetypes-maven-archetype-mojo-为骨架创建项目"><a href="#2-1-选择-org-apache-maven-archetypes-maven-archetype-mojo-为骨架创建项目" class="headerlink" title="2.1 选择 org.apache.maven.archetypes:maven-archetype-mojo 为骨架创建项目"></a>2.1 选择 org.apache.maven.archetypes:maven-archetype-mojo 为骨架创建项目</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1585576537171-8acf6bd7-2bf5-4db9-8d03-cd17ce0073ea.png#align=left&amp;display=inline&amp;height=605&amp;name=image.png&amp;originHeight=1210&amp;originWidth=2462&amp;size=415035&amp;status=done&amp;style=none&amp;width=1231" alt="image.png"></p>
<ol>
<li>选择创建新项目</li>
<li>选择通过 maven 创建</li>
<li>勾选 Create from archetype 通过项目骨架创建</li>
<li>选择  org.apache.maven.archetypes:maven-archetype-mojo</li>
<li>点击下一步</li>
</ol>
<h4 id="2-2-输入在第一步起的项目名"><a href="#2-2-输入在第一步起的项目名" class="headerlink" title="2.2 输入在第一步起的项目名"></a>2.2 输入在第一步起的项目名</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1585576749262-5321d41f-c5c2-484b-9449-fc8f18f51d8e.png#align=left&amp;display=inline&amp;height=605&amp;name=image.png&amp;originHeight=1210&amp;originWidth=2462&amp;size=165287&amp;status=done&amp;style=none&amp;width=1231" alt="image.png"></p>
<p>点击 Next</p>
<h4 id="2-3-点击-Finish-完成项目创建"><a href="#2-3-点击-Finish-完成项目创建" class="headerlink" title="2.3 点击 Finish 完成项目创建"></a>2.3 点击 Finish 完成项目创建</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1585576887162-6f6a5e25-7aa6-4edb-9f38-e04697661b8d.png#align=left&amp;display=inline&amp;height=605&amp;name=image.png&amp;originHeight=1210&amp;originWidth=2462&amp;size=183559&amp;status=done&amp;style=none&amp;width=1231" alt="image.png"></p>
<h4 id="2-4-分析项目文件"><a href="#2-4-分析项目文件" class="headerlink" title="2.4  分析项目文件"></a>2.4  分析项目文件</h4><h5 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h5><p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1585577595314-252a1194-e2df-4087-952e-6c03b6b5bbb4.png#align=left&amp;display=inline&amp;height=155&amp;name=image.png&amp;originHeight=310&amp;originWidth=802&amp;size=35169&amp;status=done&amp;style=none&amp;width=401" alt="image.png"></p>
<blockquote>
<p>可以看到生成的项目就是我们最最常见的 maven 项目的结构，生成的文件也很少，一个 pom.xml 文件，一个 MyMojo 文件，简单介绍一下这两个文件</p>
</blockquote>
<h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.coder4j.study.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>demo-mavne-plugin Maven Mojo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.apache.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-plugin-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>首先生成的项目 pom.xml 中，自动依赖了两个项目，一个是 maven-plugin-api ，这个是开发 maven 插件必须依赖的核心包。另一个是单元测试时使用的 junit 包。这两个没什么要注意的，真正要注意的是这个项目的 packaging，通常我遇到的 packaging 都是 jar、war、pom，这里比较特殊是 maven-plugin。</p>
</blockquote>
<h5 id="MyMojo-java"><a href="#MyMojo-java" class="headerlink" title="MyMojo.java"></a>MyMojo.java</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/*
 * Copyright 2001-2005 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>AbstractMojo<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>MojoExecutionException<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Goal which touches a timestamp file.
 *
 * @goal touch
 *
 * @phase process-sources
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMojo</span>
    <span class="token keyword">extends</span> <span class="token class-name">AbstractMojo</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * Location of the file.
     * @parameter expression="${project.build.directory}"
     * @required
     */</span>
    <span class="token keyword">private</span> File outputDirectory<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">throws</span> MojoExecutionException
    <span class="token punctuation">{</span>
        File f <span class="token operator">=</span> outputDirectory<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>f<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            f<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        File touch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span> f<span class="token punctuation">,</span> <span class="token string">"touch.txt"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

        FileWriter w <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span> touch <span class="token punctuation">)</span><span class="token punctuation">;</span>

            w<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span> <span class="token string">"touch.txt"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span> IOException e <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MojoExecutionException</span><span class="token punctuation">(</span> <span class="token string">"Error creating file "</span> <span class="token operator">+</span> touch<span class="token punctuation">,</span> e <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span> w <span class="token operator">!=</span> null <span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">try</span>
                <span class="token punctuation">{</span>
                    w<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">catch</span> <span class="token punctuation">(</span> IOException e <span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// ignore</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先生成的类继承了  AbstractMojo 这个抽象类，这里是 maven 插件的规范要求，maven 插件必须要继承  AbstractMojo  并实现他的  execute 方法。</p>
<p>另外可以看到类与方法使用了很多 tag。注意是 tag 而不是注解，注解是直接标记的，而 tag 是在文档注释里面的。</p>
<p>其中  @goal 这个 tag 的作用是指定插件的命名，比如我们常用的 mvn clean，这个 clean 就是他的  @goal 。</p>
<p>而 @phase 是绑定插件执行的生成周期，比如你绑定在 clean 这个周期，那你在执行 clean 的时候会自动触发你的插件。</p>
<p>@parameter 用来指定插件的参数。</p>
<p>小朋友你是否有很多问号？tag 这个东西写在文档注释里面的东西，方便是方便但是容易写错呀，写错没有语法报错，写对时候也没有语法提示，为什么不直接用注解的形式呢？原因是 java 的注解是 jdk1.5 之后才有的，而实现 maven 的时候还没有这种语法。所以要一条路走到黑，一直背这个历史包袱吗？当然不是，后面我们会说解决办法。另外，这种写法虽然不推荐使用了，但是有些 maven 的经典插件由于完成时间比较早，熟悉这些 tag 对于理解代码也有帮助。</p>
<h3 id="3-开发插件"><a href="#3-开发插件" class="headerlink" title="3. 开发插件"></a>3. 开发插件</h3><h4 id="3-1-代码未动，依赖先行-pom-xml"><a href="#3-1-代码未动，依赖先行-pom-xml" class="headerlink" title="3.1 代码未动，依赖先行  pom.xml"></a>3.1 代码未动，依赖先行  pom.xml</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.coder4j.study.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>demo-mavne-plugin Maven Mojo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.apache.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-plugin-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugin-tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-plugin-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-plugin-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>相较于默认的 pom.xml 文件，我们做了如下几个变动：</p>
<ol>
<li>升级 maven-plugin-api 的插件版本到  3.5.2 。原生的 2.0 实在是太老了。</li>
<li>添加  maven-plugin-annotations 这个依赖，还记得上面说的 tag 的事吗？有了这个依赖就可以直接使用注解了</li>
<li>添加  maven-plugin-plugin 插件依赖，添加这个依赖主要是为了在 jdk1.8 能编译通过，否则会报错</li>
</ol>
<h4 id="3-2-DemoMojo-java"><a href="#3-2-DemoMojo-java" class="headerlink" title="3.2 DemoMojo.java"></a>3.2 DemoMojo.java</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 *
 *  * *
 *  *  * blog.coder4j.cn
 *  *  * Copyright (C) 2016-2020 All Rights Reserved.
 *  *
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>AbstractMojo<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>MojoExecutionException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>MojoFailureException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Mojo<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Parameter<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version DemoMojo.java, v 0.1 2020-03-30 22:51 buhao
 */</span>
<span class="token annotation punctuation">@Mojo</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoMojo</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMojo</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">"kiwi"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MojoExecutionException<span class="token punctuation">,</span> MojoFailureException <span class="token punctuation">{</span>
        <span class="token function">getLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先，同生成的类一样，我们的类必须继承  AbstractMojo 并实现他的 execute 方法，而 execute 方法其实就是这个插件的入口类。</p>
<p>示例代码中有两个很重要的注解，一个是 @Mojo ，它主要用来定义插件相关的信息相当于上面说的 @goal ，其中 name 属性用来指定这个插件名称，同 clean 类似。</p>
<p>另外一个重要注解  @Parameter ，则是用来指定插件运行时使用的参数，其中 name 是参数名，defaultValue 顾名思义是默认值，也就是在用户没有设置的时候使用的值。</p>
<p>详细的插件及作用如下：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>execution<span class="token punctuation">.</span>MavenSession<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>AbstractMojo<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>MojoExecution<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>descriptor<span class="token punctuation">.</span>PluginDescriptor<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Execute<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>InstantiationStrategy<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>LifecyclePhase<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Mojo<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Parameter<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ResolutionScope<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>project<span class="token punctuation">.</span>MavenProject<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>Settings<span class="token punctuation">;</span>

       <span class="token comment" spellcheck="true">// 此Mojo对应的目标的名称</span>
<span class="token annotation punctuation">@Mojo</span><span class="token punctuation">(</span> name <span class="token operator">=</span> <span class="token string">"&lt;goal-name>"</span><span class="token punctuation">,</span>
       aggregator <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token operator">|</span><span class="token boolean">true</span><span class="token operator">></span><span class="token punctuation">,</span>
       configurator <span class="token operator">=</span> <span class="token string">"&lt;role hint>"</span><span class="token punctuation">,</span>
       <span class="token comment" spellcheck="true">// 执行策略</span>
       executionStrategy <span class="token operator">=</span> <span class="token string">"&lt;once-per-session|always>"</span><span class="token punctuation">,</span>
       inheritByDefault <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">|</span><span class="token boolean">false</span><span class="token operator">></span><span class="token punctuation">,</span>
       <span class="token comment" spellcheck="true">// 实例化策略</span>
       instantiationStrategy <span class="token operator">=</span> InstantiationStrategy<span class="token punctuation">.</span>&lt;strategy<span class="token operator">></span><span class="token punctuation">,</span>
       <span class="token comment" spellcheck="true">// 如果用户没有在POM中明确设置此Mojo绑定到的phase，那么绑定一个MojoExecution到那个phase</span>
       defaultPhase <span class="token operator">=</span> LifecyclePhase<span class="token punctuation">.</span>&lt;phase<span class="token operator">></span><span class="token punctuation">,</span>
       requiresDependencyResolution <span class="token operator">=</span> ResolutionScope<span class="token punctuation">.</span>&lt;scope<span class="token operator">></span><span class="token punctuation">,</span>
       requiresDependencyCollection <span class="token operator">=</span> ResolutionScope<span class="token punctuation">.</span>&lt;scope<span class="token operator">></span><span class="token punctuation">,</span>
       <span class="token comment" spellcheck="true">// 提示此Mojo需要被直接调用（而非绑定到生命周期阶段）</span>
       requiresDirectInvocation <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token operator">|</span><span class="token boolean">true</span><span class="token operator">></span><span class="token punctuation">,</span>
       <span class="token comment" spellcheck="true">// 提示此Mojo不能在离线模式下运行</span>
       requiresOnline <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token operator">|</span><span class="token boolean">true</span><span class="token operator">></span><span class="token punctuation">,</span>
       <span class="token comment" spellcheck="true">// 提示此Mojo必须在一个Maven项目内运行</span>
       requiresProject <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">|</span><span class="token boolean">false</span><span class="token operator">></span><span class="token punctuation">,</span>
       <span class="token comment" spellcheck="true">// 提示此Mojo是否线程安全，线程安全的Mojo支持在并行构建中被并发的调用</span>
       threadSafe <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token operator">|</span><span class="token boolean">true</span><span class="token operator">></span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (since Maven 3.0)</span>

<span class="token comment" spellcheck="true">// 何时执行此Mojo</span>
<span class="token annotation punctuation">@Execute</span><span class="token punctuation">(</span> goal <span class="token operator">=</span> <span class="token string">"&lt;goal-name>"</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">// 如果提供goal，则隔离执行此Mojo</span>
          phase <span class="token operator">=</span> LifecyclePhase<span class="token punctuation">.</span>&lt;phase<span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 在此生命周期阶段自动执行此Mojo</span>
          lifecycle <span class="token operator">=</span> <span class="token string">"&lt;lifecycle-id>"</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 在此生命周期中执行此Mojo</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMojo</span>
    <span class="token keyword">extends</span> <span class="token class-name">AbstractMojo</span>
<span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span> name <span class="token operator">=</span> <span class="token string">"parameter"</span><span class="token punctuation">,</span>
                <span class="token comment" spellcheck="true">// 在POM中可使用别名来配置参数</span>
                alias <span class="token operator">=</span> <span class="token string">"myAlias"</span><span class="token punctuation">,</span>
                property <span class="token operator">=</span> <span class="token string">"a.property"</span><span class="token punctuation">,</span>
                defaultValue <span class="token operator">=</span> <span class="token string">"an expression, possibly with ${variables}"</span><span class="token punctuation">,</span>
                readonly <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token operator">|</span><span class="token boolean">true</span><span class="token operator">></span><span class="token punctuation">,</span>
                required <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token operator">|</span><span class="token boolean">true</span><span class="token operator">></span> <span class="token punctuation">)</span>
    <span class="token keyword">private</span> String parameter<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span> role <span class="token operator">=</span> MyComponentExtension<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                hint <span class="token operator">=</span> <span class="token string">"..."</span> <span class="token punctuation">)</span>
    <span class="token keyword">private</span> MyComponent component<span class="token punctuation">;</span>


    <span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span> defaultValue <span class="token operator">=</span> <span class="token string">"${session}"</span><span class="token punctuation">,</span> readonly <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">)</span>
    <span class="token keyword">private</span> MavenSession session<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span> defaultValue <span class="token operator">=</span> <span class="token string">"${project}"</span><span class="token punctuation">,</span> readonly <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">)</span>
    <span class="token keyword">private</span> MavenProject project<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span> defaultValue <span class="token operator">=</span> <span class="token string">"${mojoExecution}"</span><span class="token punctuation">,</span> readonly <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">)</span>
    <span class="token keyword">private</span> MojoExecution mojo<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span> defaultValue <span class="token operator">=</span> <span class="token string">"${plugin}"</span><span class="token punctuation">,</span> readonly <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">)</span>
    <span class="token keyword">private</span> PluginDescriptor plugin<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span> defaultValue <span class="token operator">=</span> <span class="token string">"${settings}"</span><span class="token punctuation">,</span> readonly <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">)</span>
    <span class="token keyword">private</span> Settings settings<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span> defaultValue <span class="token operator">=</span> <span class="token string">"${project.basedir}"</span><span class="token punctuation">,</span> readonly <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">)</span>
    <span class="token keyword">private</span> File basedir<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span> defaultValue <span class="token operator">=</span> <span class="token string">"${project.build.directory}"</span><span class="token punctuation">,</span> readonly <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">)</span>
    <span class="token keyword">private</span> File target<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>回到示例上了，我们这个插件作用很简单，根据配置输出 hello xxx，如果没有配置就输出 hello kiwi。我们在写插件时，当然不会这样写，但是通过这个 demo，你就掌握了 maven 插件的大部分知识，可以自己做一些很有趣的插件。</p>
<h3 id="4-使用插件"><a href="#4-使用插件" class="headerlink" title="4. 使用插件"></a>4. 使用插件</h3><p>首先上面我们的代码写完了，必须要 Install 一下，否则别的项目无法直接依赖，如果你还想给其它人使用，那还需上传到 maven 仓库。</p>
<h4 id="4-1-依赖插件"><a href="#4-1-依赖插件" class="headerlink" title="4.1 依赖插件"></a>4.1 依赖插件</h4><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.coder4j.study.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在我们想使用插件的项目中，添加如上配置，其中 plugin 中使用我们插件的   GAV 信息。</p>
<h4 id="4-2-启动插件"><a href="#4-2-启动插件" class="headerlink" title="4.2 启动插件"></a>4.2 启动插件</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1585581578390-50d9cb76-2506-4cae-8cba-d93d21bbd7fa.png#align=left&amp;display=inline&amp;height=326&amp;name=image.png&amp;originHeight=652&amp;originWidth=904&amp;size=126075&amp;status=done&amp;style=none&amp;width=452" alt="image.png"></p>
<p>如果上面配置的都正确，那么在 idea 右侧的 Maven 中，你配置的项目的 Plugins 下会多了一个 demo（具体根据你插件项目的名称），而 demo 里面会有一个 demo:hello，其中这个 demo 对应你插件项目的名称，而 hello 对应你插件的名称也就是 @Mojo 中的 name 。</p>
<p>好的，我们双击一下，demo:hello ，会输出如下日志：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1585581782947-f0d0ee16-4c02-4925-85e7-039229934079.png#align=left&amp;display=inline&amp;height=340&amp;name=image.png&amp;originHeight=680&amp;originWidth=1766&amp;size=109127&amp;status=done&amp;style=none&amp;width=883" alt="image.png"></p>
<p>这样，我们的第一个 Maven 插件就好了。</p>
<h4 id="4-3-配置参数"><a href="#4-3-配置参数" class="headerlink" title="4.3 配置参数"></a>4.3 配置参数</h4><p>可能你还记得，我们在写 DemoMojo 的时候还指定了一个 name 属性，并且为它指定了一个  Parameter，这个如何使用。只要在依赖的插件下面添加 configuration 标签就可以了。</p>
<pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.coder4j.study.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>tom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中  configuration 标签内的标签，对应你定义的参数名称，而且 idea 还有语法提示，很 nice。</p>
<p>好的，我们再运行一下，结果如下：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1585582062275-b8dfb9e9-bddc-4eea-bd3b-ec6e1aca2d6c.png#align=left&amp;display=inline&amp;height=338&amp;name=image.png&amp;originHeight=676&amp;originWidth=1788&amp;size=107447&amp;status=done&amp;style=none&amp;width=894" alt="image.png"></p>
<p>好的，大功告成。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.gmem.cc/maven-plugin-development" target="_blank" rel="noopener">Maven 插件开发</a></p>
<p><a href="https://www.cnblogs.com/sniffs/p/11985699.html" target="_blank" rel="noopener">Maven 插件编写</a></p>
<h3 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h3><p>因为篇幅有限，无法贴完所有代码，如遇到问题可到 <a href="https://github.com/kiwiflydream/study-example/tree/master/demo-maven-plugin" target="_blank" rel="noopener">github</a> 上查看源码。</p>
<h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1585582500755-9deeb99d-1ffa-4dfd-9812-2dfd9a399013.png#align=left&amp;display=inline&amp;height=250&amp;name=image.png&amp;originHeight=500&amp;originWidth=900&amp;size=291174&amp;status=done&amp;style=none&amp;width=450" alt="image.png"></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2020/03/30/yuque-【Maven】maven-插件开发实战/">https://blog.coder4j.cn/2020/03/30/yuque-【Maven】maven-插件开发实战/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[【qdox】Java 代码解析利器 QDox]]></title>
      <url>https://blog.coder4j.cn/2020/03/22/yuque-%E3%80%90qdox%E3%80%91Java-%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90%E5%88%A9%E5%99%A8-QDox/</url>
      <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1584882725192-78d7799b-f010-48a2-b59a-0a16cf76ea10.png#align=left&amp;display=inline&amp;height=383&amp;name=image.png&amp;originHeight=383&amp;originWidth=900&amp;size=300248&amp;status=done&amp;style=none&amp;width=900" alt="image.png"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在写 maven 插件，涉及到了 java 代码解析这块内容。需要解析 java 源码，然后对于类中的不同部分进行处理。发现手写还是很难的，找了一圈发现了两个不错的工具可以使用，一个是  <a href="https://github.com/javaparser/javaparser" target="_blank" rel="noopener">javaparser</a>，另一个是  <a href="https://github.com/paul-hammant/qdox" target="_blank" rel="noopener">qdox</a> 。个人感觉 javaparser 强大一些，更新与维护也比较勤，但是相对来说上手难一点，从他的使用文档独立成书在买，可见一斑，而 qdox 比较小巧，上手很快，功能也满足大部分需求，最终还是选择了 qdox。</p>
<h2 id="什么是-QDox"><a href="#什么是-QDox" class="headerlink" title="什么是 QDox"></a>什么是 QDox</h2><p>官方的介绍是:</p>
<blockquote>
<p>QDox - full extractor of Java class/interface/method definitions (including annotations, parameters, param names)</p>
</blockquote>
<p>大概意思是一款完整的 java 类、接口、方法定义的提取器，包括了注释、参数及参数名称。其实核心功能就是我输入一个 java 类的源码，他可以把这个 java 类解析成一个对象，我们通过这个对象可以获取很方便的获取解析的类的不同组成，比如我可以获得这个类有哪些方法，这个方法的参数是什么，返回值又是什么，他们的类型又分别是什么？还有这个方法上有哪些注释、哪些 tag。也能获取类中有哪些的 field。。。总之把这个类庖丁解牛般解析好，使得调用者很方便的获取到自己感兴趣的信息。</p>
<h2 id="为什么使用-QDox"><a href="#为什么使用-QDox" class="headerlink" title="为什么使用 QDox"></a>为什么使用 QDox</h2><p>除了上面说的 QDox 上手比较快外，他的运行速度及占用空间都十分优秀。</p>
<p>另外不得不说的是这个项目可以说是一个上古时期的项目了，看了 github 上的提交记录，最早的一条提交记录是 2002 年的时候，因为这个项目之前使用的是 svn，所以具体时间可能更早。一个开源项目维护了快 20 年也是一件挺令人钦佩的事。不过到目前为止，这个项目在 github 上只有 151 个 star，如果这个项目对你有所帮助，希望大家可以给作者一个 star。github 上有太多类似的项目默默无闻的出现，又默默无闻的消逝。</p>
<p>扯远了，虽然项目关注的人比较少，但是使用它的项目还是比较多的。maven 的官方 javadoc 插件  maven-javadoc-plugin 就是使用它来解析代码中的 doc tags 的。所以可能你没有直接使用它，但是它其中已经在你本地的 maven 仓库内躺着了。有官方背书，对于它的使用就比较放心了。</p>
<h2 id="什么情况下适合使用-QDox"><a href="#什么情况下适合使用-QDox" class="headerlink" title="什么情况下适合使用 QDox"></a>什么情况下适合使用 QDox</h2><p>这个就比较多了，通常只要我们需要解析源码的内容就可以使用，比如我想获得指定类文件中的全部方法。就可以使用。可能有些人感到不解了，为什么不通过反射拿到这些内容，这样不是更方便吗？首先，反射的前提是你能拿到这个类的实例，或者你项目中就有这个类。即使这些条件都满足，但是一个很常见的需求反射没法满足，比如说拿到方法的注释及 tags 等，这类在编译时就被抹除了。这种情况就不得不用源码解析的方法了。</p>
<p>另外它不只是能解析，他同时可以生成 java 类文件，所以你可以动态的生成一些 java 类。</p>
<p>无论是解析还是生成，在写插件的时候肯定需要会有这样的场景，比如我想通过代码里的 javadoc 这些 tags 生成一个接口文档给前端，这样就不用我一个一个手写了。再比如我想通过数据表的信息，自动生成 model 类，service 类。。。使用场景的限制主要是个人的想象力。</p>
<h2 id="如何使用-QDox"><a href="#如何使用-QDox" class="headerlink" title="如何使用 QDox"></a>如何使用 QDox</h2><h3 id="创建-java-项目-builder-对象"><a href="#创建-java-项目-builder-对象" class="headerlink" title="创建 java 项目 builder 对象"></a>创建 java 项目 builder 对象</h3><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 创建 java 项目 builder 对象</span>
        JavaProjectBuilder javaProjectBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaProjectBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="添加-java-源文件"><a href="#添加-java-源文件" class="headerlink" title="添加 java 源文件"></a>添加 java 源文件</h3><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 添加 java 源文件</span>
        javaProjectBuilder<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/kiwi/study/code/study-example/study-qdox-example/src/main/java/cn/coder4j/study/example/qdox/Demo.java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>demo 示例是通过文件添加的，其实支持很多种类型，比如 URL、Reader 甚至直接添加一个目录，框架会自己扫描目录下的所有 java 文件</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1584875079407-bec0607d-34a3-413d-be2a-1787fa13f162.png#align=left&amp;display=inline&amp;height=197&amp;name=image.png&amp;originHeight=394&amp;originWidth=1538&amp;size=114763&amp;status=done&amp;style=none&amp;width=769" alt="image.png"></p>
<h3 id="获得解析后的-JavaClass-对象"><a href="#获得解析后的-JavaClass-对象" class="headerlink" title="获得解析后的 JavaClass 对象"></a>获得解析后的 JavaClass 对象</h3><blockquote>
<p>经过上面两步，准备工作就已经结束了，可以直接获得解析后的 JavaClass 对象了，有两种方式获取，一种是直接获得解析后的类集合，为什么是集合呢？因为上面也说了是可以添加目录的，而且 addSource 可以多次调用，添加多个文件。另一种是在知道类名称的情况下直接使用 getClassByName 获得</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1584880098195-0ea64ff6-f3d0-47f8-95b2-dd54217c0d32.png#align=left&amp;display=inline&amp;height=107&amp;name=image.png&amp;originHeight=214&amp;originWidth=1554&amp;size=75807&amp;status=done&amp;style=none&amp;width=777" alt="image.png"></p>
<pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 获得解析后的类</span>
        Collection<span class="token operator">&lt;</span>JavaClass<span class="token operator">></span> classes <span class="token operator">=</span> javaProjectBuilder<span class="token punctuation">.</span><span class="token function">getClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>JavaClass javaClass <span class="token operator">:</span> classes<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="JavaClass-接口定义"><a href="#JavaClass-接口定义" class="headerlink" title="JavaClass 接口定义"></a>JavaClass 接口定义</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>thoughtworks<span class="token punctuation">.</span>qdox<span class="token punctuation">.</span>model<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>thoughtworks<span class="token punctuation">.</span>qdox<span class="token punctuation">.</span>library<span class="token punctuation">.</span>ClassLibrary<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Equivalent of {@link java.lang.Class}, providing the most important methods.
 * Where the original Class is using an Array, this model is using a List.
 *
 * @author Robert Scholte
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JavaClass</span> <span class="token keyword">extends</span> <span class="token class-name">JavaModel</span><span class="token punctuation">,</span> JavaType<span class="token punctuation">,</span> JavaAnnotatedElement<span class="token punctuation">,</span> JavaGenericDeclaration
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * The compilation unit, which includes the imports, the public and anonymous classes
     *
     * @return the {@link JavaSource} of this element
     */</span>
    JavaSource <span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * (API description of {@link java.lang.Class#isInterface()})
     * &lt;p>
     * Determines if the specified &lt;code>Class&lt;/code> object represents an interface type.
     * &lt;/p>
     *
     * @return &lt;code>true&lt;/code> if this object represents an interface, otherwise &lt;code>false&lt;/code>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * (API description of {@link java.lang.Class#isEnum()})
     * &lt;p>
     * Returns &lt;code>true&lt;/code> if and only if this class was declared as an enum in the source code.
     * &lt;/p>
     *
     * @return &lt;code>true&lt;/code> if this object represents an enum, otherwise &lt;code>false&lt;/code>

     */</span>
    <span class="token keyword">boolean</span> <span class="token function">isEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * (API description of {@link java.lang.Class#isAnnotation()})
     * &lt;p>Returns true if this &lt;code>Class&lt;/code> object represents an annotation type.
     *    Note that if this method returns true, {@link #isInterface()} would also return true, as all annotation types are also interfaces.
     * &lt;/p>
     *
     * @return &lt;code>true&lt;/code> if this object represents an annotation, otherwise &lt;code>false&lt;/code>
     * @since 2.0
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">isAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    JavaClass <span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    JavaType <span class="token function">getSuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Shorthand for getSuperClass().getJavaClass() with null checking.
     * @return the super class as {@link JavaClass}
     */</span>
    JavaClass <span class="token function">getSuperJavaClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    List<span class="token operator">&lt;</span>JavaType<span class="token operator">></span> <span class="token function">getImplements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Equivalent of {@link java.lang.Class#getInterfaces()}
     *  Determines the interfaces implemented by the class or interface represented by this object.
     *
     * @return a list of interfaces, never &lt;code>null&lt;/code>
     * @since 2.0
     */</span>
    List<span class="token operator">&lt;</span>JavaClass<span class="token operator">></span> <span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    String <span class="token function">getCodeBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    JavaSource <span class="token function">getParentSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Equivalent of {@link java.lang.Class#getPackage()}
     * @return the package
     */</span>
    JavaPackage <span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * If this class has a package, the packagename will be returned.
     * Otherwise an empty String.
     *
     * @return the name of the package, otherwise an empty String
     */</span>
    String <span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * @since 1.3
     * @return &lt;code>true&lt;/code> if this class is an inner class, otherwise &lt;code>false&lt;/code>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">isInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Equivalent of {@link java.lang.Class#getMethods()}
     *
     * @return the methods declared or overridden in this class
     */</span>
    List<span class="token operator">&lt;</span>JavaMethod<span class="token operator">></span> <span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Equivalent of {@link java.lang.Class#getConstructors()}
     *
     * @return the list of constructors
     * @since 2.0
     */</span>
    List<span class="token operator">&lt;</span>JavaConstructor<span class="token operator">></span> <span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment" spellcheck="true">/**
     *
     * @param parameterTypes the parameter types of the constructor, can be &lt;code>null&lt;/code>
     * @return the matching constructor, otherwise &lt;code>null&lt;/code>
     * @since 2.0
     */</span>
    JavaConstructor <span class="token function">getConstructor</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>JavaType<span class="token operator">></span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     *
     * @param parameterTypes the parameter types of the constructor, can be &lt;code>null&lt;/code>
     * @param varArg define is the constructor has varArgs
     * @return the matching constructor, otherwise &lt;code>null&lt;/code>
     * @since 2.0
     */</span>
    JavaConstructor <span class="token function">getConstructor</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>JavaType<span class="token operator">></span> parameterTypes<span class="token punctuation">,</span> <span class="token keyword">boolean</span> varArg<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment" spellcheck="true">/**
     * Return declared methods and optionally the inherited methods
     *
     * @param superclasses {@code true} if inherited methods should be returned as well
     * @return all methods
     * @since 1.3
     */</span>
    List<span class="token operator">&lt;</span>JavaMethod<span class="token operator">></span> <span class="token function">getMethods</span><span class="token punctuation">(</span> <span class="token keyword">boolean</span> superclasses <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     *
     * @param name the name of the method
     * @param parameterTypes the parameter types of the method, can be &lt;code>null&lt;/code>.
     * @return the matching method, otherwise &lt;code>null&lt;/code>
     */</span>
    JavaMethod <span class="token function">getMethodBySignature</span><span class="token punctuation">(</span> String name<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>JavaType<span class="token operator">></span> parameterTypes <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * This should be the signature for getMethodBySignature.
     *
     * @param name the name of the method
     * @param parameterTypes the parameter types of the method, can be {@code null}
     * @param varArgs define if the method has varArgs
     * @return the matching method, otherwise  {@code null}
     */</span>
    JavaMethod <span class="token function">getMethod</span><span class="token punctuation">(</span> String name<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>JavaType<span class="token operator">></span> parameterTypes<span class="token punctuation">,</span> <span class="token keyword">boolean</span> varArgs <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     *
     * @param name the name of the method
     * @param parameterTypes the parameter types of the method, can be  {@code null}
     * @param superclasses to define if superclasses should be included as well
     * @return the matching method, otherwise  {@code null}
     */</span>
    JavaMethod <span class="token function">getMethodBySignature</span><span class="token punctuation">(</span> String name<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>JavaType<span class="token operator">></span> parameterTypes<span class="token punctuation">,</span> <span class="token keyword">boolean</span> superclasses <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     *
     * @param name the name of the method
     * @param parameterTypes the parameter types of the method, can be  {@code null}
     * @param superclasses {@code true} if inherited methods should be matched as well
     * @param varArg define if the method has varArgs
     * @return the matching method, otherwise  {@code null}
     */</span>
    JavaMethod <span class="token function">getMethodBySignature</span><span class="token punctuation">(</span> String name<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>JavaType<span class="token operator">></span> parameterTypes<span class="token punctuation">,</span> <span class="token keyword">boolean</span> superclasses<span class="token punctuation">,</span> <span class="token keyword">boolean</span> varArg <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     *
     * @param name the name of the method
     * @param parameterTypes the parameter types of the method, can be  {@code null}
     * @param superclasses {@code true} if inherited methods should be matched as well
     * @return the matching methods, otherwise  {@code null}
     */</span>
    List<span class="token operator">&lt;</span>JavaMethod<span class="token operator">></span> <span class="token function">getMethodsBySignature</span><span class="token punctuation">(</span> String name<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>JavaType<span class="token operator">></span> parameterTypes<span class="token punctuation">,</span> <span class="token keyword">boolean</span> superclasses <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     *
     * @param name the name of the method
     * @param parameterTypes the parameter types of the method, can be  {@code null}
     * @param superclasses {@code true} if inherited methods should be matched as well
     * @param varArg define if the method has varArgs
     * @return the matching methods, otherwise  {@code null}
     */</span>
    List<span class="token operator">&lt;</span>JavaMethod<span class="token operator">></span> <span class="token function">getMethodsBySignature</span><span class="token punctuation">(</span> String name<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>JavaType<span class="token operator">></span> parameterTypes<span class="token punctuation">,</span> <span class="token keyword">boolean</span> superclasses<span class="token punctuation">,</span>
                                                   <span class="token keyword">boolean</span> varArg <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Equivalent of {@link java.lang.Class#getFields()}
     *
     * @return a list of fiels, never  {@code null}
     */</span>
    List<span class="token operator">&lt;</span>JavaField<span class="token operator">></span> <span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Equivalent of {@link java.lang.Class#getField(String)}, where this method can resolve every field
     *
     * @param name the name of the field
     * @return the field
     */</span>
    JavaField <span class="token function">getFieldByName</span><span class="token punctuation">(</span> String name <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Based on {@link java.lang.Class#getEnumConstants()}.
     *
     *
     * @return a List of enum constants if this class is an &lt;code>enum&lt;/code>, otherwise  {@code null}
     */</span>
    List<span class="token operator">&lt;</span>JavaField<span class="token operator">></span> <span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     *
     * @param name the name of the enum constant
     * @return the enumConstant matching the {@code name}, otherwise &lt;code>null&lt;/code>
     */</span>
    JavaField <span class="token function">getEnumConstantByName</span><span class="token punctuation">(</span> String name <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Equivalent of {@link Class#getDeclaredClasses()}
     *
     * @return a list of declared classes, never &lt;code>null&lt;/code>
     * @since 1.3
     */</span>
    List<span class="token operator">&lt;</span>JavaClass<span class="token operator">></span> <span class="token function">getNestedClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    JavaClass <span class="token function">getNestedClassByName</span><span class="token punctuation">(</span> String name <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * @param fullyQualifiedName the FQN to match with
     * @return {@code true} if this is of type FQN, otherwise {@code false}
     * @since 1.3
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">isA</span><span class="token punctuation">(</span> String fullyQualifiedName <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * @param javaClass the JavaClass to match with
     * @return {@code true} if this is of type {@literal javaClass}, otherwise {@code false}
     * @since 1.3
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">isA</span><span class="token punctuation">(</span> JavaClass javaClass <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Returns the depth of this array, 0 if it's not an array
     *
     * @return The depth of this array, at least &lt;code>0&lt;/code>
     * @since 2.0
     */</span>
    <span class="token keyword">int</span> <span class="token function">getDimensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     *
     * @return &lt;code>true&lt;/code> if this JavaClass is an array, otherwise &lt;code>false&lt;/code>
     * @since 2.0
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     *
     * @return &lt;code>true&lt;/code> if this JavaClass is a void, otherwise &lt;code>false&lt;/code>
     * @since 2.0 (was part of Type since 1.6)
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">isVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Equivalent of {@link Class#getComponentType()}
     * If this type is an array, return its component type
     *
     * @return the type of array if it's one, otherwise &lt;code>null&lt;/code>
     */</span>
    JavaClass <span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Gets bean properties without looking in superclasses or interfaces.
     *
     * @return the bean properties
     * @since 1.3
     */</span>
    List<span class="token operator">&lt;</span>BeanProperty<span class="token operator">></span> <span class="token function">getBeanProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     *
     * @param superclasses to define if superclasses should be included as well
     * @return the bean properties
     * @since 1.3
     */</span>
    List<span class="token operator">&lt;</span>BeanProperty<span class="token operator">></span> <span class="token function">getBeanProperties</span><span class="token punctuation">(</span> <span class="token keyword">boolean</span> superclasses <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Gets bean property without looking in superclasses or interfaces.
     *
     * @param propertyName the name of the property
     * @return the bean property
     * @since 1.3
     */</span>
    BeanProperty <span class="token function">getBeanProperty</span><span class="token punctuation">(</span> String propertyName <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * @param propertyName the name of the property
     * @param superclasses to define if superclasses should be included as well
     * @return the bean property
     * @since 1.3
     */</span>
    BeanProperty <span class="token function">getBeanProperty</span><span class="token punctuation">(</span> String propertyName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> superclasses <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Equivalent of {@link Class#getClasses()}
     * Gets the known derived classes. That is, subclasses or implementing classes.
     * @return the derived classes
     */</span>
    List<span class="token operator">&lt;</span>JavaClass<span class="token operator">></span> <span class="token function">getDerivedClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    List<span class="token operator">&lt;</span>DocletTag<span class="token operator">></span> <span class="token function">getTagsByName</span><span class="token punctuation">(</span> String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> superclasses <span class="token punctuation">)</span><span class="token punctuation">;</span>

    ClassLibrary <span class="token function">getJavaClassLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * A list if {@link JavaInitializer}, either static or instance initializers.
     *
     * @return a List of initializers
     */</span>
    List<span class="token operator">&lt;</span>JavaInitializer<span class="token operator">></span> <span class="token function">getInitializers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Equivalent of {@link java.lang.Class#getName()}.
     *
     * @return the name of the entity (class, interface, array class, primitive type, or void) represented by this Class object, as a String.
     */</span>
    String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Equivalent of {@link java.lang.Class#getSimpleName()}.
     *
     * @return the simple name of the underlying class as given in the source code.
     * @since 2.0
     */</span>
    String <span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Equivalent of {@link Class#getModifiers()}
     *
     * &lt;strong>This does not follow the java-api&lt;/strong>
     * The Class.getModifiers() returns an &lt;code>int&lt;/code>, which should be decoded with the {@link java.lang.reflect.Modifier}.
     * This method will return a list of strings representing the modifiers.
     * If this member was extracted from a source, it will keep its order.
     * Otherwise if will be in the preferred order of the java-api.
     *
     * @return all modifiers is this member
     */</span>
    List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * (API description of {@link java.lang.reflect.Modifier#isPublic(int)})
     * &lt;p>
     * Return &lt;code>true&lt;/code> if the class includes the public modifier, &lt;code>false&lt;/code> otherwise.
     * &lt;p>
     *
     * @return &lt;code>true&lt;/code> if class has the public modifier, otherwise &lt;code>false&lt;/code>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">isPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * (API description of {@link java.lang.reflect.Modifier#isProtected(int)})
     * &lt;p>
     * Return &lt;code>true&lt;/code> if the class includes the protected modifier, &lt;code>false&lt;/code> otherwise.
     * &lt;/p>
     *
     * @return &lt;code>true&lt;/code> if class has the protected modifier, otherwise &lt;code>false&lt;/code>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">isProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * (API description of {@link java.lang.reflect.Modifier#isPrivate(int)})
     * &lt;p>
     * Return &lt;code>true&lt;/code> if the class includes the private modifier, &lt;code>false&lt;/code> otherwise.
     * &lt;/p>
     *
     * @return &lt;code>true&lt;/code> if class has the private modifier, otherwise &lt;code>false&lt;/code>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">isPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * (API description of {@link java.lang.reflect.Modifier#isFinal(int)})
     * &lt;p>
     * Return &lt;code>true&lt;/code> if the class includes the final modifier, &lt;code>false&lt;/code> otherwise.
     * &lt;/p>
     *
     * @return &lt;code>true&lt;/code> if class has the final modifier, otherwise &lt;code>false&lt;/code>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">isFinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * (API description of {@link java.lang.reflect.Modifier#isStatic(int)})
     * &lt;p>
     * Return &lt;code>true&lt;/code> if the class includes the static modifier, &lt;code>false&lt;/code> otherwise.
     * &lt;/p>
     *
     * @return &lt;code>true&lt;/code> if class the static modifier, otherwise &lt;code>false&lt;/code>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * (API description of {@link java.lang.reflect.Modifier#isAbstract(int)})
     *
     * Return &lt;code>true&lt;/code> if the class includes the abstract modifier, &lt;code>false&lt;/code> otherwise.
     *
     * @return &lt;code>true&lt;/code> if class has the abstract modifier, otherwise &lt;code>false&lt;/code>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     *  Equivalent of  {@link java.lang.Class#isPrimitive()}
     *
     * @return &lt;code>true&lt;/code> if this class represents a primitive, otherwise &lt;code>false&lt;/code>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * (API description of {@link java.lang.Class#toString()})
     *
     * Converts the object to a string.
     * The string representation is the string "class" or "interface", followed by a space, and then by the fully qualified name of the class in the format returned by &lt;code>getName&lt;/code>.
     * If this &lt;code>Class&lt;/code> object represents a primitive type, this method returns the name of the primitive type.
     * If this &lt;code>Class&lt;/code> object represents void this method returns "void".
     *
     * @return a string representation of this class object.
     */</span>
    <span class="token annotation punctuation">@Override</span>
    String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到 JavaClass 提供的方法还是很多的，主要有如下这些，大概可以分成两类:</p>
<p>一类是 getXXX 这个是通过获得类中不同的组成部分的，比较常用有 getFields ，可以获得类所有的 Field 变量的对象，通过 Field 又可以获得 Field 上的注解以及注释，类型。。。所有关于 field 的信息。又比如 getTags、getMethods 顾名思义是获得 javadoc 的注释及方法列表。</p>
<p>另一类是 isXXX ，这个是用来判断类的一定特性的，比如 isEnum 判断类是否是枚举，isInterface 判断是否是接口。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这些方法名，其实也是用 QDox 打印出来的</span>
getBeanProperties
getBeanProperty
getCodeBlock
getComponentType
getConstructor
getConstructors
getDeclaringClass
getDerivedClasses
getDimensions
getEnumConstantByName
getEnumConstants
getFieldByName
getFields
getImplements
getInitializers
getInterfaces
getJavaClassLibrary
getMethod
getMethodBySignature
getMethods
getMethodsBySignature
getModifiers
getName
getNestedClassByName
getNestedClasses
getPackage
getPackageName
getParentSource
getSimpleName
getSource
getSuperClass
getSuperJavaClass
getTagsByName
isA
isAbstract
isAnnotation
isArray
isEnum
isFinal
isInner
isInterface
isPrimitive
isPrivate
isProtected
isPublic
isStatic
isVoid
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="完整-Demo"><a href="#完整-Demo" class="headerlink" title="完整 Demo"></a>完整 Demo</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 *
 *  * *
 *  *  * blog.coder4j.cn
 *  *  * Copyright (C) 2016-2020 All Rights Reserved.
 *  *
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>qdox<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>thoughtworks<span class="token punctuation">.</span>qdox<span class="token punctuation">.</span>JavaProjectBuilder<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>thoughtworks<span class="token punctuation">.</span>qdox<span class="token punctuation">.</span>model<span class="token punctuation">.</span>JavaClass<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>thoughtworks<span class="token punctuation">.</span>qdox<span class="token punctuation">.</span>model<span class="token punctuation">.</span>JavaMethod<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version DemoParser.java, v 0.1 2020-03-22 19:03 buhao
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoParser</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 创建 java 项目 builder 对象</span>
        JavaProjectBuilder javaProjectBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaProjectBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 添加 java 源文件</span>
        javaProjectBuilder<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/kiwi/study/code/study-example/study-qdox-example/src/main/java/cn/coder4j/study/example/qdox/Demo.java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 获得解析后的类</span>
        Collection<span class="token operator">&lt;</span>JavaClass<span class="token operator">></span> classes <span class="token operator">=</span> javaProjectBuilder<span class="token punctuation">.</span><span class="token function">getClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>JavaClass javaClass <span class="token operator">:</span> classes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 打印类相关信息</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"类名:"</span> <span class="token operator">+</span> javaClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实现了哪些类："</span> <span class="token operator">+</span> javaClass<span class="token punctuation">.</span><span class="token function">getImplements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"继承哪个类："</span> <span class="token operator">+</span> javaClass<span class="token punctuation">.</span><span class="token function">getSuperJavaClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"注释："</span> <span class="token operator">+</span> javaClass<span class="token punctuation">.</span><span class="token function">getComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 获得方法列表</span>
            List<span class="token operator">&lt;</span>JavaMethod<span class="token operator">></span> methods <span class="token operator">=</span> javaClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>JavaMethod method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法名是："</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法的 Tags 有哪些："</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>it <span class="token operator">-</span><span class="token operator">></span> it<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->"</span><span class="token operator">+</span> it<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法的参数有哪些："</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法的返回值有哪些："</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getReturns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行结果</p>
<pre class="line-numbers language-java"><code class="language-java">类名<span class="token operator">:</span>Demo
实现了哪些类：<span class="token punctuation">[</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">]</span>
继承哪个类：<span class="token keyword">class</span> <span class="token class-name">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object</span>
注释：这是一个 demo 类
方法名是：hello
方法的 Tags 有哪些：param<span class="token operator">-</span><span class="token operator">></span>name 姓名
<span class="token keyword">return</span><span class="token operator">-</span><span class="token operator">></span>hello <span class="token punctuation">{</span>name<span class="token punctuation">}</span>
方法的参数有哪些：<span class="token punctuation">[</span>String name<span class="token punctuation">]</span>
方法的返回值有哪些：java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h3><p>因为篇幅有限，无法贴完所有代码，如遇到问题可到  <a href="https://github.com/kiwiflydream/study-example/tree/master/study-qdox-example" target="_blank" rel="noopener">github</a> 上查看源码。</p>
<h3 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1584883444778-7ccbdded-8a8a-4281-b645-0ac585337440.png#align=left&amp;display=inline&amp;height=500&amp;name=image.png&amp;originHeight=500&amp;originWidth=900&amp;size=292275&amp;status=done&amp;style=none&amp;width=900" alt="image.png"></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2020/03/22/yuque-【qdox】Java-代码解析利器-QDox/">https://blog.coder4j.cn/2020/03/22/yuque-【qdox】Java-代码解析利器-QDox/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[【并发那些事】线程有序化神器CompletionService]]></title>
      <url>https://blog.coder4j.cn/2020/02/06/yuque-%E3%80%90%E5%B9%B6%E5%8F%91%E9%82%A3%E4%BA%9B%E4%BA%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E6%9C%89%E5%BA%8F%E5%8C%96%E7%A5%9E%E5%99%A8CompletionService/</url>
      <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1582037585459-bd2594d2-21f6-4801-af65-dcf70611bfe0.png#align=left&amp;display=inline&amp;height=383&amp;name=image.png&amp;originHeight=383&amp;originWidth=900&amp;size=662400&amp;status=done&amp;style=none&amp;width=900" alt="image.png"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>话说有一天，产品经理突然找到正在摸鱼的你。</p>
<p>产品：『我们要加一个聚合搜索功能，当用户在我们网站查询一件商品时，我们分别从 A、B、C 三个网站上查询这个信息，然后再把得到的结果返回给用户』</p>
<p>你：『哦，就是写个爬虫，从 3 个网站上抓取数据是吧？』</p>
<p>产品：『呸，爬虫是犯法的，这叫数据分析，怎么样，能实现吧？』</p>
<p>你：『可以』</p>
<p>产品：『好的，明天上线』</p>
<p>你：『。。。』</p>
<h2 id="Code-1-0"><a href="#Code-1-0" class="headerlink" title="Code 1.0"></a>Code 1.0</h2><p>你很快完成了开发，代码如下：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 *
 *  * *
 *  *  * blog.coder4j.cn
 *  *  * Copyright (C) B0A6-B0B0 All Rights Reserved.
 *  *
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>

<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>ThreadUtil<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>collect<span class="token punctuation">.</span>Lists<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version TestCompletionService.java, v 0.A B0B0-0B-A8 A9:0C buhao
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCompletionService</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 查询信息</span>
        String queryName <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 调用查询接口</span>
        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> <span class="token function">queryInfoCode1</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 聚合查询信息 code 1
     *
     * @param queryName
     * @return
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">queryInfoCode1</span><span class="token punctuation">(</span>String queryName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> resultList <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        String webA <span class="token operator">=</span> <span class="token function">searchWebA</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>webA<span class="token punctuation">)</span><span class="token punctuation">;</span>

        String webB <span class="token operator">=</span> <span class="token function">searchWebB</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>webB<span class="token punctuation">)</span><span class="token punctuation">;</span>

        String webC <span class="token operator">=</span> <span class="token function">searchWebC</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>webC<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> resultList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 查询网站 A
     *
     * @param name
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">searchWebA</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ThreadUtil<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"webA"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 查询网站B
     *
     * @param name
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">searchWebB</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ThreadUtil<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"webB"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 查询网站C
     *
     * @param name
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">searchWebC</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ThreadUtil<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"webC"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>你运行了一下代码，结果如下：</p>
<pre class="line-numbers language-java"><code class="language-java">耗时<span class="token operator">:</span> <span class="token number">8512</span>
<span class="token punctuation">[</span>webA<span class="token punctuation">,</span> webB<span class="token punctuation">,</span> webC<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>我去，怎么请求一下要 8 秒多？上线了，产品还不砍死我。</p>
<p>debug 了一下代码，发现问题出在了请求的网站上：</p>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 查询网站 A
     *
     * @param name
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">searchWebA</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ThreadUtil<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"webA"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 查询网站B
     *
     * @param name
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">searchWebB</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ThreadUtil<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"webB"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 查询网站C
     *
     * @param name
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">searchWebC</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ThreadUtil<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"webC"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>网站 A、网站 B 因为年久失修，没人维护，接口响应很慢，平均响应时间一个是 5 秒，一个是 3 秒（这里使用 sleep 模拟）。网站 C 性能还可以，平均响应时间 0.5 秒。 而我们程序的执行时间就是 <strong>网站 A 响应时间 + 网站 B 响应时间 + 网站 C 响应时间。</strong></p>
<h2 id="Code-2-0"><a href="#Code-2-0" class="headerlink" title="Code 2.0"></a>Code 2.0</h2><p>好了，问题知道了，因为请求的网站太慢了，那么如何解决呢？总不能打电话找他们把网站优化一下让我爬吧。书上教导我们要先从自己身上找问题。先看看自己代码哪里可以优化。</p>
<p>一分析代码发现，我们的代码全是串行化， A 网站请求完，再请求 B 网站，B 网站请求完再请求 C 网站。突然想到提高效率的第一要义，提高代码的并行率。为什么要一个一个串行请求，而不是 A、B、C 三个网站一起请求呢，Java 的多线程很轻松就可以实现，代码如下：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 *
 *  * *
 *  *  * blog.coder4j.cn
 *  *  * Copyright (C) B0A6-B0B0 All Rights Reserved.
 *  *
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>

<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>ThreadUtil<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>collect<span class="token punctuation">.</span>Lists<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Future<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version TestCompletionService.java, v 0.A B0B0-0B-A8 A9:0C buhao
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCompletionService</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 查询信息</span>
        String queryName <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 调用查询接口</span>
        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> <span class="token function">queryInfoCode2</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 聚合查询信息 code 1
     *
     * @param queryName
     * @return
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">queryInfoCode1</span><span class="token punctuation">(</span>String queryName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> resultList <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        String webA <span class="token operator">=</span> <span class="token function">searchWebA</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>webA<span class="token punctuation">)</span><span class="token punctuation">;</span>

        String webB <span class="token operator">=</span> <span class="token function">searchWebB</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>webB<span class="token punctuation">)</span><span class="token punctuation">;</span>

        String webC <span class="token operator">=</span> <span class="token function">searchWebC</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>webC<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> resultList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 聚合查询信息 code 2
     *
     * @param queryName
     * @return
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">queryInfoCode2</span><span class="token punctuation">(</span>String queryName<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> resultList <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建3个线程的线程池</span>
        ExecutorService pool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 创建任务的 feature</span>
            Future<span class="token operator">&lt;</span>String<span class="token operator">></span> webAFuture <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">searchWebA</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Future<span class="token operator">&lt;</span>String<span class="token operator">></span> webBFuture <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">searchWebB</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Future<span class="token operator">&lt;</span>String<span class="token operator">></span> webCFuture <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">searchWebC</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 得到任务结果</span>
            resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>webAFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>webBFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>webCFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 关闭线程池</span>
            pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> resultList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 查询网站 A
     *
     * @param name
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">searchWebA</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ThreadUtil<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"webA"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 查询网站B
     *
     * @param name
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">searchWebB</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ThreadUtil<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"webB"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 查询网站C
     *
     * @param name
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">searchWebC</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ThreadUtil<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"webC"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的重点代码如下：</p>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 聚合查询信息 code 2
     *
     * @param queryName
     * @return
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">queryInfoCode2</span><span class="token punctuation">(</span>String queryName<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> resultList <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建3个线程的线程池</span>
        ExecutorService pool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 创建任务的 feature</span>
            Future<span class="token operator">&lt;</span>String<span class="token operator">></span> webAFuture <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">searchWebA</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Future<span class="token operator">&lt;</span>String<span class="token operator">></span> webBFuture <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">searchWebB</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Future<span class="token operator">&lt;</span>String<span class="token operator">></span> webCFuture <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">searchWebC</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 得到任务结果</span>
            resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>webAFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>webBFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>webCFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 关闭线程池</span>
            pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> resultList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>请求网站的代码其实一行没变，变的是我们调用请求方法的地方，把之前串行的代码，变成了多线程的形式，而且还不是普通的多线程的形式，因为我们要在主线程获得线程的结果，所以还要使用 Future 的形式。（这里可以参考之前的文章<a href="https://mp.weixin.qq.com/s?__biz=MzIzODE1NzA1MA==∣=2650157695&amp;idx=1&amp;sn=780603b41fb81746c173c0993b3d25b7&amp;chksm=f13f3feac648b6fc112d222954e63546a0ed48d8ce0daa614768cbe7e126bd056a5c51b9bf0f&amp;scene=0&amp;xtrack=1#rd" target="_blank" rel="noopener">【并发那些事】创建线程的三种方式</a>）。</p>
<p>好的运行一下代码，看看效果，结果如下：</p>
<pre class="line-numbers language-java"><code class="language-java">耗时<span class="token operator">:</span> <span class="token number">5058</span>
<span class="token punctuation">[</span>webA<span class="token punctuation">,</span> webB<span class="token punctuation">,</span> webC<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>嗯，效果明显，从 8 秒多下降到了 5 秒多，但是还是很长，没法接受的长。做为一个有追求的程序员，还要去优化。我们分析一下，刚开始代码是串行的，流程如下，总请求时间是三次请求的总时长。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1582032480701-8034db7e-8864-4610-bd6d-f928495f7d1d.png#align=left&amp;display=inline&amp;height=738&amp;name=image.png&amp;originHeight=738&amp;originWidth=1898&amp;size=53851&amp;status=done&amp;style=none&amp;width=1898" alt="image.png"><br>然后我们优化了一下，把串行请求给并行化，流程如下：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1582032638666-1948978c-9778-4534-a9e0-848a2eafdf70.png#align=left&amp;display=inline&amp;height=1268&amp;name=image.png&amp;originHeight=1268&amp;originWidth=788&amp;size=50053&amp;status=done&amp;style=none&amp;width=788" alt="image.png"><br>因为是并行化，类似木桶效应，决定最长时间的因素，是你请求中最耗时的的那个操作，这里是时间为 5 秒的请求 A 网站操作。</p>
<h2 id="Code-3-0"><a href="#Code-3-0" class="headerlink" title="Code 3.0"></a>Code 3.0</h2><p>其实分析到这里，在不能优化 AB 网站的请求时间的前提下，已经很难优化了。但是方法总比困难多，我们的确没办法再去压缩总请求时间，但是可以让用户体验更好一点，这里需要引入两个技术一个是 Websocket，一个是 <strong>CompletionService。</strong>其中 websocket 可以简单的理解成服务端推送技术，就是不需要客户端主动请求，而是通过服务端主动推送消息（ws 在本文中不是重点，会一笔带过，具体实现可以参考前文<a href="https://mp.weixin.qq.com/s?__biz=MzIzODE1NzA1MA==∣=2650157699&amp;idx=1&amp;sn=879d72a187e65d2ccd297ab44ca50d2c&amp;chksm=f13f3f16c648b6006483c92a5811402726761eb7ea139488623d91029759f7c651f9dd6e3de7&amp;scene=0&amp;xtrack=1#rd" target="_blank" rel="noopener">【websocket】spring boot 集成 websocket 的四种方式</a>），下面我们直接上代码</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 *
 *  * *
 *  *  * blog.coder4j.cn
 *  *  * Copyright (C) B0A6-B0B0 All Rights Reserved.
 *  *
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>

<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>ThreadUtil<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>collect<span class="token punctuation">.</span>Lists<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorCompletionService<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Future<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version TestCompletionService.java, v 0.A B0B0-0B-A8 A9:0C buhao
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCompletionService</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 查询信息</span>
        String queryName <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 调用查询接口</span>
        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">queryInfoCode3</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 聚合查询信息 code 1
     *
     * @param queryName
     * @return
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">queryInfoCode1</span><span class="token punctuation">(</span>String queryName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> resultList <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        String webA <span class="token operator">=</span> <span class="token function">searchWebA</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>webA<span class="token punctuation">)</span><span class="token punctuation">;</span>

        String webB <span class="token operator">=</span> <span class="token function">searchWebB</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>webB<span class="token punctuation">)</span><span class="token punctuation">;</span>

        String webC <span class="token operator">=</span> <span class="token function">searchWebC</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>webC<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> resultList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 聚合查询信息 code 2
     *
     * @param queryName
     * @return
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">queryInfoCode2</span><span class="token punctuation">(</span>String queryName<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> resultList <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建3个线程的线程池</span>
        ExecutorService pool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 创建任务的 feature</span>
            Future<span class="token operator">&lt;</span>String<span class="token operator">></span> webAFuture <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">searchWebA</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Future<span class="token operator">&lt;</span>String<span class="token operator">></span> webBFuture <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">searchWebB</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Future<span class="token operator">&lt;</span>String<span class="token operator">></span> webCFuture <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">searchWebC</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 得到任务结果</span>
            resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>webAFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>webBFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>webCFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 关闭线程池</span>
            pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> resultList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 聚合查询信息 code 3
     *
     * @param queryName
     * @return
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">queryInfoCode3</span><span class="token punctuation">(</span>String queryName<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 开始时间</span>
        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 创建 CompletionService</span>
        ExecutorCompletionService executorCompletionService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorCompletionService</span><span class="token punctuation">(</span>Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建任务的 feature</span>
        executorCompletionService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">searchWebA</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorCompletionService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">searchWebB</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorCompletionService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">searchWebC</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Future take <span class="token operator">=</span> executorCompletionService<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得请求结果 -> "</span> <span class="token operator">+</span> take<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过 ws 推送给客户端,总共耗时"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 查询网站 A
     *
     * @param name
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">searchWebA</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ThreadUtil<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"webA"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 查询网站B
     *
     * @param name
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">searchWebB</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ThreadUtil<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"webB"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 查询网站C
     *
     * @param name
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">searchWebC</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ThreadUtil<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"webC"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>核心代码如下：</p>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 聚合查询信息 code 3
     *
     * @param queryName
     * @return
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">queryInfoCode3</span><span class="token punctuation">(</span>String queryName<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 开始时间</span>
        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 创建 CompletionService</span>
        ExecutorCompletionService executorCompletionService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorCompletionService</span><span class="token punctuation">(</span>Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建任务的 feature</span>
        executorCompletionService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">searchWebA</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorCompletionService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">searchWebB</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorCompletionService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">searchWebC</span><span class="token punctuation">(</span>queryName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Future take <span class="token operator">=</span> executorCompletionService<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得请求结果 -> "</span> <span class="token operator">+</span> take<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过 ws 推送给客户端,总共耗时"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>先看执行结果：</p>
<pre class="line-numbers language-java"><code class="language-java">获得请求结果 <span class="token operator">-</span><span class="token operator">></span> webC
通过 ws 推送给客户端<span class="token punctuation">,</span>总共耗时<span class="token number">561</span>
获得请求结果 <span class="token operator">-</span><span class="token operator">></span> webB
通过 ws 推送给客户端<span class="token punctuation">,</span>总共耗时<span class="token number">3055</span>
获得请求结果 <span class="token operator">-</span><span class="token operator">></span> webA
通过 ws 推送给客户端<span class="token punctuation">,</span>总共耗时<span class="token number">5060</span>
耗时<span class="token operator">:</span> <span class="token number">5060</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们来分析一下执行结果，首先总耗时时间还是 5 秒多没变，但是我们不是等全部执行完再推送给客户端，而是执行完一个就推送一个，并且发现了一个规律，最先推送的是请求最快的，然后是第二快的，最后推最慢的那一个。也就是说推送结果是有序的。给用户的体验就是点击按钮后，1 秒内会展示网站 C 的数据，然后过了 2 秒又在原有基础上又添加导示了网站 B 数据，又过了 2 秒，又增加展示了网站 A 数据。 这种体验要比用户一直白屏 5 秒，然后一下返回所有数据要好的多。</p>
<p>是不是很神奇，这背后的功臣就是 CompletionService，他的源码如下：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * A service that decouples the production of new asynchronous tasks
 * from the consumption of the results of completed tasks.  Producers
 * {@code submit} tasks for execution. Consumers {@code take}
 * completed tasks and process their results in the order they
 * complete.  A {@code CompletionService} can for example be used to
 * manage asynchronous I/O, in which tasks that perform reads are
 * submitted in one part of a program or system, and then acted upon
 * in a different part of the program when the reads complete,
 * possibly in a different order than they were requested.
 *
 * &lt;p>Typically, a {@code CompletionService} relies on a separate
 * {@link Executor} to actually execute the tasks, in which case the
 * {@code CompletionService} only manages an internal completion
 * queue. The {@link ExecutorCompletionService} class provides an
 * implementation of this approach.
 *
 * &lt;p>Memory consistency effects: Actions in a thread prior to
 * submitting a task to a {@code CompletionService}
 * &lt;a href="package-summary.html#MemoryVisibility">&lt;i>happen-before&lt;/i>&lt;/a>
 * actions taken by that task, which in turn &lt;i>happen-before&lt;/i>
 * actions following a successful return from the corresponding {@code take()}.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CompletionService</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * Submits a value-returning task for execution and returns a Future
     * representing the pending results of the task.  Upon completion,
     * this task may be taken or polled.
     *
     * @param task the task to submit
     * @return a Future representing pending completion of the task
     * @throws RejectedExecutionException if the task cannot be
     *         scheduled for execution
     * @throws NullPointerException if the task is null
     */</span>
    Future<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>V<span class="token operator">></span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Submits a Runnable task for execution and returns a Future
     * representing that task.  Upon completion, this task may be
     * taken or polled.
     *
     * @param task the task to submit
     * @param result the result to return upon successful completion
     * @return a Future representing pending completion of the task,
     *         and whose {@code get()} method will return the given
     *         result value upon completion
     * @throws RejectedExecutionException if the task cannot be
     *         scheduled for execution
     * @throws NullPointerException if the task is null
     */</span>
    Future<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">,</span> V result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Retrieves and removes the Future representing the next
     * completed task, waiting if none are yet present.
     *
     * @return the Future representing the next completed task
     * @throws InterruptedException if interrupted while waiting
     */</span>
    Future<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Retrieves and removes the Future representing the next
     * completed task, or {@code null} if none are present.
     *
     * @return the Future representing the next completed task, or
     *         {@code null} if none are present
     */</span>
    Future<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Retrieves and removes the Future representing the next
     * completed task, waiting if necessary up to the specified wait
     * time if none are yet present.
     *
     * @param timeout how long to wait before giving up, in units of
     *        {@code unit}
     * @param unit a {@code TimeUnit} determining how to interpret the
     *        {@code timeout} parameter
     * @return the Future representing the next completed task or
     *         {@code null} if the specified waiting time elapses
     *         before one is present
     * @throws InterruptedException if interrupted while waiting
     */</span>
    Future<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到  CompletionService 方法，分别如下：</p>
<ol>
<li><p>Future<v> submit(Callable<v> task);</v></v></p>
<blockquote>
<p>submit 用于提交一个 Callable 对象，用于提交一个可以获得结果的线程任务</p>
</blockquote>
</li>
<li><p>Future<v> submit(Runnable task, V result);</v></p>
<blockquote>
<p>submit 用于提交一个 Runnable 对象及 result 对象，类似于上面的 submit，但是 runnable 的返回值 void 无法获得线程的结果，所以添加了 result 用于做为参数的桥梁</p>
</blockquote>
</li>
<li><p>Future<v> take() throws InterruptedException;</v></p>
<blockquote>
<p>take 用于取出最新的线程执行结果，注意这里是阻塞的</p>
</blockquote>
</li>
<li><p>Future<v> poll();</v></p>
<blockquote>
<p>take 用于取出最新的线程执行结果，是非阻塞的，如果没有结果就返回 null</p>
</blockquote>
</li>
<li><p>Future<v> poll(long timeout, TimeUnit unit) throws InterruptedException;</v></p>
<blockquote>
<p>同上，只是加了一个超时时间</p>
</blockquote>
</li>
</ol>
<p>另外，CompletionService 是接口，无法直接使用，通常使用他的实现类  ExecutorCompletionService，具体使用方法如上面的 demo。</p>
<p>可能看到这里会很好奇  ExecutorCompletionService 实现原理，其实原理很简单，他在内部维护了一个阻塞队列，提交的任务，先执行完的先进入队列，所以你通过 poll 或 take 获得的肯定是最先执行完的任务结果。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="1-项目代码"><a href="#1-项目代码" class="headerlink" title="1. 项目代码"></a>1. 项目代码</h3><p>因为篇幅有限，无法贴完所有代码，如遇到问题可到<a href="https://github.com/kiwiflydream/study-example/tree/master/study-thread-example" target="_blank" rel="noopener">github</a>上查看源码。</p>
<h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>欢迎关注我的个人公众号 <strong>KIWI 的碎碎念</strong> ，关注后回复 <strong>福利</strong>，海量学习内容免费分享！</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1578492545265-0511dd63-d473-4260-acd9-2e9bad7dec18.png#align=left&amp;display=inline&amp;height=137&amp;name=image.png&amp;originHeight=130&amp;originWidth=453&amp;size=34316&amp;status=done&amp;style=none&amp;width=476#align=left&amp;display=inline&amp;height=130&amp;originHeight=130&amp;originWidth=453&amp;status=done&amp;style=none&amp;width=453" alt="image.png"></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2020/02/06/yuque-【并发那些事】线程有序化神器CompletionService/">https://blog.coder4j.cn/2020/02/06/yuque-【并发那些事】线程有序化神器CompletionService/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[【Jasypt】给你的配置加把锁]]></title>
      <url>https://blog.coder4j.cn/2020/01/02/yuque-%E3%80%90Jasypt%E3%80%91%E7%BB%99%E4%BD%A0%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8A%A0%E6%8A%8A%E9%94%81/</url>
      <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1577972231962-a66da8bd-c22b-4924-bee6-ae77fd583bf9.png#align=left&amp;display=inline&amp;height=1584&amp;name=image.png&amp;originHeight=3168&amp;originWidth=4752&amp;size=2493712&amp;status=done&amp;style=none&amp;width=2376" alt="image.png"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天，有个前同事向我吐槽，他们公司有个大神把公司的项目代码全部上传到了 github，并且是公开项目，所有人都可以浏览。更加恐怖的是项目里面包含配置文件，数据库信息、redis 配置、各种公钥私钥密码全在项目里面，也一同上传了。</p>
<p>如果只是单纯的业务代码泄露，情况倒还好，因为别人知道你代码，要想搞你，他必须要把源码看一遍，分析漏洞。 又因为代码上线，经过了层层测试，漏洞也不好找，至少短时间内不好找。但是别人拿到你的数据库信息，那就开启了上帝模式，想怎么玩就怎么玩，删库都不用跑路的。</p>
<p>不过，还好他们发现的及时，第一时间删除了 github 上的项目，但是不能保证当时的项目没有人拉到本地，所以第二就是把配置文件内的各项配置都更改一遍，改配置听起来简单，但是要知道有些配置是不能热更新的。很多配置要把前一个配置修改后才能使用，新老配置不能共存，你改的瞬间运行的项目就崩了，必须要停机维护才可以。为了变更配置他们花了大量的人力物力与精力。</p>
<p>其实这种惨痛的教训本可以避免的，防止配置泄露，通用的有两种形式。一种是使用配置中心，本地不保存配置，启动的时候从配置中心获取，这应该是最优解了。但是很多时候你所做的项目并没有使用配置中心，配置就在项目里面裸奔。这个时候就需要本地加密的形式防止配置泄露了，常用框架是  jasypt。同时它也是本文的主题，话不多说，直接开始，看看如果使用  jasypt 进行配置加密。</p>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.ulisesbocchio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jasypt-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.ulisesbocchio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jasypt-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>如果你使用了 spring boot 那么使用  jasypt 很简单，只要依赖一个  jasypt-spring-boot-starter 包就可以了。</p>
<p>至于  jasypt-maven-plugin 是方便我们加密解密配置的 maven 插件，后面会说用法。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><pre class="line-numbers language-bash"><code class="language-bash">my.conf.test1<span class="token operator">=</span>123
my.conf.test2<span class="token operator">=</span>DEC<span class="token punctuation">(</span>123<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 记得看最佳实践</span>
jasypt.encryptor.password<span class="token operator">=</span>lE1rl5K$
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>总共有三个配置，第一个配置  <strong>my.conf.test1</strong> 是不需要加密的配置，第二个配置 <strong>my.conf.test2</strong> 是需要加密的配置，要加密的内容是 <strong>123</strong>。注意他的格式的是 <strong>DEC(待加密内容)</strong>。第三个 <strong>jasypt.encryptor.password</strong>  配置是我们的加密私钥，默认使用的加密算法是  <strong>PBEWITHHMACSHA512ANDAES_256</strong> ，这个密钥可以是任意字符串，而    <strong>lE1rl5K\$</strong> 只是我随机生成的，你可以自由发挥。</p>
<h2 id="生成加密内容"><a href="#生成加密内容" class="headerlink" title="生成加密内容"></a>生成加密内容</h2><p>好了，到目前为止，我们的配置还是明文的。<strong>my.conf.test2</strong> 是我们想加密的配置，他与  <strong>my.conf.test1</strong> 唯一的区别就是多了一个 <strong>DEC()</strong> 包裹，这算哪门子加密，其实我们还差一步。还记得我们上面加依赖的时候，配置了一个 Maven 插件吗？现在就是用到他的时候，在我们的项目目录路径下执行如下命令：</p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><pre class="line-numbers language-bash"><code class="language-bash"> mvn jasypt:encrypt -Djasypt.encryptor.password<span class="token operator">=</span><span class="token string">"lE1rl5K$"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>注意在执行的时候，password 要换成你自己在上文配置的密钥。执行完后，看到终端输出了一大堆日志，然后就没有然后了。但是真的是这样吗？</p>
<p>你再打开  <strong>application.properties</strong> 看一下，有什么不一样的地方。</p>
<pre class="line-numbers language-bash"><code class="language-bash">my.conf.test1<span class="token operator">=</span>123
my.conf.test2<span class="token operator">=</span>ENC<span class="token punctuation">(</span>0ZWzuD2DH0BZ8ANGMZxQyC6wv84sQLJtE6u7bcRjU+DntbMgkBvE2Z4fSzKKhYN8<span class="token punctuation">)</span>
jasypt.encryptor.password<span class="token operator">=</span>lE1rl5K$
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>我们发现，三个配置中其它两个是原来的样子，但是  <strong>my.conf.test2</strong> 变了，首先格式从之前 <strong>DEC(xxx)</strong> 变成了 <strong>ENC(xxx)</strong> 。另外括号的 <strong>123</strong> 变成了  <strong>0ZWzuD2DH0BZ8ANGMZxQyC6wv84sQLJtE6u7bcRjU+DntbMgkBvE2Z4fSzKKhYN8</strong> 。</p>
<p>这其实就是配置加密后的样子。这条命令的功能其实很简单:</p>
<ol>
<li>从配置文件中加载配置</li>
<li>从配置中找到有 <strong>DEC(xxx)</strong> 格式并且不是 <strong>jasypt</strong> 开头的配置</li>
<li>使用配置的密钥加密并覆盖配置为 <strong>ENC(加密后的值)</strong></li>
</ol>
<p>另外通过插件也可以解密，使用</p>
<pre class="line-numbers language-bash"><code class="language-bash">mvn jasypt:decrypt -Djasypt.encryptor.password<span class="token operator">=</span><span class="token string">"lE1rl5K$"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>执行这条命令会反过来，把 <strong>ENC(xxx)</strong> 内容的配置解密成 <strong>DEC(明文)</strong> 打印在控制台，注意是控制台，而不是把配置文件变回去，作者说这样是为了安全。</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="TestController-java"><a href="#TestController-java" class="headerlink" title="TestController.java"></a>TestController.java</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 *
 *  * *
 *  *  * blog.coder4j.cn
 *  *  * Copyright (C) 2016-2019 All Rights Reserved.
 *  *
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jasypt<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version TestController.java, v 0.1 2019-12-26 10:55 buhao
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${my.conf.test1}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String confTest1<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${my.conf.test2}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String confTest2<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getConf/{type}"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> Object <span class="token function">getConfTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> confTest1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> confTest2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><p>代码其实很简单，首先通过  <a href="#">@Value</a>  的方式读取配置，同时把没有加密的配置与加密的配置都读出来，然后通过接口，当路径参数为 1 的时候返回没有经过加密的参数，当路径参数为 2 的时候返回加密过的参数。要是都返回 123 说明我们成功了。</p>
<p>为了方便验证，直接用 IDEA 的内置工具，下面是验证结果：</p>
<h4 id="未加密的参数"><a href="#未加密的参数" class="headerlink" title="未加密的参数"></a>未加密的参数</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1578230853814-3c4fa873-3041-4c12-8548-83e7ab0780e3.png#align=left&amp;display=inline&amp;height=143&amp;name=image.png&amp;originHeight=286&amp;originWidth=2082&amp;size=51195&amp;status=done&amp;style=none&amp;width=1041" alt="image.png"></p>
<h4 id="经过加密的参数"><a href="#经过加密的参数" class="headerlink" title="经过加密的参数"></a>经过加密的参数</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1578230873283-6946fb5e-49bb-4059-ba48-84842ab57f18.png#align=left&amp;display=inline&amp;height=123&amp;name=image.png&amp;originHeight=246&amp;originWidth=1616&amp;size=37724&amp;status=done&amp;style=none&amp;width=808" alt="image.png"></p>
<p>结果如我们所料，加密成功。</p>
<p>获取配置的大致流程其中跟上面加密配置的流程大致反过来：</p>
<ol>
<li>拦截获取配置的操作</li>
<li>如果拦截到的配置是 <strong>ENC(xxx)</strong> 格式</li>
<li>读取  <strong>jasypt.encryptor.password</strong> 密钥</li>
<li>通过密钥解密配置</li>
</ol>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="密钥与配置分开保存"><a href="#密钥与配置分开保存" class="headerlink" title="密钥与配置分开保存"></a>密钥与配置分开保存</h3><p>可以看到，通过  jasypt 十分的方便，第一依赖，第二配置，其中配置除加密内容外还有一个  <strong>jasypt.encryptor.password</strong> 。这个前文也说了是用于加密与解密的密码，通过它可以加解密配置。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/119443/1578231764351-ed960bdc-af01-4417-85e1-d0d130d69e34.png#align=left&amp;display=inline&amp;height=191&amp;name=image.png&amp;originHeight=381&amp;originWidth=300&amp;size=71153&amp;status=done&amp;style=none&amp;width=150" alt="image.png"></p>
<p>回到开头，我们加密的目的是为了防止代码泄露的时候把配置一起给泄露出去了。配置是没有问题了，我们加密了，但是我们同时把密钥也放在配置文件中了。这相当于什么呢？<strong>就像你把门给锁了，但是钥匙还插在锁上。</strong></p>
<p>所以密钥一定要跟配置分开保存，通常是通过启动命令传给应用，比如下面这种：</p>
<pre class="line-numbers language-bash"><code class="language-bash">java -Djasypt.encryptor.password<span class="token operator">=</span><span class="token string">"password"</span> -jar my-application.jar
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果再保险一点，可以把密钥放在环境变量中，再通过命令传给应用。</p>
<h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>默认使用的加密算法为对称加密  HHMAC ，既然有对称那肯定也有非对称。</p>
<p>这里的对称与非对称指的是密钥的保存方式，对称加密是指的是加密与解密共用一个密钥，也就是说我用这个密钥即可以用来加密也可以用来解密。上一条说为了安全我们要把配置跟密钥分开保存，一般保存在两个地方，一个是线上服务器，一个是项目负责人的电脑上了，因为他要把配置从明文变成密文。为什么是项目负责人的电脑上，因为密钥不可能人手一份，那样又会增大泄露风险。</p>
<p>但是这样的话又会出来一种问题，一个项目涉及了太多配置，我加一个配置找下项目负责人帮我生成个密文，加一个生成一个，项目负责人变成工具人了。</p>
<p>这个时候我们可以通过非对称加密的方式来解决，这种方式的好处就是有一对密码，分别称为公钥与私钥，公钥用来生成加密数据，可以放心大胆人手一份，而私钥放在服务器上进行运行时候的解密工作，因篇幅有限，具体使用方式可以通过文末的链接查看官方文档。</p>
<h3 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h3><p>配置肯定是区分环境的，有些环境安全等级没有那么高，比如开发与测试环境，没有必要加密。而预发及生产环境就需要加密，并且推荐使用不同的密钥，这样最大程度的避免安全问题。</p>
<h2 id="其实相关"><a href="#其实相关" class="headerlink" title="其实相关"></a>其实相关</h2><ol>
<li><a href="https://github.com/ulisesbocchio/jasypt-spring-boot" target="_blank" rel="noopener">jasypt-spring-boot</a> (jasypt 的 github 地址，有着详尽的文档)</li>
<li><a href="https://github.com/kiwiflydream/study-example/tree/master/study-jasypt-example" target="_blank" rel="noopener">本文 DEMO</a> （因为文章篇幅有限，只展示部分代码，具体代码已上传 github）</li>
</ol>
<p>本文地址 <a href="https://blog.coder4j.cn/2020/01/02/yuque-【Jasypt】给你的配置加把锁/">https://blog.coder4j.cn/2020/01/02/yuque-【Jasypt】给你的配置加把锁/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[【xmind】 使用 Java 生成思维导图]]></title>
      <url>https://blog.coder4j.cn/2019/12/01/yuque-%E3%80%90xmind%E3%80%91-%E4%BD%BF%E7%94%A8-Java-%E7%94%9F%E6%88%90%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1575186922937-956f55b0-1608-49c9-8ea9-0b09666ce294.png#align=left&amp;display=inline&amp;height=397&amp;name=image.png&amp;originHeight=793&amp;originWidth=1280&amp;size=285620&amp;status=done&amp;style=none&amp;width=640" alt="image.png"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在日常的工作与学习中，我们经常会使用思维导图这个工具，来把抽象而又无形的思考转换成有形并且具体的图像，是理清思路，梳理逻辑的一大神器。</p>
<p>准确的说，思维导图并不是一个具体的工具，而是一种方法。是道而不是术。实际落地时，我们通常还需要借助外部的工具。从最原始的纸和笔，到各种软件，可以说是应用尽有。目前我在使用的是 xmind 这款软件，下面就会以 xmind 为媒介间接的通过 Java 代码画思维导图。</p>
<h2 id="放码过来"><a href="#放码过来" class="headerlink" title="放码过来"></a>放码过来</h2><h3 id="通过目录生成思维导图"><a href="#通过目录生成思维导图" class="headerlink" title="通过目录生成思维导图"></a>通过目录生成思维导图</h3><p>我在看书的时候有一个习惯，先通过思维导图画出一本书的大纲，然后通过这个大纲来分主次的去阅读。可能有些同学感到疑惑，还没读过书，如何了解大纲呢？其实一本书的目录就是这本书最好的大纲。</p>
<p>本文通过把一个目录生成思维导图的例子来学习 xmind 基本的 api 使用。当然如果想系统学习的同学，可以参考文末给出的官方 api 链接。下图就是我们最终要生成的结果。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1575300845565-aeda8243-cba9-4f3e-b218-d526af74c949.png#align=left&amp;display=inline&amp;height=817&amp;name=image.png&amp;originHeight=1633&amp;originWidth=2776&amp;size=765424&amp;status=done&amp;style=none&amp;width=1388" alt="image.png"></p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>xmind 最开始是在 eclipse 上进行定制开发而来（对，这个 eclipse 就是你在遇到 idea 后，喜新厌旧抛弃的那个编程软件），所以天生就对 Java 有良好的支持。这个<a href="https://github.com/xmindltd/xmind" target="_blank" rel="noopener">地址</a>就是 xmind 在 github 上的仓库。对 xmind 的操作的 api 全在  org.xmind.core 包下，按官方提示把代码拉下来在本地打个包，再引入就 ok 了。但是呢？偷懒是第一生产力。立马跑到 maven 仓库搜索了一下，发现果然有人把官方的打包上传了，直接拿来使用。（时间有点老，但是基本操作已经够了，如果想用新功能，可以拉代码自行打包）</p>
<ul>
<li>pom.xml</li>
</ul>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.eljah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>xmindjbehaveplugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><p>我们要生成思维导图，首先得有数据。这里的数据就是一本书的目录。</p>
<p>首先，书籍我选的是《<a href="https://book.douban.com/subject/26437061/" target="_blank" rel="noopener">一本书读懂 24 种互联网思维</a>》，选这本书，并不是因为这本书有多好，而是因为他比较典型，典型就典型在，看过这本书的目录后就没有必要再读这本书了，因为目录已经把要说的内容说的很清楚了。</p>
<p>那知道书名，怎么获取书的目录呢？很简单，打开豆瓣，找到这本书的详情，里面就有书籍的目录，直接把它 copy 下来就可以了，目录如下图。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1575302109090-065fc60c-8041-4a80-acc9-e41eb42482d2.png#align=left&amp;display=inline&amp;height=363&amp;name=image.png&amp;originHeight=726&amp;originWidth=1170&amp;size=132601&amp;status=done&amp;style=none&amp;width=585" alt="image.png"></p>
<h3 id="开始编码"><a href="#开始编码" class="headerlink" title="开始编码"></a>开始编码</h3><ul>
<li>GeneratorDoubanXmind</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 *
 *  * *
 *  *  * blog.coder4j.cn
 *  *  * Copyright (C) 2016-2019 All Rights Reserved.
 *  *
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">;</span>

<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileUtil<span class="token punctuation">;</span>
<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ReUtil<span class="token punctuation">;</span>
<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>system<span class="token punctuation">.</span>SystemUtil<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>collect<span class="token punctuation">.</span>Lists<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>xmind<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Core<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>xmind<span class="token punctuation">.</span>core<span class="token punctuation">.</span>CoreException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>xmind<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ISheet<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>xmind<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ITopic<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>xmind<span class="token punctuation">.</span>core<span class="token punctuation">.</span>IWorkbook<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>xmind<span class="token punctuation">.</span>core<span class="token punctuation">.</span>IWorkbookBuilder<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version GeneratorDoubanXmind.java, v 0.1 2019-12-02 22:54 buhao
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneratorDoubanXmind</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 当前类路径
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CLASS_PATH <span class="token operator">=</span> GeneratorDoubanXmind<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 文件分隔符
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FILE_SEPARATOR <span class="token operator">=</span> SystemUtil<span class="token punctuation">.</span><span class="token function">getOsInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFileSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> CoreException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 读取目录</span>
        String bookName <span class="token operator">=</span> <span class="token string">"一本书读懂24种互联网思维"</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> contents <span class="token operator">=</span> FileUtil<span class="token punctuation">.</span><span class="token function">readLines</span><span class="token punctuation">(</span>CLASS_PATH <span class="token operator">+</span> bookName <span class="token operator">+</span> <span class="token string">".txt"</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建思维导图的工作空间</span>
        IWorkbookBuilder workbookBuilder <span class="token operator">=</span> Core<span class="token punctuation">.</span><span class="token function">getWorkbookBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        IWorkbook workbook <span class="token operator">=</span> workbookBuilder<span class="token punctuation">.</span><span class="token function">createWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 获得默认sheet</span>
        ISheet primarySheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">getPrimarySheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 获得根主题</span>
        ITopic rootTopic <span class="token operator">=</span> primarySheet<span class="token punctuation">.</span><span class="token function">getRootTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 设置根主题的标题</span>
        rootTopic<span class="token punctuation">.</span><span class="token function">setTitleText</span><span class="token punctuation">(</span>bookName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 章节 topic 的列表</span>
        ArrayList<span class="token operator">&lt;</span>ITopic<span class="token operator">></span> chapterTopics <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>String content <span class="token operator">:</span> contents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 如果是数字开头为章节名称</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ReUtil<span class="token punctuation">.</span><span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token string">"^[1-24].*?"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 创建章节节点</span>
                ITopic topic <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                topic<span class="token punctuation">.</span><span class="token function">setTitleText</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
                chapterTopics<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 创建小节节点</span>
                ITopic topic <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                topic<span class="token punctuation">.</span><span class="token function">setTitleText</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
                chapterTopics<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>chapterTopics<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> ITopic<span class="token punctuation">.</span>ATTACHED<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 把章节节点添加到要节点上</span>
        chapterTopics<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>it <span class="token operator">-</span><span class="token operator">></span> rootTopic<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> ITopic<span class="token punctuation">.</span>ATTACHED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 保存</span>
        workbook<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>CLASS_PATH <span class="token operator">+</span> FILE_SEPARATOR <span class="token operator">+</span> bookName <span class="token operator">+</span> <span class="token string">".xmind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>基本上代码都做了注释，对于核心代码再简单分析一下。</p>
<pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 读取目录</span>
        String bookName <span class="token operator">=</span> <span class="token string">"一本书读懂24种互联网思维"</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> contents <span class="token operator">=</span> FileUtil<span class="token punctuation">.</span><span class="token function">readLines</span><span class="token punctuation">(</span>CLASS_PATH <span class="token operator">+</span> bookName <span class="token operator">+</span> <span class="token string">".txt"</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>首先前两行不必说，我把目录数据保存到了 resources 目录下的 一本书读懂 24 种互联网思维.txt，这两行代码就是简单读取数据。</p>
<pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 创建思维导图的工作空间</span>
        IWorkbookBuilder workbookBuilder <span class="token operator">=</span> Core<span class="token punctuation">.</span><span class="token function">getWorkbookBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        IWorkbook workbook <span class="token operator">=</span> workbookBuilder<span class="token punctuation">.</span><span class="token function">createWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后的两行代码，通过 Core 类创建工作空间构建者类，再通过它的  createWorkbook 方法创建出一个空白的工作空间，这个创建完就会得到一个没有任何节点的空白导图。</p>
<pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 获得默认sheet</span>
        ISheet primarySheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">getPrimarySheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 获得根主题</span>
        ITopic rootTopic <span class="token operator">=</span> primarySheet<span class="token punctuation">.</span><span class="token function">getRootTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 设置根主题的标题</span>
        rootTopic<span class="token punctuation">.</span><span class="token function">setTitleText</span><span class="token punctuation">(</span>bookName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再接着，通过刚刚创建 工作空间 得到主 sheet，这个 sheet 跟 excel 的概念差不多，就像浏览器的一个 tab 一样。效果如下图</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1575302706137-d42e7fb0-fcd1-4566-b88b-a9d788e9b67d.png#align=left&amp;display=inline&amp;height=30&amp;name=image.png&amp;originHeight=60&amp;originWidth=816&amp;size=10859&amp;status=done&amp;style=none&amp;width=408" alt="image.png"></p>
<p>另外还通过主 sheet 获得了根 topic，并设置他的标题为书名，它对应下图</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1575377884589-67911a43-9e0b-4465-bf73-708155fe00f3.png#align=left&amp;display=inline&amp;height=122&amp;name=image.png&amp;originHeight=244&amp;originWidth=720&amp;size=35758&amp;status=done&amp;style=none&amp;width=360" alt="image.png"></p>
<pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 章节 topic 的列表</span>
        ArrayList<span class="token operator">&lt;</span>ITopic<span class="token operator">></span> chapterTopics <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>String content <span class="token operator">:</span> contents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 如果是数字开头为章节名称</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ReUtil<span class="token punctuation">.</span><span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token string">"^[1-24].*?"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 创建章节节点</span>
                ITopic topic <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                topic<span class="token punctuation">.</span><span class="token function">setTitleText</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
                chapterTopics<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 创建小节节点</span>
                ITopic topic <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                topic<span class="token punctuation">.</span><span class="token function">setTitleText</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
                chapterTopics<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>chapterTopics<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> ITopic<span class="token punctuation">.</span>ATTACHED<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这段代码比较多，但是重点是创建 topic 的操作，每个 topic 就是思维导图的一个节点，可以通过  workbook.createTopic() 来创建，同样的通过  setTitleText 设置标题。这段代码其实是分析了目录的规律，有 1-24 开头的是大章节，而后面紧跟的是小章节，一个大章节下是多个小章节（可以看上面的目录截图）。所以判断是大章节就创建一个新的节点，判断是小章节就往最后一个大章节上添加（通过 add 方法）。</p>
<pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 把章节节点添加到要节点上</span>
        chapterTopics<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>it <span class="token operator">-</span><span class="token operator">></span> rootTopic<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> ITopic<span class="token punctuation">.</span>ATTACHED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>刚才说了把小章节都添加到了大章节上了，但是大章节现在还是无依无靠的，所以通过一个循环全部添加到了根 Topic 上。</p>
<pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 保存</span>
        workbook<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>CLASS_PATH <span class="token operator">+</span> FILE_SEPARATOR <span class="token operator">+</span> bookName <span class="token operator">+</span> <span class="token string">".xmind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>到此我们编码结束了，但是这些操作还在内存中，我们需要通过 workbook 的 save 方法把文件保存到硬盘上，另外文件后缀记得改成 xmind，否则软件无法识别。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>因为篇幅有限，无法贴完所有代码，如遇到问题可到相关链接里面的 example 上，查看源码。</p>
<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ol>
<li><a href="https://github.com/xmindltd/xmind/wiki/UsingXmindAPI" target="_blank" rel="noopener">xmind api 地址</a></li>
<li><a href="https://github.com/kiwiflydream/study-example/tree/master/study-xmind-example" target="_blank" rel="noopener">study-xmind-example</a></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1575379205600-702b996e-3229-40f4-a982-199adfccdf60.png#align=left&amp;display=inline&amp;height=178&amp;name=image.png&amp;originHeight=178&amp;originWidth=621&amp;size=39510&amp;status=done&amp;style=none&amp;width=621" alt="image.png"></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2019/12/01/yuque-【xmind】-使用-Java-生成思维导图/">https://blog.coder4j.cn/2019/12/01/yuque-【xmind】-使用-Java-生成思维导图/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[【并发那些事】可见性问题的万恶之源]]></title>
      <url>https://blog.coder4j.cn/2019/11/24/yuque-%E3%80%90%E5%B9%B6%E5%8F%91%E9%82%A3%E4%BA%9B%E4%BA%8B%E3%80%91%E5%8F%AF%E8%A7%81%E6%80%A7%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%87%E6%81%B6%E4%B9%8B%E6%BA%90/</url>
      <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1574562962418-a57cff00-17f5-4cf6-b3e4-8f9706a83f4e.png#align=left&amp;display=inline&amp;height=540&amp;name=image.png&amp;originHeight=1080&amp;originWidth=1080&amp;size=1776469&amp;status=done&amp;width=540" alt="image.png"></p>
<blockquote>
<p><strong>硬件工程师为均衡 CPU 与 缓存之间的速度差异，特意加的 CPU 缓存，竟然在多核的场景下阴差阳错的成为了并发可见性问题的万恶之源！(**</strong>本文过长，如果不是特别无聊，看到这里就可以了*<strong>*)</strong></p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>还记得那些年，你写的那些多线程 BUG 吗？明明只想得到个 1 + 1 = 2 的预期，结果他有时候得到 1，有时候得到 3，但偏偏有时候他也会返回正确的 2。明明在本地运行的好好的，一上线一堆诡异的 BUG。你一遍一遍的检查代码，一行一行 debug，结果无功而返。</p>
<p>变量为何突然变异？代码为何乱序运行？条件为何形同虚设？欢迎收看今天的《走进科学》之半夜。。。哦，不对，欢迎阅读今天的《并发那些事》之可见性问题的万恶之源。就像上面说的，我们在写并发程序时，经常会出现超出我们认识与直觉的问题，而按我们的以往的经验，很难去察觉到他的问题所在。而又因为我们不了解他发生的诱因，即使我们按照书上的方案解决了，但是下次还是会出现。所以本文的主旨并不是解决问题的术，而是解决问题的道。一起来探究多线程问题的根源。</p>
<p>首先揭开谜底，大多数并发问题的发生都是这三个问题导致的，<strong>可见性问题、原子性问题、有序性问题</strong>。那么又是什么导致这三个问题的出现呢？本文将一步步解析可见性问题出现的原因。</p>
<h3 id="核心矛盾"><a href="#核心矛盾" class="headerlink" title="核心矛盾"></a>核心矛盾</h3><p>众所周知，电脑由很多的部件组成。其中最最最重要的有三个，它们分别是 CPU 、内存、IO（硬盘）。一般来说它们三个的性能高低直接影响到了电脑的整体的性能优劣。</p>
<p>但是从它们诞生之初，就有一个核心矛盾，即使过了几十年后的现在，科技的飞速发展依旧没能解决。那么是什么矛盾呢？</p>
<p>在说矛盾之前，先说我个同事，他是个电竞高手，英雄联盟、王者荣耀什么的意识特别历害。每次看比赛的时候那种指点江山、挥斥方遒的英姿闪闪发光。但是呢，一上手打游戏，一顿操作猛如虎，一看战绩 0 杠 5，刚开始我们以为他是个青铜，但是呢，很多时候游戏的真的就像他说的那样，他的预判，他的操作其实都相当的风骚。一直很疑惑，直到我们得出了一个结论，其实他的确是一个王者，因为他满脑子都是骚操作，但是呢？他的双手跟不上他风骚的大脑。</p>
<p>问题就在这里，<strong>核心矛盾就是速度的差异</strong>。CPU 就像是那位同事的大脑，很强很风骚，但是奈何 IO 就像那双跟不上节奏的手，限制了发挥。而且它们之间的速度差异要远远超出我们的想像，CPU 就好比是火箭，那么内存就是三轮车，IO 可能就是马路旁一只不起眼的小蜗牛。</p>
<h3 id="各方的努力"><a href="#各方的努力" class="headerlink" title="各方的努力"></a>各方的努力</h3><p>既然有了这个问题，那就要想办法解决，首先这个问题出在硬件层，所以首当其冲的硬件工作师想了很多方式试图去解决。经过内存跟 IO 硬件工程师的不懈努力，这两个组件的速度都得到了大幅提升。但是呢？CPU 的工程师也没闲着，甚至英特尔的 CEO–高登·摩尔还宣布了一个以自己姓名定义的<a href="https://zh.wikipedia.org/zh-hans/%E6%91%A9%E5%B0%94%E5%AE%9A%E5%BE%8B" target="_blank" rel="noopener">摩尔定律</a>。其内容大致如下：</p>
<blockquote>
<p>集成电路上可容纳的晶体管数目，约每 18 个月便会增加一倍</p>
</blockquote>
<p>可以简单的理解，CPU 每 18 个月性能就能翻一倍。这就让内存跟 IO 的硬件工程师很绝望了，不怕别人比你聪明，就怕比你聪明的人还比你努力。这还是怎么玩？</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1574585299298-c565ad72-4ea6-49e2-a561-a20e4b44ae39.png#align=left&amp;display=inline&amp;height=140&amp;name=image.png&amp;originHeight=280&amp;originWidth=496&amp;size=191303&amp;status=done&amp;width=248" alt="image.png"></p>
<p>当然，独木不成林，CPU 工程师也意识到了这个问题，我再怎么独领风骚，以 1V5。没有用呀？打的正嗨，一回头，家被推了。我下了一部电影，双击打开，CPU 飞速运行，IO 在缓慢加载。我 CPU 运行到冒烟也没用呀，IO 制约了。结果就是电影变成了 PPT，一秒一停。这样下去大家都没得玩。眼看其它队友带不动，CPU 工程师想出了一个办法，我在 CPU 里面划一块出来做为缓存，这个缓存介于 CPU 与 内存之间，跟我们常用的缓存功能差不多，为了均衡 CPU 与内存之间的速度差，在执行的时候会把数据先从 IO 加载到 内存，再把内存中的数据加载到 CPU 的缓存之中。将常用或者将用的数据缓存在 CPU 中后，CPU 每次处理时就不用老是等内存了，这极大的提高了 CPU 的利用率。</p>
<p>到这里，硬件工程师圆满的完成了任务，下面轮到了我们软件工程师登场了。</p>
<p>虽然说加了缓存之后，CPU 的利用率成倍上升，从当初的运行 5 分钟，加载 2 小时。变成了，运行 2 分钟，加载 1 小时，但是体验还是很差。还拿电影举例，看电影的时候不光有画面，还得有声音呀，你运行是快了，但是先放视频，再放声音。就像是先看一部默片，再听一遍广播，这种音画分离的观感没比 PPT 强多少。</p>
<p>后来在软硬工程师的天才努力后，发明了一种神奇的东西–线程。说线程之前我们先说一下进程，这个东西可是我们能看到的东西，比始你启动的浏览器，比如你正在使用的微信，这些软件启动后，在操作系统中都是一个进程。而线程呢？它可以简单理解成是一个进程的子集，也就是说进程其实是一堆线程组成。而且操作系统通常会把所有硬件资源，包括内存之内的全分配给进程，进程就像一个包工头一样再分配给底下的线程。但是唯独有一样资源，操作系统是直接分配给线程的，那就是 CPU 资源。</p>
<p>这样的设置其实是有深意的。可能有人觉得，分给进程也可以呀，但是进程要比线程重的多，切换的开销过大，得不尝试。就像是你想打开一个新的网页，是打开一个新浏览器快呢？还是打开一个新的 Tab 页快呢？总之有了线程之后，我们就有了一个很酷炫的操作–线程切换。他能带来什么呢？接着说电影的事，我们其实还是先播视频再放声音。但是与上面不同的是，我们是先放一会视频，再放一会声音。只要单次播放的够短，两种操作之间的切换够快，就会让人感觉其实视频与声音是同时播的错觉。而轻量的线程以及提供的切换能力给这种操作提供了可能。</p>
<p>至此，问题在无数硬件与软件工程师的努力下，得到了比较完美的解决。</p>
<h3 id="新的问题"><a href="#新的问题" class="headerlink" title="新的问题"></a>新的问题</h3><p>事情到了这里，本该皆大欢喜、功德圆满。结果英特尔又出来搞事，但其实他这次也是被逼无奈。</p>
<p>还记得我们上面说的以英特尔 CEO–高登·摩尔命名的摩尔定律吗？这个定律其实并不是根据严谨的科学研究得出来的，而是通过英特尔的过往表现推导出的这个结论。按理说这是极不符合科学规律的，就像我遇到的每个程序员都背个电脑包，但是我在大街上不能随便看到一个背着电脑包的人就说他是程序员。但是英特尔就是这么 NB，他在的大街上全是程序员。英特尔就这样维护着这个定律每 18 个月把 CPU 的性能翻一倍，持续了每多年。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1574604678575-fb41c370-e4ce-4fef-82ed-b36a0acfee5d.png#align=left&amp;display=inline&amp;height=150&amp;name=image.png&amp;originHeight=300&amp;originWidth=400&amp;size=250612&amp;status=done&amp;width=200" alt="image.png"></p>
<p>直到第四任 CEO 的时候，摩尔定律突然不灵了，上图就是时任英特尔 CEO–克瑞格·贝瑞特。在一次技术大会上，向与会者下跪。为一再延期直至最终失败放弃的  4GHz 主频奔 4 处理器致歉。</p>
<p>到此，摩尔定律终结，CPU 的发展进入了瓶颈。直到有一天一个脑门闪光的硬件工程师敲响了克瑞格·贝瑞特办公室的大门。”老板你不用跪了，我有个办法可以把 CPU 性能提高一倍”。</p>
<p>一句话让克瑞格老泪纵横，那一天，回想起了，受那些家伙支配的恐怖……被囚禁在鸟笼中的屈辱……</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1574605677580-71cae468-27d2-4acd-af28-e46bf1765dd5.png#align=left&amp;display=inline&amp;height=163&amp;name=image.png&amp;originHeight=326&amp;originWidth=580&amp;size=311704&amp;status=done&amp;width=290" alt="image.png"></p>
<p>克瑞格激动的问道：”什么方案？”</p>
<p>硬件工程师：”很简单呀，我们只要把现在两个的 CPU 装到一个大号的 CPU 里面，那么他的性能就是两个 CPU 的性能呀！我可真是一个小机灵鬼呢”</p>
<p>做了一辈子 CPU 的克瑞格，气的差点进了 ICU。”我老克就算跪一辈子，也不会做这种傻事”。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1574606349112-83cb0491-0d01-4d5b-811e-f4c7bf0bb1f5.png#align=left&amp;display=inline&amp;height=205&amp;name=image.png&amp;originHeight=409&amp;originWidth=700&amp;size=606446&amp;status=done&amp;width=350" alt="image.png"></p>
<p>上图为英特尔发布的 28 核 CPU。嗯？</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1574607088161-ecd5069f-55d9-44a3-815f-f53ab5aa67df.png#align=left&amp;display=inline&amp;height=144&amp;name=image.png&amp;originHeight=288&amp;originWidth=373&amp;size=189407&amp;status=done&amp;width=186.5" alt="image.png"></p>
<p>当然上面其实有些戏谑的成分，但是 CPU 的发展结果也的确是往更多的核心数去发展。从单核到双核再 6 核、8 核不停的增长核心数，CPU 的性能也的确跟着增长。这其实跟我们软件工程师常用的分布式架构一样，当单机的性能达到了瓶颈，不可能再通过纵向的增加服务器的性能提高系统负载，只能通过把单机系统，拆成多个分布式服务来进行横向的扩展。</p>
<p>通过增加 CPU 的核心数，硬件工程师看似圆满的完成时代交给他的任务。结果一口大锅甩在了咱们软件工程师的头上。</p>
<p>来，我们回顾一下，上面我们说 CPU、内存、IO 他们有一个核心矛盾，这个矛盾就是速度的差异。而且这个差异仍然没有解决。但是我们变相的解决了。解决方案是什么？硬件工程师在 CPU 的核心里划了一块地方做为缓存，通过这个缓存均衡他们之间的差异。而软件工程师呢，为了最大的提高 CPU 的利用率，搞了一个叫线程的东西，通过多线程之间的切换圆满解决问题。</p>
<p>嗯，这个方案很完美，没有问题。但是，前提是运行在单核的 CPU 下。</p>
<p>刚才我们说了 CPU 的核心，会有一块地方缓存从内存里加载的数据，这样就不用每次从内存里加载了，提高了效率。但是呢，单核有一个缓存，多核就会出现多个缓存，再加上我们多线程的运行，会出现什么情况呢？下面我们以真实代码为例子：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCount</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
        TestCount testCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Thread threadOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> testCount<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Thread threadTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> testCount<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadOne<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadTwo<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        threadOne<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadTwo<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>testCount<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>代码很简单，两个线程都调用一个 add 方法，而这个 add 方法的操作是循环 10 w 次，每次都把这两个线程共享的 count 变量加 1 。按照我们的直觉来说，count 开始是 0，每个线程加 10 w，总共两个线程，所以 10 w * 2 = 20 w。</p>
<p>可是呢？结果并不是我们想的那样，我运行的结果是：113595。而且每次运行的结果都不一样，你可以试试。结果基本上都在 10w ~ 20w 之间，而且无限趋向于 10w。</p>
<p>这是什么鬼？还记得前面说的 CPU 缓存吗？没错，他就是这只鬼。为了便于说明问题，我画了几张图。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1574609355807-ddc7bcbb-6119-49c1-a6fd-688bdcea9fb3.png#align=left&amp;display=inline&amp;height=536&amp;name=image.png&amp;originHeight=1072&amp;originWidth=948&amp;size=44887&amp;status=done&amp;width=474" alt="image.png"><br>上图是在单核的情况下，首先这个 count 会被加载到内存中。这时他是初始值 0。然后如图所示，第 1 步他被加载到了 CPU 的缓存中，CPU 处理器把他从缓存中取出来，然后进行 add 操作，加完之后再放入缓存中，缓存再把 count 写入内存中，最终我们就得到了结果。可见单核情况下，因为共享缓存与内存，没有任何问题，我们接着看多核的情况下。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1574610745538-8ef09482-0b23-4bf9-8e44-66fcbdd7d968.png#align=left&amp;display=inline&amp;height=531&amp;name=image.png&amp;originHeight=1062&amp;originWidth=1978&amp;size=85959&amp;status=done&amp;width=989" alt="image.png"><br>如上是多核场景下的运算过程，具体步骤如下：</p>
<ol>
<li>首先 count 被加载到内存，紧接着线程 1 被 CPU 1 调用，把内存的 count = 0 加载到了缓存中</li>
<li>然后 CPU 1 把缓存中 count = 0 加载到处理器中，一个时间片处理后  13595</li>
<li>CPU 把 count = 13595 存入到缓存，准备下次接着算</li>
<li>缓存 把 count  = 13595 刷新加内存，等下个时间片再加载</li>
<li>线程 2 得到了 CPU2 时间片，从内存中把刚刚线程 1 算了一半的  count  = 13595 加载到了缓存</li>
<li>CPU 2 把 count  = 13595 加载到了处理器，开始运算。与些同时 CPU 1 把时间片又分配给了线程 1，线程接着刚才的  count = 13595 运算，很快算完得到 10 w ，并把结果最终刷进了内存，现在内存中的数据为 count = 10w。</li>
<li>线程 2 也很快运行完了 10w 次，现在他得到的结果  13595 + 10w = 113595。然后同样把结果最终的刷新进了内存，现在内存中的数据为 count = 113595。</li>
</ol>
<p>看到问题了吗？可以理解缓存中的 count 是内存中的 count 的一份拷贝。在缓存中修改时并不会变更内存中的值，而是过一段时间后刷新回内存，而线程 1 把计算了一半的值，刷新进内存后，线程 2 把这个新值加载到了 CPU2 中，然后计算。与些同时 CPU 1 完成了计算，并把值刷新进了内存，CPU2 仍在计算，因为他不知道 CPU1 把值改变了，计算完了，把自己计算的值也刷新进了内存中，这样就把刚刚 CPU1 忙乎半天的结果覆盖了。</p>
<p>出现这个问题的根本原因就是，CPU 1 与 CPU 2 各自的操作对于双方不可见。在这种情况下，运行期间其实总共有 3 个 count 变量，一个是内存中的 count，一个是 CPU1 中的 count 拷贝，最后一个是 CPU2 中的 count 拷贝。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><strong>硬件工程师为均衡 CPU 与 缓存之间的速度差异，而特意加的 CPU 缓存，竟然在多核的场景下阴差阳错的成为了并发问题中可见性的根源！</strong></p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>本文是《并发那些事》的第三篇，前两篇如下：</p>
<ol>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIzODE1NzA1MA==∣=2650157695&amp;idx=1&amp;sn=780603b41fb81746c173c0993b3d25b7&amp;chksm=f13f3feac648b6fc112d222954e63546a0ed48d8ce0daa614768cbe7e126bd056a5c51b9bf0f&amp;scene=0&amp;xtrack=1#rd" target="_blank" rel="noopener">【并发那些事】创建线程的三种方式</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIzODE1NzA1MA==∣=2650157708&amp;idx=1&amp;sn=30aa27b6a2463ba38c9f61438863329d&amp;chksm=f13f3f19c648b60f5e03a02c733adf138b36447943ae9c624974e1a842dd7d37251bbe7a69b7&amp;scene=0&amp;xtrack=1#rd" target="_blank" rel="noopener">【并发那些事】生产者消费者问题</a></li>
</ol>
<p>本文地址 <a href="https://blog.coder4j.cn/2019/11/24/yuque-【并发那些事】可见性问题的万恶之源/">https://blog.coder4j.cn/2019/11/24/yuque-【并发那些事】可见性问题的万恶之源/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[【并发那些事】生产者消费者问题]]></title>
      <url>https://blog.coder4j.cn/2019/11/07/yuque-%E3%80%90%E5%B9%B6%E5%8F%91%E9%82%A3%E4%BA%9B%E4%BA%8B%E3%80%91%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/119443/1573212056903-3511b031-63e5-4a9b-95f0-f9d05a784f14.jpeg#align=left&amp;display=inline&amp;height=1080&amp;originHeight=1080&amp;originWidth=1920&amp;size=0&amp;status=done&amp;width=1920" alt></p>
<h2 id="Step-1-什么是生产者消费者问题"><a href="#Step-1-什么是生产者消费者问题" class="headerlink" title="Step 1. 什么是生产者消费者问题"></a>Step 1. 什么是生产者消费者问题</h2><p><strong>生产者消费者问题</strong>也叫<strong>有限缓冲问题</strong>，是多线程同步的一个最最最经典的问题。这个问题描述的场景是对于一个有固定大小的缓冲区，同时共享给两个线程去使用。而这两个线程会分为两个角色，一个负责往这个缓冲区里放入一定的数据，我们叫他<strong>生产者</strong>。另一个负责从缓冲区里取数据，我们叫他<strong>消费者</strong>。<br>这里就会有两个问题，第一个问题是生产者不可能无限制的放数据去缓冲区，因为缓冲区是有大小的，当缓冲区满的时候，生产者就必须停止生产。第二个问题亦然，消费者也不可能无限制的从缓冲区去取数据，取数据的前提是缓冲区里有数据，所以当缓冲区空的时候，消费者就必须停止生产。<br>这两个问题看起来简单，但是在实际编码的时候还是会有许多坑，稍不留意就会铸成大错。而且上面只是单个消费者生产者问题，实现应用中，还会遇到多生产多消费等更复杂的场景。这些问题下面会详细叙述。</p>
<h2 id="Step-2-为什么会有这个问题"><a href="#Step-2-为什么会有这个问题" class="headerlink" title="Step 2. 为什么会有这个问题"></a>Step 2. 为什么会有这个问题</h2><p>通过上节的内容，我们知道了什么是生产者消费者问题。但是为什么会出现这种问题呢？<br>其实如果说『生产者消费者问题』，可能因为有了『问题』两个字而显得比较负面。我更喜欢称之为『生产者消费者模式』，就像我们学的那些代码设计模式一样。他其实是多线程情况下的一种设计模式，是某些场景下久经考验的最佳实践。<br>那么这种模式有哪些作用呢？<br><strong>他的第一个好处是解耦。</strong><br>举个外卖的例子。在没有美团、饿了么之前，肯定没有现在这么多满大街跑的外卖小哥。你打电话点了一份外卖，通常都是老板自己做菜自己送。你想像一下，老板洗菜、切菜、做菜，做好之后再打包，然后拎着打包盒，骑个自行车，再满小区找地址，最后送到你的手中。这里就会出现几个问题，第一，老板挺不容易的，要会洗菜、切菜、做菜烹饪一条龙，做好之后，还要会骑车，光会骑车还不行，他还要认路，哪哪小区在哪里，哪哪栋在哪里，从哪走比较近，哪个门口保安不让进。这样就把所有的职能都集中在了老板身上，做饭与送饭，其实是两条事，理论上没有什么联系，但是这里如果老板切菜时，一不小心切到了手，那不光菜做不了，后面也没法送。或者送外卖的路上，为赶时间闯红灯被交警拦了下来，不光饭送不了，还回不来做下一份。这就像我们的代码全都耦合在一起的后果，两个业务相互影响，一个业务出现问题另一个也跟着出现问题，一个业务变更就带着另一个业务变更。<br>我们想想，有了外卖小哥之后呢？老板只要关注于做菜就好了，做好给到外卖小哥。外卖小哥会送到用户手上。老板想的是怎么把菜做的更好吃，外卖小哥想的是怎么最快送达。职能清晰了，效率就更高了。这里可以把老板当成生产者，对应的外卖小哥就是消费者。<br><strong>他的第二个好处就是均衡生产者与消费者的能力。</strong><br>还是举外卖的例子。有些外卖是要实时准备的，比如说做菜就是这样，用户下单后，老板立刻洗菜、切菜、做菜然后打包。对于比较耗时的菜品，比如煲粥、炖汤之类的时间可能很长。而外卖小哥耗费的时间只是接到通知后来到这家店的时间。因为现在的外卖系统比较智能，通知的都是距离商户最近的外卖小哥，所以到店的时间一般比较短。这种场景下瓶颈就是商家的产能，高峰期就可能会造成排队。如下图：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1573281333771-3b680f5c-8cad-4ac9-a32b-c9d1fff75c72.png#align=left&amp;display=inline&amp;height=375&amp;name=image.png&amp;originHeight=750&amp;originWidth=750&amp;size=1061047&amp;status=done&amp;width=375" alt="image.png"><br>再严重一点就会这样<br><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1573281576665-5038306a-87f6-4601-bd2c-93cba5650ea8.png#align=left&amp;display=inline&amp;height=343&amp;name=image.png&amp;originHeight=686&amp;originWidth=980&amp;size=539819&amp;status=done&amp;width=490" alt="image.png"><br>对于这个问题的原因我们很清楚了，是因为生产者（商家）的产能跟不上消费者（外卖小哥）的消费（送餐）速度。因为我们把职能分开了，所以解决问题也很清晰，那就提高生产者的产能，比如说老板可以多雇几个厨师或者再开一家分店。这样就把生产者的产能提高到与消费者的产能平衡的位置。<br>还有另一种生产者比消费者快的情况，比如说一些小超市，他也有外卖服务。因为他的东西都是现成的，用户下完单后，只要按订单装好就可以了。这个时候反而是从外边过来的外卖小哥要慢的多。再或者是商品准备的时间很短，但是送餐的路途遥远，路况复杂。所以瓶颈到外卖小哥身上。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1573282820149-c3875b83-8d5c-4c3d-8e4f-07756e12807b.png#align=left&amp;display=inline&amp;height=676&amp;name=image.png&amp;originHeight=1351&amp;originWidth=640&amp;size=164726&amp;status=done&amp;width=320" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1573282524890-cab7a6e2-724c-490e-acc0-d5ecd776a1e1.png#align=left&amp;display=inline&amp;height=186&amp;name=image.png&amp;originHeight=372&amp;originWidth=833&amp;size=524932&amp;status=done&amp;width=416.5" alt="image.png"><br>这种情况下问题也很清晰了，消费者消耗的速度跟不上生产者的产能，那扩充消费者的数量好了。比如经常遇到的外卖转单，一个外卖小哥来不及了，转给了另一个外卖小哥。同样也能达到生产者与消费者的产能均衡。</p>
<h2 id="Step-3-怎么去实现生产者消费者模式"><a href="#Step-3-怎么去实现生产者消费者模式" class="headerlink" title="Step 3. 怎么去实现生产者消费者模式"></a>Step 3. 怎么去实现生产者消费者模式</h2><p>好了，说完了 what 还有 why，那么我们现在接着说怎么去实现生产者消费者模式，不再废话直接上代码。<br>首先我们写一个老板类：</p>
<h3 id="3-1-Boss-java-（老板）"><a href="#3-1-Boss-java-（老板）" class="headerlink" title="3.1 Boss.java （老板）"></a>3.1 Boss.java （老板）</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * fshows.com
 * Copyright (C) 2013-2019 All Rights Reserved.
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 老板
 * @author buhao
 * @version Boss.java, v 0.1 2019-11-09 15:09 buhao
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boss</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 最大生产数量
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_NUM <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 桌子
     */</span>
    <span class="token keyword">private</span> LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span> tables<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Boss</span><span class="token punctuation">(</span>LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span> tables<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tables <span class="token operator">=</span> tables<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 注意点1</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tables<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 注意点2</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>tables<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> MAX_NUM<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通知外卖小哥取餐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">// 注意点3</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>tables<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老板开始休息了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>tables<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                String goods <span class="token operator">=</span> <span class="token string">"牛肉面"</span> <span class="token operator">+</span> tables<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老板做了一碗"</span> <span class="token operator">+</span> goods<span class="token punctuation">)</span><span class="token punctuation">;</span>
                tables<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后我们再写一个外卖小哥类，但是尴尬的是发现不知道外卖小哥英文怎么写，查了一下结果如下<br><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1573285192485-5e231883-9aca-4558-91d2-e8dd02d2cd8d.png#align=left&amp;display=inline&amp;height=260&amp;name=image.png&amp;originHeight=520&amp;originWidth=1322&amp;size=47352&amp;status=done&amp;width=661" alt="image.png"><br>这个 brother 总感觉怪怪的，但是我读书少，他骗我也不知道，就用这个吧。 要是有英语大神可以留言回复一下正确怎么写。</p>
<h3 id="3-2-TakeawayBrother-java-（外卖小哥）"><a href="#3-2-TakeawayBrother-java-（外卖小哥）" class="headerlink" title="3.2 TakeawayBrother.java （外卖小哥）"></a>3.2 TakeawayBrother.java （外卖小哥）</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * fshows.com
 * Copyright (C) 2013-2019 All Rights Reserved.
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 外卖小哥
 * @author buhao
 * @version TakeawayBrother.java, v 0.1 2019-11-09 15:14 buhao
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TakeawayBrother</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span> tables<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">TakeawayBrother</span><span class="token punctuation">(</span>LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span> tables<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tables <span class="token operator">=</span> tables<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tables<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tables <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tables<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"催老板赶快做外卖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>tables<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一边玩手机一边等外卖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>tables<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                String goods <span class="token operator">=</span> tables<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外卖小哥取餐了"</span> <span class="token operator">+</span> goods<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>事件发生总归有一个地方吧，一般老板把外卖给到外卖小哥都是在店铺里，最后我们再加一个店铺场景类吧</p>
<h3 id="3-3-StoreContext-java-（店铺）"><a href="#3-3-StoreContext-java-（店铺）" class="headerlink" title="3.3 StoreContext.java （店铺）"></a>3.3 StoreContext.java （店铺）</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * fshows.com
 * Copyright (C) 2013-2019 All Rights Reserved.
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 店铺场景
 * @author buhao
 * @version StoreContext.java, v 0.1 2019-11-09 15:28 buhao
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StoreContext</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 先创建一张用于存放外卖的桌子</span>
        LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span> tables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 再创建一个老板</span>
        Boss boss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boss</span><span class="token punctuation">(</span>tables<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 最后创建一个外卖小哥</span>
        TakeawayBrother takeawayBrother <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TakeawayBrother</span><span class="token punctuation">(</span>tables<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 创建线程对象</span>
        Thread bossThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>boss<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Thread takeawayBrotherThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>takeawayBrother<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 运行线程</span>
        bossThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        takeawayBrotherThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3-4-运行结果"><a href="#3-4-运行结果" class="headerlink" title="3.4 运行结果"></a>3.4 运行结果</h3><pre class="line-numbers language-java"><code class="language-java">老板做了一碗牛肉面<span class="token number">0</span>
老板做了一碗牛肉面<span class="token number">1</span>
老板做了一碗牛肉面<span class="token number">2</span>
老板做了一碗牛肉面<span class="token number">3</span>
老板做了一碗牛肉面<span class="token number">4</span>
通知外卖小哥取餐
老板开始休息了
外卖小哥取餐了牛肉面<span class="token number">0</span>
外卖小哥取餐了牛肉面<span class="token number">1</span>
外卖小哥取餐了牛肉面<span class="token number">2</span>
外卖小哥取餐了牛肉面<span class="token number">3</span>
外卖小哥取餐了牛肉面<span class="token number">4</span>
催老板赶快做外卖
一边玩手机一边等外卖
老板做了一碗牛肉面<span class="token number">0</span>
老板做了一碗牛肉面<span class="token number">1</span>
老板做了一碗牛肉面<span class="token number">2</span>
老板做了一碗牛肉面<span class="token number">3</span>
老板做了一碗牛肉面<span class="token number">4</span>
通知外卖小哥取餐
老板开始休息了
外卖小哥取餐了牛肉面<span class="token number">0</span>
外卖小哥取餐了牛肉面<span class="token number">1</span>
外卖小哥取餐了牛肉面<span class="token number">2</span>
外卖小哥取餐了牛肉面<span class="token number">3</span>
外卖小哥取餐了牛肉面<span class="token number">4</span>
催老板赶快做外卖
一边玩手机一边等外卖
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Step-4-代码说明"><a href="#Step-4-代码说明" class="headerlink" title="Step 4. 代码说明"></a>Step 4. 代码说明</h2><p>首先上面的代码是一个最基本的单生产单消费的例子。如果你想要多生产多消费，那多创建几个 boss 或者  takeawayBrother 就可以了。<br>然后店铺场景类没什么可说的，只是基本的创建线程逻辑，如果对于线程创建不了解的，可以参考前文的<a href="https://mp.weixin.qq.com/s?__biz=MzIzODE1NzA1MA==∣=2650157695&amp;idx=1&amp;sn=780603b41fb81746c173c0993b3d25b7&amp;chksm=f13f3feac648b6fc112d222954e63546a0ed48d8ce0daa614768cbe7e126bd056a5c51b9bf0f&amp;scene=0&amp;xtrack=1#rd" target="_blank" rel="noopener">【并发那些事】创建线程的三种方式</a>。此文不再赘述。另外观察代码，可以发现生产者与消费者的代码极为相似，只是一个存一个取。这里我们以生产者为例子说明。<br>首先在 Boss 类中他有两个成员属性，一个是 MAX_NUM 一个是 tables。还记得我们在一开头提到的『固定大小的缓冲区』吗？这里的 MAX_NUM 对应的就是『固定大小』这几个字，这里我们设置的是 5 个。他的现实意义就是老板不可能从早到晚一刻不停的做菜，一般是在点单的时候开始做，也有一些在高峰期的时候提前做一点，但是他放菜的桌子只有那么大，放满了就不能接着做。而 tables 就对应着『缓冲区』这几个字。老板做完菜总要有一个地方先放着等外卖小哥来拿吧，缓冲区就是放菜的桌子。<br>然后我们再接着看代码逻辑，我在代码中标记了几个注意点。<br>第一个注意点是最外面一层的 while。这个是多线程通用写法，因为不写 while 的话，一次任务结束后代码就退出了。现实业务中我们通常想要业务一直持续的运行，所以加个 while 解决。<br>第二个注意点  while (tables.size() == MAX_NUM) 。这个信息量相对多一点，首先 while 的判断条件的意思是判断当前桌子上的外卖是不是已经达到上限，如果是会进入 while 代码块的内容，首先通知(notifyAll)外卖小哥可以拿外卖了，然后自己可以歇着了(wait)，否则接着往下走继续做。初次接触生产消费模型的同学，很容易出错的点就是把这里的 while 写成 if。因为这里本身也只是要判断当前缓冲区是否满足生产的条件。其实在语法与逻辑上没有问题，但是在多线程下就会出现 <strong>虚假唤醒</strong> 的问题。比如现在有两个生产者都处于调用 wait 的地方。突然消费者线程把数据消费完了，并通知了所有生产者去生产，两个生产者都接收到消息，但是只有一个生产者拿到锁，他就去生产了，生产完后，把锁就释放了，刚刚另一个接收到消息的生产者拿到锁就接着往下走，如果这里是 if 的话，因为都已经判断过了，不会再判断，但是明显另一个线程已经完了任务，他现在已经不符合条件。接着往下走就会出现问题。所以当这里换成 while 后，他醒来后还会接着判断一次，不满足就接着等待，这样就避免了虚假唤醒这种问题。<br>第三个注意点  this.tables.notifyAll()。关于第二个问题，大家可能要说了，出现问题是因为我们同时通知了两个生产者造成的，java 自带了一个唤醒单个线程的 notify 方法为什么不用，反而用唤醒所有线程的 notifyAll 方法。这是因为 notify 唤醒线程是 <strong>随机</strong> 的，也就是说你唤醒的可能是生产者也可能是消费者。比如说你是生产者，你生产够了，你想唤醒消费者，但是不幸的是你唤醒了另一个生产者，另一个生产者一觉醒来，发现菜都做完了，就接着睡，如果生产者一直唤醒的都是生产者，那么程序就会进入 <strong>假死</strong> 状态，消费者永远都处于等待状态。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="1-项目代码"><a href="#1-项目代码" class="headerlink" title="1. 项目代码"></a>1. 项目代码</h3><p>因为篇幅有限，无法贴完所有代码，如遇到问题可到<a href="https://github.com/kiwiflydream/study-example/tree/master/study-thread-example" target="_blank" rel="noopener">github</a>上查看源码。</p>
<h3 id="2-参考链接"><a href="#2-参考链接" class="headerlink" title="2. 参考链接"></a>2. 参考链接</h3><ol>
<li><a href="https://zh.wikipedia.org/zh-hans/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">生产者消费者问题[WIKI]</a></li>
<li><a href="https://www.cnblogs.com/xrq730/p/4855663.html" target="_blank" rel="noopener">Java 多线程 14：生产者/消费者模型</a></li>
<li><a href="https://juejin.im/post/5aeec675f265da0b7c072c56" target="_blank" rel="noopener">一篇文章，让你彻底弄懂生产者–消费者问题</a></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1573289400369-254bf775-d595-407b-b4b5-20d964e4aa9a.png#align=left&amp;display=inline&amp;height=130&amp;name=image.png&amp;originHeight=178&amp;originWidth=621&amp;size=39726&amp;status=done&amp;width=453" alt="image.png"></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2019/11/07/yuque-【并发那些事】生产者消费者问题/">https://blog.coder4j.cn/2019/11/07/yuque-【并发那些事】生产者消费者问题/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[【spock】单测竟然可以如此丝滑]]></title>
      <url>https://blog.coder4j.cn/2019/10/31/yuque-%E3%80%90spock%E3%80%91%E5%8D%95%E6%B5%8B%E7%AB%9F%E7%84%B6%E5%8F%AF%E4%BB%A5%E5%A6%82%E6%AD%A4%E4%B8%9D%E6%BB%91/</url>
      <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1572609587644-4b77e5fa-311b-407f-8b58-471ec19ecea0.png#align=left&amp;display=inline&amp;height=611&amp;name=image.png&amp;originHeight=611&amp;originWidth=960&amp;size=1179175&amp;status=done&amp;width=960" alt="image.png"></p>
<h2 id="0-为什么人人都讨厌写单测"><a href="#0-为什么人人都讨厌写单测" class="headerlink" title="0. 为什么人人都讨厌写单测"></a>0. 为什么人人都讨厌写单测</h2><p>在之前的关于<a href="https://mp.weixin.qq.com/s?__biz=MzIzODE1NzA1MA==∣=2650157673&amp;idx=1&amp;sn=ed8cb9a37722938344d2ea5520d99368&amp;chksm=f13f3ffcc648b6ea26b86301bc3f3d2ccbf4bbb6dbfbdf09b55a14f6290f139e1636b9deb699&amp;scene=0&amp;xtrack=1#rd" target="_blank" rel="noopener">swagger</a>文章里提到过，<strong>程序员最讨厌的两件事，一件是别人不写文档，另一件就是自己写文档。这里如果把文档换成单元测试也同样成立。</strong><br>每个开发人员都明白单元测试的作用，也都知道代码覆盖率越高越好。高覆盖率的代码，相对来说出现 BUG 的概率就越低，在线上运行就越稳定，接的锅也就越少，就也不会害怕测试同事突然的关心。<br>既然这么多好处，为什么还会讨厌他呢？至少在我看来，单测有如下几点让我喜欢不起来的理由。<br><strong>第一，要额外写很多很多的代码</strong>，一个高覆盖率的单测代码，往往比你要测试的，真正开发的业务代码要多，甚至是业务代码的好几倍。这让人觉得难以接受，你想想开发 5 分钟，单测 2 小时是什么样的心情。而且并不是单测写完就没事了，后面业务要是变更了，你所写的单测代码也要同步维护。<br>第二，即使你有那个耐心去写单测，但是在当前这个拼速度挤时间的大环境下，会给你那么多写单测的时间吗？<strong>写一个单测的时间可以实现一个需求</strong>，你会如何去选？<br><strong>第三，写单测通常是一件很无趣的事</strong>，因为他比较死，主要目的就是为了验证，相比之下他更像是个体力活，没有真正写业务代码那种创造的成就感。写出来，验证不出 bug 很失落，白写了，验证出 bug 又感到自己是在打自己脸。</p>
<h2 id="1-为什么人人又必须写单测"><a href="#1-为什么人人又必须写单测" class="headerlink" title="1. 为什么人人又必须写单测"></a>1. 为什么人人又必须写单测</h2><p>所以得到的结论就是不写单测？那么问题又来了，<strong>出来混迟早是要还的</strong>，上线出了问题，最终责任人是谁？不是提需求的产品、不是没发现问题的测试同学，他们顶多就是连带责任。最该负责的肯定是写这段代码的你。特别是对于那些从事金融、交易、电商等息息相关业务的开发人员，跟每行代码打交通的都是真金白银。每次明星搞事，微博就挂，已经被传为笑谈，毕竟只是娱乐相关，如果挂的是支付宝、微信，那用户就没有那么大的包容度了。这些业务如果出现严重问题，轻则扫地出门，然后整个职业生涯背负这个污点，<strong>重则直接从面向对象开发变成面向监狱开发</strong>。所以<strong>单元测试保护的不仅仅是程序，更保护的是写程序的你</strong>。<br>最后得出了一个无可奈何的结论，<strong>单测是个让人又爱又恨的东西，是不想做但又不得不做的事情</strong>。虽然我们没办法改变要写单测这件事，但是我们可以改变怎么去写单元测试这件事。</p>
<h2 id="2-SPOCK-可以帮你改善单测体验"><a href="#2-SPOCK-可以帮你改善单测体验" class="headerlink" title="2. SPOCK 可以帮你改善单测体验"></a>2. SPOCK 可以帮你改善单测体验</h2><p>当然，本文不是教你用旁门左道的方法提高代码覆盖率。而是通过一个神奇的框架 spock 去提高你编写单元测试的效率。spock 这名称来源，个人猜测是因为《星际迷航》的同名人物（封面图）。那么 spock 是如何提高编写单测的效率呢？我觉得有以下几点：<br><strong>第一，他可以用更少的代码去实现单元测试</strong>，让你可以更加专注于去验证结果而不是写单测代码的过程。那么他又是如何做到少写代码这件事呢？原来他使用一种叫做 groovy 的魔法。<br>groovy 其实是一门基于 jvm 的动态语言。可以简单的理解成跑在 jvm 上的 python 或 js。说到这里，可能没有接触过动态语言的同学，对它们都会有一个比较刻板的印象，太过于灵活，很容易出现问题，且可维护性差，所以有了那一句『动态一时爽，全家 xxx』的梗。首先，这些的确是他的问题，严格的说是使用不当时才带来的问题。所以主要还是看使用的人。比如安卓领域的官方依赖管理工具 gradle 就是基于 groovy 开发的。<br>另外不要误以为我学这门框架，还要多学一门语言，成本太大。其实大可不必担心，你如果会 groovy 当然更好，如果不会也没有关系。因为 groovy 是基于 java 的，所以完全可以放心大胆的使用 java 的语法，某些要用到的 groovy 独有的语法很少，而且后面都会告诉你。<br><strong>第二，他有更好的语义化，让你的单测代码可读性更高。</strong><br>语义化这个词可能不太好理解。举两个例子来说吧，第一个是语义化比较好的语言 – HTML。他的语法特点就是标签，不同的类型放在不同的标签里。比如 head 就是头部的信息，body 是主体内容的信息，table 就是表格的信息，对于没有编程经验的人来说，也可以很容易理解。第二个是语义化比较差的语言 – 正则。他可以说基本上没有语义这种东西，由此导致的直接问题就是，即使是你自己的写的正则，几天之后你都不知道当时写的是什么。比如下面这个正则，你能猜出他是什么意思吗？（可以留言回复）</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable"><span class="token punctuation">((</span><span class="token operator">?</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token number">25</span>[<span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span>]<span class="token operator">|</span><span class="token number">2</span>[<span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span>]\d<span class="token operator">|</span>[<span class="token number">01</span>]<span class="token operator">?</span>\d<span class="token operator">?</span>\d<span class="token punctuation">)</span>\.<span class="token punctuation">)</span>{<span class="token number">3</span>}<span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token number">25</span>[<span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span>]<span class="token operator">|</span><span class="token number">2</span>[<span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span>]\d<span class="token operator">|</span>[<span class="token number">01</span>]<span class="token operator">?</span>\d<span class="token operator">?</span>\d<span class="token punctuation">))</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="3-领略-SPOCK-的魔法"><a href="#3-领略-SPOCK-的魔法" class="headerlink" title="3. 领略 SPOCK 的魔法"></a>3. 领略 SPOCK 的魔法</h2><h3 id="3-1-引入依赖"><a href="#3-1-引入依赖" class="headerlink" title="3.1 引入依赖"></a>3.1 引入依赖</h3><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--如果没有使得 spring boot，以下包可以省略--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--引入spock 核心包--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.spockframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spock-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3-groovy-2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--引入spock 与 spring 集成包--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.spockframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spock-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3-groovy-2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--引入 groovy 依赖--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.codehaus.groovy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>groovy-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>#####</p>
<h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><p>注释已经标明，第一个包是 spring boot 项目需要使用的，如果你只是想使用 spock，只要最下面 3 个即可。其中第一个包  <strong>spock-core</strong> 提供了 spock 的核心功能，第二个包  <strong>spock-spring</strong> 提供了与 spring 的集成（不用 spring 的情况下也可以不引入）。 注意这两个包的版本号 -&gt; <strong>1.3-groovy-2.5</strong>。第一个版本号 1.3 其实代表是 spock 的版本，第二个版本号代表的是 spock 所要依赖的 groovy 环境的版本。最后一个包就是我们要依赖的 groovy 。</p>
<h3 id="3-2-准备基础测试类"><a href="#3-2-准备基础测试类" class="headerlink" title="3.2 准备基础测试类"></a>3.2 准备基础测试类</h3><h4 id="3-2-1-Calculator-java"><a href="#3-2-1-Calculator-java" class="headerlink" title="3.2.1 Calculator.java"></a>3.2.1 <strong>Calculator.java</strong></h4><p>**</p>
<pre class="line-numbers language-xml"><code class="language-xml">/*
 * *
 *  * blog.coder4j.cn
 *  * Copyright (C) 2016-2019 All Rights Reserved.
 *
 */
package cn.coder4j.study.example.spock;

/**
 * @author buhao
 * @version Calculator.java, v 0.1 2019-10-30 10:34 buhao
 */
public class Calculator {

    /**
     * 加操作
     *
     * @param num1
     * @param num2
     * @return
     */
    public static int add(int num1, int num2) {
        return num1 + num2;
    }

    /**
     * 整型除操作
     *
     * @param num1
     * @param num2
     * @return
     */
    public static int divideInt(int num1, int num2) {
        return num1 / num2;
    }

    /**
     * 浮点型操作
     * @param num1
     * @param num2
     * @return
     */
    public static double divideDouble(double num1,  double num2){
        return num1 / num2;
    }
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>#####</p>
<h5 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h5><p>这是一个很简单的计算器类。只写了三个方法，一个是加法的操作、一个整型的除法操作、一个浮点类型的除法操作。</p>
<h3 id="3-3-开始单测-Calculator-java"><a href="#3-3-开始单测-Calculator-java" class="headerlink" title="3.3 开始单测  Calculator**.java**"></a>3.3 开始单测  <strong>Calculator**</strong>.java**</h3><h4 id="3-3-1-创建单测类-CalculatorTest-groovy"><a href="#3-3-1-创建单测类-CalculatorTest-groovy" class="headerlink" title="3.3.1 创建单测类  CalculatorTest.groovy"></a>3.3.1 创建单测类  CalculatorTest.groovy</h4><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">CalculatorTest</span> <span class="token keyword">extends</span>  <span class="token class-name">Specification</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>#####</p>
<h5 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h5><p>这里一定要注意，之前我们已经说了 spock 是基于 groovy 。所以单测类的后缀不是 .java 而<strong> .groovy</strong>。千万不要创建成普通 java 类了。否则创建没有问题，但是写一些 groovy 语法会报错。如果你用的是 IDEA 可以通过如下方式创建，以前创建 Java 类我们都是选择第一个选项，现在我们选择第三个 <strong>Groovy Class</strong> 就可以了。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1572754013592-b016e060-1811-497f-9f38-163cc96015ca.png#align=left&amp;display=inline&amp;height=226&amp;name=image.png&amp;originHeight=226&amp;originWidth=1384&amp;size=88592&amp;status=done&amp;width=1384" alt="image.png"><br>另外就是 spock 的测试类需要继承  <strong>spock.lang.Specification </strong>类。</p>
<h4 id="3-3-2-验证加操作-expect"><a href="#3-3-2-验证加操作-expect" class="headerlink" title="3.3.2 验证加操作 - expect"></a>3.3.2 验证加操作 - expect</h4><pre class="line-numbers language-groovy"><code class="language-groovy">    <span class="token keyword">def</span> <span class="token string">"test add"</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token spock-block">expect:</span>
        Calculator<span class="token operator">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>#####</p>
<h5 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h5><p><strong>def</strong> 是 groovy 的关键字，可以用来定义变量跟方法名。后面 <strong>“test add” </strong>是你单元测试的名称，也可以用中文。最后重点说明的是  <strong>expect</strong> 这个关键字。<br>expect 字面上的意思是期望，我们期望什么样的事情发生。在使用其它单测框架时，与之类似的是 assert 。比如  <em>Assert.assertEquals(_Calculator.add(_1 + 1）, 2) </em>这样，表示我们断言加操作传入 1 与 1 相加结果为 2。如果结果是这样则用例通过，如果不是则用例失败。这与我们上面的代码功能上完成一致。<br>expect 的语法意义就是在 expect 的<strong>块</strong>内，所有表达式成立则验证通过，反之有任一个不成立则验证失败。这里引入了一个<strong>块</strong>的概念。怎么理解 spock 的块呢？我们上面说 spock 有良好的语义化及更好的阅读性就是因为这个块的作用。可以类比成 html 中的标签。html 的标签的范围是两个标签之间，而 spock 更简洁一点，从这个标签开始到下一个标签开始或代码结束的地方，就是他的范围。我们只要看到 expect  这个标签就明白，他的范围内都是我们预期要得到的结果。</p>
<h4 id="3-3-3-验证加操作-given-and"><a href="#3-3-3-验证加操作-given-and" class="headerlink" title="3.3.3  验证加操作 - given - and"></a>3.3.3  验证加操作 - given - and</h4><p>这里代码比较简单，参数我只使用了一次，所以直接写死。如果想复用，我就得把这些参数抽成变量。这个时候可以使用 spock 的 <strong>given</strong> 块。given 的语法意义相当于是一个初始化的代码块。</p>
<pre class="line-numbers language-groovy"><code class="language-groovy">    <span class="token keyword">def</span> <span class="token string">"test add with given"</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token spock-block">given:</span>
        <span class="token keyword">def</span> num1 <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">def</span> num2 <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">def</span> result <span class="token operator">=</span> <span class="token number">2</span>

        <span class="token spock-block">expect:</span>
        Calculator<span class="token operator">.</span><span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">==</span> result
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当然你也可以像下面这样写，但是<strong>严重不推荐</strong>，因为虽然可以达到同样的效果，但是<strong>不符合 spock 的语义</strong>。就像我们一般是在 head 里面引入 js、css，但是你在 body 或者任何标签里都可以引入，语法没有问题但是破坏了语义，不便理解与维护。</p>
<pre class="line-numbers language-groovy"><code class="language-groovy">    <span class="token comment" spellcheck="true">// 反倒</span>
    <span class="token keyword">def</span> <span class="token string">"test add with given"</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token spock-block">expect:</span>
        <span class="token keyword">def</span> num1 <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">def</span> num2 <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">def</span> result <span class="token operator">=</span> <span class="token number">2</span>
        Calculator<span class="token operator">.</span><span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">==</span> result
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果你还想让语义更好一点，我们可以把参数与结果分开定义，这个时候可以使用 <strong>and</strong> 块。它的语法功能可以理解成同他上面最近的一个标签。</p>
<pre class="line-numbers language-groovy"><code class="language-groovy">    <span class="token keyword">def</span> <span class="token string">"test add with given and"</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token spock-block">given:</span>
        <span class="token keyword">def</span> num1 <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">def</span> num2 <span class="token operator">=</span> <span class="token number">1</span>

        <span class="token spock-block">and:</span>
        <span class="token keyword">def</span> result <span class="token operator">=</span> <span class="token number">2</span>

        <span class="token spock-block">expect:</span>
        Calculator<span class="token operator">.</span><span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">==</span> result
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>####</p>
<h4 id="3-3-4-验证加操作-expect-where"><a href="#3-3-4-验证加操作-expect-where" class="headerlink" title="3.3.4 验证加操作 - expect - where"></a>3.3.4 验证加操作 - expect - where</h4><p>看了上面例子，可能觉得 spock 只是语义比较好，但是没有少写几行代码呀。别急，下面我们就来看 spock 的一大杀器 <strong>where</strong>。</p>
<pre class="line-numbers language-groovy"><code class="language-groovy">    <span class="token keyword">def</span> <span class="token string">"test add with expect where"</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token spock-block">expect:</span>
        Calculator<span class="token operator">.</span><span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">==</span> result

        <span class="token spock-block">where:</span>
        num1    <span class="token operator">|</span>   num2    <span class="token operator">|</span>   result
        <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">2</span>
        <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">2</span>       <span class="token operator">|</span>   <span class="token number">3</span>
        <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">3</span>       <span class="token operator">|</span>   <span class="token number">4</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>where 块可以理解成准备测试数据的地方</strong>，他可以跟 expect 组合使用。上面代码里 expect 块里面定义了三个变量 num1、num2、result。这些数据我们可以在 where 块里定义。where 块使用了一种很像 markdown 中表格的定义方法。第一行或者说表头，列出了我们要传数据的变量名称，这里要<strong>与 expect 中对应</strong>，不能少但是可以多。其它行都是数据行，与表头一样都是通过 『 | 』 号分隔。通过这样，spock 就会跑 3 次用例，分别是 1 + 2 = 2、1 + 2 = 3、1 + 3 = 4 这些用例。怎么样？是不是很方便，后面再扩充用例只要再加一行数据就可以了。</p>
<h4 id="3-3-5-验证加操作-expect-where-Unroll"><a href="#3-3-5-验证加操作-expect-where-Unroll" class="headerlink" title="3.3.5  验证加操作 - expect - where - @Unroll"></a>3.3.5  验证加操作 - expect - where - @Unroll</h4><p>上面这些用例都是正常可以跑通的，如果是 IDEA 跑完之后会如下所示：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1572768324618-0f7dba74-138d-43b9-a8c4-e8c5af4cbc7b.png#align=left&amp;display=inline&amp;height=312&amp;name=image.png&amp;originHeight=312&amp;originWidth=616&amp;size=33068&amp;status=done&amp;width=616" alt="image.png"><br>那么现在我们看看如果有用例不通过会怎么样，把上面代码的最后一个 4 改成 5</p>
<pre class="line-numbers language-groovy"><code class="language-groovy">    <span class="token keyword">def</span> <span class="token string">"test add with expect where"</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token spock-block">expect:</span>
        Calculator<span class="token operator">.</span><span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">==</span> result

        <span class="token spock-block">where:</span>
        num1    <span class="token operator">|</span>   num2    <span class="token operator">|</span>   result
        <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">2</span>
        <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">2</span>       <span class="token operator">|</span>   <span class="token number">3</span>
        <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">3</span>       <span class="token operator">|</span>   <span class="token number">5</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再跑一次，IDEA 会出现如下显示<br><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1572768428913-cdbbf710-0561-4204-bf39-77ffbdaf838f.png#align=left&amp;display=inline&amp;height=700&amp;name=image.png&amp;originHeight=700&amp;originWidth=2226&amp;size=153623&amp;status=done&amp;width=2226" alt="image.png"><br>左边标注出来的是用例执行结果，可以看出来虽然有 3 条数据，其中 2 条数据是成功，但是只会显示整体的成功与否，所以显示未通过。但是 3 条数据，我怎么知道哪条没通过呢？<br>右边标注出来的是 spock 打印的的错误日志。可以很清楚的看到，在 num1 为 1，num2 为 3，result 为 5 并且 他们之间的判断关系为 == 的结果是 false 才是正确的。 spock 的这个日志打印的是相当历害，如果是比较字符串，还会计算异常字符串与正确字符串之间的匹配度，有兴趣的同学，可以自行测试。<br>嗯，虽然可以通过日志知道哪个用例没通过，但是还是觉得有点麻烦。spock 也知道这一点。所以他还同时提供了一个<strong> @Unroll </strong>注解。我们在上面的代码上再加上这个注解：</p>
<pre class="line-numbers language-groovy"><code class="language-groovy">    <span class="token annotation punctuation">@Unroll</span>
    <span class="token keyword">def</span> <span class="token string">"test add with expect where unroll"</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token spock-block">expect:</span>
        Calculator<span class="token operator">.</span><span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">==</span> result

        <span class="token spock-block">where:</span>
        num1    <span class="token operator">|</span>   num2    <span class="token operator">|</span>   result
        <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">2</span>
        <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">2</span>       <span class="token operator">|</span>   <span class="token number">3</span>
        <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">3</span>       <span class="token operator">|</span>   <span class="token number">5</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下： <img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1572769065408-cb11433d-e02c-4943-ad4f-b2b11f8da82f.png#align=left&amp;display=inline&amp;height=584&amp;name=image.png&amp;originHeight=584&amp;originWidth=1794&amp;size=132542&amp;status=done&amp;width=1794" alt="image.png"><br>通过添加<strong> @Unroll</strong> 注解，spock 自动把上面的代码拆分成了 3 个独立的单测测试，分别运行，运行结果更清晰了。<br>那么还能更清晰吗？当然可以，我们发现 spock 拆分后，每个用例的名称其实都是你写的单测方法的名称，然后后面加一个数组下标，不是很直观。我们可以通过 groovy 的字符串语法，把变量放入用例名称中，代码如下：</p>
<pre class="line-numbers language-groovy"><code class="language-groovy">    <span class="token annotation punctuation">@Unroll</span>
    <span class="token keyword">def</span> <span class="token string">"test add with expect where unroll by #num1 + #num2 = #result"</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token spock-block">expect:</span>
        Calculator<span class="token operator">.</span><span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">==</span> result

        <span class="token spock-block">where:</span>
        num1    <span class="token operator">|</span>   num2    <span class="token operator">|</span>   result
        <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">2</span>
        <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">2</span>       <span class="token operator">|</span>   <span class="token number">3</span>
        <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">3</span>       <span class="token operator">|</span>   <span class="token number">5</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如上，我们在方法名后加了一句  <strong>#num1 + #num2 = #result</strong>。这里有点类似我们在 mybatis 或者一些模板引擎中使用的方法。# 号拼接声明的变量就可以了，执行后结果如下。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1572769683455-e6523c1c-3ca3-48c3-91c3-1390af47ea8c.png#align=left&amp;display=inline&amp;height=272&amp;name=image.png&amp;originHeight=272&amp;originWidth=924&amp;size=60232&amp;status=done&amp;width=924" alt="image.png"><br>这下更清晰了。<br>另外一点，就是 where 默认使用的是表格的这种形式：</p>
<pre class="line-numbers language-groovy"><code class="language-groovy">        <span class="token spock-block">where:</span>
        num1    <span class="token operator">|</span>   num2    <span class="token operator">|</span>   result
        <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">2</span>
        <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">2</span>       <span class="token operator">|</span>   <span class="token number">3</span>
        <span class="token number">1</span>       <span class="token operator">|</span>   <span class="token number">3</span>       <span class="token operator">|</span>   <span class="token number">5</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>很直观，但是这种形式有一个弊端。上面 『 | 』 号对的这么整齐。都是我一个空格一个 TAG 按出来的。虽然语法不要求对齐，但是逼死强迫症。不过，好在还可以有另一种形式：</p>
<pre class="line-numbers language-groovy"><code class="language-groovy">    <span class="token annotation punctuation">@Unroll</span>
    <span class="token keyword">def</span> <span class="token string">"test add with expect where unroll arr by #num1 + #num2 = #result"</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token spock-block">expect:</span>
        Calculator<span class="token operator">.</span><span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">==</span> result

        <span class="token spock-block">where:</span>
        num1 <span class="token operator">&lt;&lt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
        num2 <span class="token operator">&lt;&lt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
        result <span class="token operator">&lt;&lt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以通过 『&lt;&lt;』 符（注意方向），把一个数组赋给变量，等同于上面的数据表格，没有表格直观，但是比较简洁也不用考虑对齐问题，这两种形式看个人喜好了。</p>
<h4 id="3-3-6-验证整数除操作-when-then"><a href="#3-3-6-验证整数除操作-when-then" class="headerlink" title="3.3.6 验证整数除操作 - when - then"></a>3.3.6 验证整数除操作 - when - then</h4><p>我们都知道一个整数除以 0 会有抛出一个『/ by zero』异常，那么如果断言这个异常呢。用上面 expect 不太好操作，我们可以使用另一个类似的块<strong> when … then</strong>。</p>
<pre class="line-numbers language-groovy"><code class="language-groovy">    <span class="token annotation punctuation">@Unroll</span>
    <span class="token keyword">def</span> <span class="token string">"test int divide zero exception"</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token spock-block">when:</span>
        Calculator<span class="token operator">.</span><span class="token function">divideInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

        <span class="token spock-block">then:</span>
        <span class="token keyword">def</span> ex <span class="token operator">=</span> <span class="token function">thrown</span><span class="token punctuation">(</span>ArithmeticException<span class="token punctuation">)</span>
        ex<span class="token operator">.</span>message <span class="token operator">==</span> <span class="token string">"/ by zero"</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>when … then </strong>通常是成对出现的，它代表着当执行了 when 块中的操作，会出现 then 块中的期望。比如上面的代码说明了，当执行了  <em>Calculator.divideInt(1, 0) </em>的操作，就一定会抛出  <em>ArithmeticException</em> 异常，并且异常信息是  <em>/ by zero</em>。</p>
<h3 id="3-4-准备-Spring-测试类"><a href="#3-4-准备-Spring-测试类" class="headerlink" title="3.4 准备 Spring 测试类"></a>3.4 准备 Spring 测试类</h3><p>上面我们已经学会了 spock 的基础用法，下面我们将学习与 spring 整合的知识，首先创建几个用于测试的 demo 类</p>
<h4 id="3-4-1-User-java"><a href="#3-4-1-User-java" class="headerlink" title="3.4.1 User.java"></a>3.4.1 User.java</h4><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">/*
 * *
 *  * blog.coder4j.cn
 *  * Copyright (C) 2016-2019 All Rights Reserved.
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token operator">.</span>coder4j<span class="token operator">.</span>study<span class="token operator">.</span>example<span class="token operator">.</span>spock<span class="token operator">.</span>model<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token operator">.</span>util<span class="token operator">.</span>Objects<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version User.java, v 0.1 2019-10-30 16:23 buhao
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String passwd<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> String passwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token operator">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">.</span>passwd <span class="token operator">=</span> passwd<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Getter method for property &lt;tt>passwd&lt;/tt>.
     *
     * @return property value of passwd
     */</span>
    <span class="token keyword">public</span> String <span class="token function">getPasswd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> passwd<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Setter method for property &lt;tt>passwd&lt;/tt>.
     *
     * @param passwd value to be assigned to property passwd
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPasswd</span><span class="token punctuation">(</span>String passwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token operator">.</span>passwd <span class="token operator">=</span> passwd<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Getter method for property &lt;tt>name&lt;/tt>.
     *
     * @return property value of name
     */</span>
    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Setter method for property &lt;tt>name&lt;/tt>.
     *
     * @param name value to be assigned to property name
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token operator">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Getter method for property &lt;tt>age&lt;/tt>.
     *
     * @return property value of age
     */</span>
    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Setter method for property &lt;tt>age&lt;/tt>.
     *
     * @param age value to be assigned to property age
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token operator">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token operator">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token keyword">return</span> Objects<span class="token operator">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> user<span class="token operator">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                Objects<span class="token operator">.</span><span class="token function">equals</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> user<span class="token operator">.</span>age<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                Objects<span class="token operator">.</span><span class="token function">equals</span><span class="token punctuation">(</span>passwd<span class="token punctuation">,</span> user<span class="token operator">.</span>passwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Objects<span class="token operator">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>####</p>
<h4 id="3-4-2-UserDao-java"><a href="#3-4-2-UserDao-java" class="headerlink" title="3.4.2 UserDao.java"></a>3.4.2 UserDao.java</h4><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">/*
 * *
 *  * blog.coder4j.cn
 *  * Copyright (C) 2016-2019 All Rights Reserved.
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token operator">.</span>coder4j<span class="token operator">.</span>study<span class="token operator">.</span>example<span class="token operator">.</span>spock<span class="token operator">.</span>dao<span class="token punctuation">;</span>

<span class="token keyword">import</span> cn<span class="token operator">.</span>coder4j<span class="token operator">.</span>study<span class="token operator">.</span>example<span class="token operator">.</span>spock<span class="token operator">.</span>model<span class="token operator">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token operator">.</span>springframework<span class="token operator">.</span>stereotype<span class="token operator">.</span>Component<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token operator">.</span>util<span class="token operator">.</span>HashMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token operator">.</span>util<span class="token operator">.</span>Map<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version UserDao.java, v 0.1 2019-10-30 16:24 buhao
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 模拟数据库
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> userMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        userMap<span class="token operator">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userMap<span class="token operator">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userMap<span class="token operator">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"789"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 通过用户名查询用户
     * @param name
     * @return
     */</span>
    <span class="token keyword">public</span> User <span class="token function">findByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> userMap<span class="token operator">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>####</p>
<h4 id="3-4-3-UserService-java"><a href="#3-4-3-UserService-java" class="headerlink" title="3.4.3 UserService.java"></a>3.4.3 UserService.java</h4><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">/*
 * *
 *  * blog.coder4j.cn
 *  * Copyright (C) 2016-2019 All Rights Reserved.
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token operator">.</span>coder4j<span class="token operator">.</span>study<span class="token operator">.</span>example<span class="token operator">.</span>spock<span class="token operator">.</span>service<span class="token punctuation">;</span>

<span class="token keyword">import</span> cn<span class="token operator">.</span>coder4j<span class="token operator">.</span>study<span class="token operator">.</span>example<span class="token operator">.</span>spock<span class="token operator">.</span>dao<span class="token operator">.</span>UserDao<span class="token punctuation">;</span>
<span class="token keyword">import</span> cn<span class="token operator">.</span>coder4j<span class="token operator">.</span>study<span class="token operator">.</span>example<span class="token operator">.</span>spock<span class="token operator">.</span>model<span class="token operator">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token operator">.</span>springframework<span class="token operator">.</span>beans<span class="token operator">.</span>factory<span class="token operator">.</span>annotation<span class="token operator">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token operator">.</span>springframework<span class="token operator">.</span>stereotype<span class="token operator">.</span>Service<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version UserService.java, v 0.1 2019-10-30 16:29 buhao
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>

    <span class="token keyword">public</span> User <span class="token function">findByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> userDao<span class="token operator">.</span><span class="token function">findByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loginAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token operator">.</span>out<span class="token operator">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String passwd<span class="token punctuation">)</span><span class="token punctuation">{</span>
        User user <span class="token operator">=</span> <span class="token function">findByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token operator">.</span><span class="token function">getPasswd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">equals</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"密码输入错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">loginAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>####</p>
<h4 id="3-4-3-Application-java"><a href="#3-4-3-Application-java" class="headerlink" title="3.4.3 Application.java"></a>3.4.3 Application.java</h4><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">/*
 * *
 *  * blog.coder4j.cn
 *  * Copyright (C) 2016-2019 All Rights Reserved.
 *
 */</span>

<span class="token keyword">package</span> cn<span class="token operator">.</span>coder4j<span class="token operator">.</span>study<span class="token operator">.</span>example<span class="token operator">.</span>spock<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token operator">.</span>springframework<span class="token operator">.</span>boot<span class="token operator">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token operator">.</span>springframework<span class="token operator">.</span>boot<span class="token operator">.</span>autoconfigure<span class="token operator">.</span>SpringBootApplication<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token operator">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token operator">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>###</p>
<h3 id="3-5-与-spring-集成测试"><a href="#3-5-与-spring-集成测试" class="headerlink" title="3.5 与 spring 集成测试"></a>3.5 与 spring 集成测试</h3><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">/*
 * *
 *  * blog.coder4j.cn
 *  * Copyright (C) 2016-2019 All Rights Reserved.
 *
 */</span>

<span class="token keyword">package</span> cn<span class="token operator">.</span>coder4j<span class="token operator">.</span>study<span class="token operator">.</span>example<span class="token operator">.</span>spock<span class="token operator">.</span>service

<span class="token keyword">import</span> cn<span class="token operator">.</span>coder4j<span class="token operator">.</span>study<span class="token operator">.</span>example<span class="token operator">.</span>spock<span class="token operator">.</span>model<span class="token operator">.</span>User
<span class="token keyword">import</span> org<span class="token operator">.</span>springframework<span class="token operator">.</span>beans<span class="token operator">.</span>factory<span class="token operator">.</span>annotation<span class="token operator">.</span>Autowired
<span class="token keyword">import</span> org<span class="token operator">.</span>springframework<span class="token operator">.</span>boot<span class="token operator">.</span>test<span class="token operator">.</span>context<span class="token operator">.</span>SpringBootTest
<span class="token keyword">import</span> spock<span class="token operator">.</span>lang<span class="token operator">.</span>Specification
<span class="token keyword">import</span> spock<span class="token operator">.</span>lang<span class="token operator">.</span>Unroll

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">UserServiceFunctionTest</span> <span class="token keyword">extends</span> <span class="token class-name">Specification</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    UserService userService

    <span class="token annotation punctuation">@Unroll</span>
    <span class="token keyword">def</span> <span class="token string">"test findByName with input #name return #result"</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token spock-block">expect:</span>
        userService<span class="token operator">.</span><span class="token function">findByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">==</span> result

        <span class="token spock-block">where:</span>
        name <span class="token operator">&lt;&lt;</span> <span class="token punctuation">[</span><span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token string">"kk"</span><span class="token punctuation">]</span>
        result <span class="token operator">&lt;&lt;</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">]</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Unroll</span>
    <span class="token keyword">def</span> <span class="token string">"test login with input #name and #passwd throw #errMsg"</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token spock-block">when:</span>
        userService<span class="token operator">.</span><span class="token function">login</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span>

        <span class="token spock-block">then:</span>
        <span class="token keyword">def</span> e <span class="token operator">=</span> <span class="token function">thrown</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span>
        e<span class="token operator">.</span>message <span class="token operator">==</span> errMsg

        <span class="token spock-block">where:</span>
        name    <span class="token operator">|</span>   passwd  <span class="token operator">|</span>   errMsg
        <span class="token string">"kd"</span>     <span class="token operator">|</span>   <span class="token string">"1"</span>     <span class="token operator">|</span>   <span class="token string">"${name}不存在"</span>
        <span class="token string">"k"</span>     <span class="token operator">|</span>   <span class="token string">"1"</span>     <span class="token operator">|</span>   <span class="token string">"${name}密码输入错误"</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>spock 与 spring 集成特别的简单，只要你加入了开头所说的  <strong>spock-spring</strong> 和  <strong>spring-boot-starter-test</strong>。再于测试代码的类上加上  <strong>@SpringBootTest</strong>  注解就可以了。想用的类直接注入进来就可以了，但是要注意的是这里只能算功能测试或集成测试，因为在跑用例时是会启动 spring 容器的，外部依赖也必须有。很耗时，而且有时候外部依赖本地也跑不了，所以我们通常都是通过 mock 来完成单元测试。</p>
<h3 id="3-6-与-spring-mock-测试"><a href="#3-6-与-spring-mock-测试" class="headerlink" title="3.6 与 spring mock 测试"></a>3.6 与 spring mock 测试</h3><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">/*
 * *
 *  * blog.coder4j.cn
 *  * Copyright (C) 2016-2019 All Rights Reserved.
 *
 */</span>

<span class="token keyword">package</span> cn<span class="token operator">.</span>coder4j<span class="token operator">.</span>study<span class="token operator">.</span>example<span class="token operator">.</span>spock<span class="token operator">.</span>service

<span class="token keyword">import</span> cn<span class="token operator">.</span>coder4j<span class="token operator">.</span>study<span class="token operator">.</span>example<span class="token operator">.</span>spock<span class="token operator">.</span>dao<span class="token operator">.</span>UserDao
<span class="token keyword">import</span> cn<span class="token operator">.</span>coder4j<span class="token operator">.</span>study<span class="token operator">.</span>example<span class="token operator">.</span>spock<span class="token operator">.</span>model<span class="token operator">.</span>User
<span class="token keyword">import</span> spock<span class="token operator">.</span>lang<span class="token operator">.</span>Specification
<span class="token keyword">import</span> spock<span class="token operator">.</span>lang<span class="token operator">.</span>Unroll

<span class="token keyword">class</span> <span class="token class-name">UserServiceUnitTest</span> <span class="token keyword">extends</span> <span class="token class-name">Specification</span>  <span class="token punctuation">{</span>

    UserService userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    UserDao userDao <span class="token operator">=</span> <span class="token function">Mock</span><span class="token punctuation">(</span>UserDao<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        userService<span class="token operator">.</span>userDao <span class="token operator">=</span> userDao
    <span class="token punctuation">}</span>

    <span class="token keyword">def</span> <span class="token string">"test login with success"</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token spock-block">when:</span>
        userService<span class="token operator">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token string">"p"</span><span class="token punctuation">)</span>

        <span class="token spock-block">then:</span>
        <span class="token number">1</span> <span class="token operator">*</span> userDao<span class="token operator">.</span><span class="token function">findByName</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span><span class="token string">"p"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">def</span> <span class="token string">"test login with error"</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token spock-block">given:</span>
        <span class="token keyword">def</span> name <span class="token operator">=</span> <span class="token string">"k"</span>
        <span class="token keyword">def</span> passwd <span class="token operator">=</span> <span class="token string">"p"</span>

        <span class="token spock-block">when:</span>
        userService<span class="token operator">.</span><span class="token function">login</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span>

        <span class="token spock-block">then:</span>
        <span class="token number">1</span> <span class="token operator">*</span> userDao<span class="token operator">.</span><span class="token function">findByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">>></span> null

        <span class="token spock-block">then:</span>
        <span class="token keyword">def</span> e <span class="token operator">=</span> <span class="token function">thrown</span><span class="token punctuation">(</span>RuntimeException<span class="token punctuation">)</span>
        e<span class="token operator">.</span>message <span class="token operator">==</span> <span class="token string">"${name}不存在"</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Unroll</span>
    <span class="token keyword">def</span> <span class="token string">"test login with "</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token spock-block">when:</span>
        userService<span class="token operator">.</span><span class="token function">login</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span>

        <span class="token spock-block">then:</span>
        userDao<span class="token operator">.</span><span class="token function">findByName</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">)</span> <span class="token operator">>></span> null
        userDao<span class="token operator">.</span><span class="token function">findByName</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"p"</span><span class="token punctuation">)</span>

        <span class="token spock-block">then:</span>
        <span class="token keyword">def</span> e <span class="token operator">=</span> <span class="token function">thrown</span><span class="token punctuation">(</span>RuntimeException<span class="token punctuation">)</span>
        e<span class="token operator">.</span>message <span class="token operator">==</span> errMsg

        <span class="token spock-block">where:</span>
        name        <span class="token operator">|</span>   passwd  <span class="token operator">|</span>   errMsg
        <span class="token string">"k"</span>         <span class="token operator">|</span>   <span class="token string">"k"</span>     <span class="token operator">|</span>   <span class="token string">"${name}不存在"</span>
        <span class="token string">"k1"</span>        <span class="token operator">|</span>   <span class="token string">"p1"</span>     <span class="token operator">|</span>   <span class="token string">"${name}密码输入错误"</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>spock 使用 mock 也很简单，直接使用 <strong>Mock(类)</strong> 就可以了。如上代码  <em>UserDao userDao = Mock(UserDao) 。</em>上面写的例子中有几点要说明一下，以如下这个方法为例：</p>
<pre class="line-numbers language-groovy"><code class="language-groovy">    <span class="token keyword">def</span> <span class="token string">"test login with error"</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token spock-block">given:</span>
        <span class="token keyword">def</span> name <span class="token operator">=</span> <span class="token string">"k"</span>
        <span class="token keyword">def</span> passwd <span class="token operator">=</span> <span class="token string">"p"</span>

        <span class="token spock-block">when:</span>
        userService<span class="token operator">.</span><span class="token function">login</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span>

        <span class="token spock-block">then:</span>
        <span class="token number">1</span> <span class="token operator">*</span> userDao<span class="token operator">.</span><span class="token function">findByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">>></span> null

        <span class="token spock-block">then:</span>
        <span class="token keyword">def</span> e <span class="token operator">=</span> <span class="token function">thrown</span><span class="token punctuation">(</span>RuntimeException<span class="token punctuation">)</span>
        e<span class="token operator">.</span>message <span class="token operator">==</span> <span class="token string">"${name}不存在"</span>

    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>given、when、then 不用说了，大家已经很熟悉了，但是第一个 then 里面的 <strong><em>1 \</em> userDao.findByName(name) &gt;&gt; null* </strong>是什么鬼？<br>首先，我们可以知道的是，一个用例中可以有多个 then 块，对于多个期望可以分别放在多个 then 中。<br>第二， <strong>1 * xx </strong>表示 期望 xx 操作执行了 1 次。<em>1 * userDao.findByName(name)</em>*_ **就表现当执行  <em>userService.login(name, passwd) 时我期望执行 1 次  userDao.findByName(name) </em>方法。如果期望不执行这个方法就是_0 _ xx<em>，这在条件代码的验证中很有用，然后 </em>&gt;&gt; null<em> 又是什么意思？他代表当执行了  _userDao.findByName(name) 方法后，我让他结果返回 null</em>。因为 userDao 这个对象是我们 mock 出来的，他就是一个假对象，为了让后续流程按我们的想法进行，我可以通过『 &gt;&gt;』 让 spock 模拟返回指定数据。<br>第三，要注意第二个 then 代码块使用<strong> \${name} </strong>引用变量，跟标题的<strong> #name</strong> 是不同的。</p>
<h3 id="3-7-其它内容"><a href="#3-7-其它内容" class="headerlink" title="3.7 其它内容"></a>3.7 其它内容</h3><h4 id="3-7-1-公共方法"><a href="#3-7-1-公共方法" class="headerlink" title="3.7.1 公共方法"></a>3.7.1 公共方法</h4><table>
<thead>
<tr>
<th style="text-align:center"><strong>方法名</strong></th>
<th style="text-align:center"><strong>作用</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">setup()</td>
<td style="text-align:center">每个方法执行前调用</td>
</tr>
<tr>
<td style="text-align:center">cleanup()</td>
<td style="text-align:center">每个方法执行后调用</td>
</tr>
<tr>
<td style="text-align:center">setupSpec()</td>
<td style="text-align:center">每个方法类加载前调用一次</td>
</tr>
<tr>
<td style="text-align:center">cleanupSpec()</td>
<td style="text-align:center">每个方法类执行完调用一次</td>
</tr>
</tbody>
</table>
<p>这些方法通常用于测试开始前的一些初始化操作，和测试完成后的清理操作，如下：</p>
<pre class="line-numbers language-groovy"><code class="language-groovy">    <span class="token keyword">def</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        println <span class="token string">"方法开始前初始化"</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">def</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        println <span class="token string">"方法执行完清理"</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">def</span> <span class="token function">setupSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        println <span class="token string">"类加载前开始前初始化"</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">def</span> <span class="token function">cleanupSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        println <span class="token string">"所以方法执行完清理"</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="3-7-2-Timeout"><a href="#3-7-2-Timeout" class="headerlink" title="3.7.2 @Timeout"></a>3.7.2 @Timeout</h4><p>对于某些方法，需要规定他的时间，如果运行时间超过了指定时间就算失败，这时可以使用 timeout 注解</p>
<pre class="line-numbers language-groovy"><code class="language-groovy">    <span class="token annotation punctuation">@Timeout</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">900</span><span class="token punctuation">,</span> unit <span class="token operator">=</span> TimeUnit<span class="token operator">.</span>MILLISECONDS<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token string">"test timeout"</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token spock-block">expect:</span>
        Thread<span class="token operator">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
        <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注解有两个值，一个是 value 我们设置的数值，unit 是数值的单位。</p>
<h4 id="3-7-3-with"><a href="#3-7-3-with" class="headerlink" title="3.7.3 with"></a>3.7.3 with</h4><pre class="line-numbers language-groovy"><code class="language-groovy">    <span class="token keyword">def</span> <span class="token string">"test findByName by verity"</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token spock-block">given:</span>
        <span class="token keyword">def</span> userDao <span class="token operator">=</span> <span class="token function">Mock</span><span class="token punctuation">(</span>UserDao<span class="token punctuation">)</span>

        <span class="token spock-block">when:</span>
        userDao<span class="token operator">.</span><span class="token function">findByName</span><span class="token punctuation">(</span><span class="token string">"kk"</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"kk"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"33"</span><span class="token punctuation">)</span>

        <span class="token spock-block">then:</span>
        <span class="token keyword">def</span> user <span class="token operator">=</span> userDao<span class="token operator">.</span><span class="token function">findByName</span><span class="token punctuation">(</span><span class="token string">"kk"</span><span class="token punctuation">)</span>
        <span class="token function">with</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            name <span class="token operator">==</span> <span class="token string">"kk"</span>
            age <span class="token operator">==</span> <span class="token number">12</span>
            passwd <span class="token operator">==</span> <span class="token string">"33"</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>with</strong> 算是一个语法糖，没有他之前我们要判断对象的值只能，user.getXxx() == xx。如果属性过多也是挺麻烦的，用 with 包裹之后，只要在花括号内直接写属性名称即可，如上代码所示。</p>
<h2 id="4-其它"><a href="#4-其它" class="headerlink" title="4. 其它"></a>4. 其它</h2><h3 id="4-1-完整代码"><a href="#4-1-完整代码" class="headerlink" title="4.1 完整代码"></a>4.1 完整代码</h3><p>因为篇幅有限，无法贴完所有代码，完整代码已上传  <a href="https://github.com/kiwiflydream/study-example/tree/master/study-spock-example" target="_blank" rel="noopener">github</a>。</p>
<h3 id="4-2-参考文档"><a href="#4-2-参考文档" class="headerlink" title="4.2 参考文档"></a>4.2 参考文档</h3><p>本文在瞻仰了如下博主的精彩博文后，再加上自身的学习总结加工而来，如果本文在看的时候有不明白的地方可以看一下下方链接。</p>
<ol>
<li><a href="https://juejin.im/post/5d982268e51d45782e6039bf" target="_blank" rel="noopener">Spock in Java 慢慢爱上写单元测试</a></li>
<li><a href="https://www.cnblogs.com/lovesqcc/p/8647201.html" target="_blank" rel="noopener">使用 Groovy+Spock 轻松写出更简洁的单测</a></li>
<li><a href="http://jvm123.com/2019/08/spock.html" target="_blank" rel="noopener">Spock 测试框架的介绍和使用详解</a></li>
<li><a href="https://www.alicharles.com/article/spock/#_%E9%87%87%E7%94%A8groovy_spock%E9%92%88%E5%AF%B9userservice%E7%BC%96%E5%86%99%E6%B5%8B%E8%AF%95" target="_blank" rel="noopener">Spock 基于 BDD 测试</a></li>
<li><a href="http://spockframework.org/spock/docs/1.3/all_in_one.html" target="_blank" rel="noopener">Spock 官方文档</a></li>
<li><a href="http://www.liuhaihua.cn/archives/540855.html" target="_blank" rel="noopener">Spock 测试框架</a></li>
<li><a href="https://stackoverflow.com/questions/19185596/spock-testing-exceptions-with-data-tables" target="_blank" rel="noopener">spock-testing-exceptions-with-data-tables</a></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1572784460361-705b4d9a-b67c-4456-8cd3-42abbfe75f66.png#align=left&amp;display=inline&amp;height=154&amp;name=image.png&amp;originHeight=178&amp;originWidth=621&amp;size=39726&amp;status=done&amp;width=539" alt="image.png"></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2019/10/31/yuque-【spock】单测竟然可以如此丝滑/">https://blog.coder4j.cn/2019/10/31/yuque-【spock】单测竟然可以如此丝滑/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[碎碎念-03]]></title>
      <url>https://blog.coder4j.cn/2019/10/24/yuque-%E7%A2%8E%E7%A2%8E%E5%BF%B5-03/</url>
      <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/119443/1571922915604-f292746d-c365-4512-b514-06eca9c7cc66.jpeg#align=left&amp;display=inline&amp;height=1080&amp;originHeight=1080&amp;originWidth=1920&amp;size=0&amp;status=done&amp;width=1920" alt></p>
<blockquote>
<p>本文收集与整理日常生活中看到的各种信息，可能是一条微博、也可能是一张图片、甚至只是闲聊中的只言片语。总之，是一些能触动到我的东西，希望同样对你有用。当然因为这些内容都是可遇而不可求的，发布没有固定时间，每攒 15 条，发布一次。同时，如果你也有这样的碎碎念，欢迎私信，很可能就出现在下一次的文章中。</p>
</blockquote>
<ol>
<li>故障<blockquote>
<p>故障天然会发生，如何减少发生概率，发生了以后如何缩短故障恢复时间，如何减少故障影响面是工程技术角度要解决的最核心命题。<br>– <a href="https://mp.weixin.qq.com/s/TeaJ274o85IpcxWGM1ogHw" target="_blank" rel="noopener">有赞崔玉松：请商家听我讲一讲「系统稳定性」</a></p>
</blockquote>
</li>
</ol>
<hr>
<ol>
<li>ETC</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1571923689895-2822265d-81a6-4854-86f7-633f9eca6bea.png#align=left&amp;display=inline&amp;height=166&amp;name=image.png&amp;originHeight=332&amp;originWidth=426&amp;size=75553&amp;status=done&amp;width=213" alt="image.png"></p>
<hr>
<ol>
<li>夜景</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1572447192478-dec8e046-d569-45de-88c6-d282f35841c6.png#align=left&amp;display=inline&amp;height=277&amp;name=image.png&amp;originHeight=554&amp;originWidth=600&amp;size=477349&amp;status=done&amp;width=300" alt="image.png"></p>
<hr>
<ol>
<li>裂缝<blockquote>
<p>万物皆有裂缝处，那是光射进来的地方。 -莱昂纳多·科恩（加拿大歌手、诗人）</p>
</blockquote>
</li>
</ol>
<hr>
<ol>
<li>拖延</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1572447326861-fed708fa-50ac-4abb-b33c-73b1ad2079b8.png#align=left&amp;display=inline&amp;height=963&amp;name=image.png&amp;originHeight=1926&amp;originWidth=1080&amp;size=642218&amp;status=done&amp;width=540" alt="image.png"></p>
<hr>
<ol>
<li>沉醉</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1572525481770-6111a212-fb7f-4e57-bdb9-5bbffe06e6b6.png#align=left&amp;display=inline&amp;height=458&amp;name=image.png&amp;originHeight=916&amp;originWidth=1080&amp;size=1372039&amp;status=done&amp;width=540" alt="image.png"><br>–《进击的巨人》</p>
<hr>
<ol>
<li>最重要的两天<blockquote>
<p>人生最重要的两天，你来到世界的那天，和你了解为什么你来到世界的那天。<br>– 马克吐温</p>
</blockquote>
</li>
</ol>
<hr>
<ol>
<li>职场</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1573746376295-50ea6b3f-aca4-457d-859d-9f9095928fef.png#align=left&amp;display=inline&amp;height=454&amp;name=image.png&amp;originHeight=908&amp;originWidth=828&amp;size=363442&amp;status=done&amp;width=414" alt="image.png"></p>
<hr>
<ol>
<li>学习金字塔</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1573746312458-4ae3fd1f-321f-4a28-a506-bcf359b9c096.png#align=left&amp;display=inline&amp;height=215&amp;name=image.png&amp;originHeight=429&amp;originWidth=800&amp;size=285153&amp;status=done&amp;width=400" alt="image.png"></p>
<hr>
<ol>
<li>欲望与理想</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1573745668613-62abe0f5-4eff-46ab-9fd3-9a60e682f7b7.png#align=left&amp;display=inline&amp;height=477&amp;name=image.png&amp;originHeight=954&amp;originWidth=1124&amp;size=559394&amp;status=done&amp;width=562" alt="image.png"></p>
<hr>
<ol>
<li>TDD</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1573745743007-7555926e-ed5f-4546-9ecf-2d87d2474b07.png#align=left&amp;display=inline&amp;height=144&amp;name=image.png&amp;originHeight=287&amp;originWidth=989&amp;size=58988&amp;status=done&amp;width=494.5" alt="image.png"></p>
<hr>
<ol>
<li>仰望星空<blockquote>
<p>我们都在阴沟里，但仍有人仰望星空（We are all in the gutter, but some of us are looking at the stars.）<br>–王尔德</p>
</blockquote>
</li>
</ol>
<hr>
<ol>
<li>道德与规则<blockquote>
<p>一个肮脏的国家，如果人人讲规则而不是谈道德，最终会变成一个有人味儿的正常国家，道德自然会逐渐回归；一个干净的国家，如果人人都不讲规则却大谈道德，谈高尚，天天没事儿就谈道德规范，人人大公无私，最终这个国家会堕落成为一个伪君子遍布的肮脏国家。<br>–胡适</p>
</blockquote>
</li>
</ol>
<hr>
<ol>
<li>迅速掌握知识点</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1573746045219-941b6526-872b-4ef1-97b6-4686bf217f56.png#align=left&amp;display=inline&amp;height=2559&amp;name=image.png&amp;originHeight=5117&amp;originWidth=720&amp;size=2082222&amp;status=done&amp;width=360" alt="image.png"></p>
<ol>
<li>快乐</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1573746198736-b9229c3b-d606-4a3e-a2de-fcb8af073ab2.png#align=left&amp;display=inline&amp;height=924&amp;name=image.png&amp;originHeight=1847&amp;originWidth=1080&amp;size=1385647&amp;status=done&amp;width=540" alt="image.png"></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2019/10/24/yuque-碎碎念-03/">https://blog.coder4j.cn/2019/10/24/yuque-碎碎念-03/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[【websocket】spring boot 集成 websocket 的四种方式]]></title>
      <url>https://blog.coder4j.cn/2019/10/22/yuque-%E3%80%90websocket%E3%80%91spring-boot-%E9%9B%86%E6%88%90-websocket-%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/119443/1571838520170-96049339-d6e2-438f-9fe5-3119d6f5ebd5.jpeg#align=left&amp;display=inline&amp;height=1080&amp;originHeight=1080&amp;originWidth=1920&amp;size=0&amp;status=done&amp;width=1920" alt></p>
<h2 id="集成-websocket-的四种方案"><a href="#集成-websocket-的四种方案" class="headerlink" title="集成 websocket 的四种方案"></a>集成 websocket 的四种方案</h2><h3 id="1-原生注解"><a href="#1-原生注解" class="headerlink" title="1. 原生注解"></a>1. 原生注解</h3><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="WebSocketConfig"><a href="#WebSocketConfig" class="headerlink" title="WebSocketConfig"></a>WebSocketConfig</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 * *
 *  * blog.coder4j.cn
 *  * Copyright (C) 2016-2019 All Rights Reserved.
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableWebSocket<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>server<span class="token punctuation">.</span>standard<span class="token punctuation">.</span>ServerEndpointExporter<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version WebSocketConfig.java, v 0.1 2019-10-18 15:45 buhao
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableWebSocket</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> ServerEndpointExporter <span class="token function">serverEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServerEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><p>这个配置类很简单，通过这个配置 spring boot 才能去扫描后面的关于 websocket 的注解</p>
<h4 id="WsServerEndpoint"><a href="#WsServerEndpoint" class="headerlink" title="WsServerEndpoint"></a>WsServerEndpoint</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 * *
 *  * blog.coder4j.cn
 *  * Copyright (C) 2016-2019 All Rights Reserved.
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>ws<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>OnClose<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>OnMessage<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>OnOpen<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>Session<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>server<span class="token punctuation">.</span>ServerEndpoint<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version WsServerEndpoint.java, v 0.1 2019-10-18 16:06 buhao
 */</span>
<span class="token annotation punctuation">@ServerEndpoint</span><span class="token punctuation">(</span><span class="token string">"/myWs"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WsServerEndpoint</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 连接成功
     *
     * @param session
     */</span>
    <span class="token annotation punctuation">@OnOpen</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOpen</span><span class="token punctuation">(</span>Session session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 连接关闭
     *
     * @param session
     */</span>
    <span class="token annotation punctuation">@OnClose</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClose</span><span class="token punctuation">(</span>Session session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 接收到消息
     *
     * @param text
     */</span>
    <span class="token annotation punctuation">@OnMessage</span>
    <span class="token keyword">public</span> String <span class="token function">onMsg</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"servet 发送："</span> <span class="token operator">+</span> text<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><p>这里有几个注解需要注意一下，首先是他们的包都在 <strong>javax.websocket </strong>下。并不是 spring 提供的，而 jdk 自带的，下面是他们的具体作用。</p>
<ol>
<li><strong>@ServerEndpoint</strong><ol>
<li>通过这个 spring boot 就可以知道你暴露出去的 ws 应用的路径，有点类似我们经常用的@RequestMapping。比如你的启动端口是 8080，而这个注解的值是 ws，那我们就可以通过 ws://127.0.0.1:8080/ws 来连接你的应用</li>
</ol>
</li>
<li><strong>@OnOpen</strong><ol>
<li>当 websocket 建立连接成功后会触发这个注解修饰的方法，注意它有一个  Session 参数</li>
</ol>
</li>
<li><strong>@OnClose</strong><ol>
<li>当 websocket 建立的连接断开后会触发这个注解修饰的方法，注意它有一个  Session 参数</li>
</ol>
</li>
<li><strong>@OnMessage</strong><ol>
<li>当客户端发送消息到服务端时，会触发这个注解修改的方法，它有一个 String 入参表明客户端传入的值</li>
</ol>
</li>
<li><strong>@OnError</strong><ol>
<li>当 websocket 建立连接时出现异常会触发这个注解修饰的方法，注意它有一个  Session 参数</li>
</ol>
</li>
</ol>
<p>另外一点就是服务端如何发送消息给客户端，服务端发送消息必须通过上面说的 Session 类，通常是在@OnOpen 方法中，当连接成功后把 session 存入 Map 的 value，key 是与 session 对应的用户标识，当要发送的时候通过 key 获得 session 再发送，这里可以通过  <strong>session.getBasicRemote<em>()</em>.sendText<em>(</em>)</strong> 来对客户端发送消息。</p>
<h3 id="2-Spring-封装"><a href="#2-Spring-封装" class="headerlink" title="2. Spring 封装"></a>2. Spring 封装</h3><h4 id="pom-xml-1"><a href="#pom-xml-1" class="headerlink" title="pom.xml"></a>pom.xml</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="HttpAuthHandler"><a href="#HttpAuthHandler" class="headerlink" title="HttpAuthHandler"></a>HttpAuthHandler</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 * *
 *  * blog.coder4j.cn
 *  * Copyright (C) 2016-2019 All Rights Reserved.
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>handler<span class="token punctuation">;</span>

<span class="token keyword">import</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>WsSessionManager<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>CloseStatus<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>TextMessage<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>WebSocketSession<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>TextWebSocketHandler<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version MyWSHandler.java, v 0.1 2019-10-17 17:10 buhao
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpAuthHandler</span> <span class="token keyword">extends</span> <span class="token class-name">TextWebSocketHandler</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * socket 建立成功事件
     *
     * @param session
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterConnectionEstablished</span><span class="token punctuation">(</span>WebSocketSession session<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Object token <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 用户连接成功，放入在线用户缓存</span>
            WsSessionManager<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"用户登录已经失效!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 接收消息事件
     *
     * @param session
     * @param message
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleTextMessage</span><span class="token punctuation">(</span>WebSocketSession session<span class="token punctuation">,</span> TextMessage message<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 获得客户端传来的消息</span>
        String payload <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Object token <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server 接收到 "</span> <span class="token operator">+</span> token <span class="token operator">+</span> <span class="token string">" 发送的 "</span> <span class="token operator">+</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
        session<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextMessage</span><span class="token punctuation">(</span><span class="token string">"server 发送给 "</span> <span class="token operator">+</span> token <span class="token operator">+</span> <span class="token string">" 消息 "</span> <span class="token operator">+</span> payload <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * socket 断开连接时
     *
     * @param session
     * @param status
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterConnectionClosed</span><span class="token punctuation">(</span>WebSocketSession session<span class="token punctuation">,</span> CloseStatus status<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Object token <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 用户退出，移除缓存</span>
            WsSessionManager<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h5><p>通过继承  <strong>TextWebSocketHandler</strong> 类并覆盖相应方法，可以对 websocket 的事件进行处理，这里可以同原生注解的那几个注解连起来看</p>
<ol>
<li><strong>afterConnectionEstablished</strong>  方法是在 socket 连接成功后被触发，同原生注解里的 @OnOpen 功能</li>
<li><strong>afterConnectionClosed  </strong>方法是在 socket 连接关闭后被触发，同原生注解里的 @OnClose 功能</li>
<li><strong>handleTextMessage </strong>方法是在客户端发送信息时触发，同原生注解里的  @OnMessage 功能</li>
</ol>
<h4 id="WsSessionManager"><a href="#WsSessionManager" class="headerlink" title="WsSessionManager"></a>WsSessionManager</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 * *
 *  * blog.coder4j.cn
 *  * Copyright (C) 2016-2019 All Rights Reserved.
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>WebSocketSession<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ConcurrentHashMap<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version WsSessionManager.java, v 0.1 2019-10-22 10:24 buhao
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WsSessionManager</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 保存连接 session 的地方
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> ConcurrentHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> WebSocketSession<span class="token operator">></span> SESSION_POOL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 添加 session
     *
     * @param key
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> WebSocketSession session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 添加 session</span>
        SESSION_POOL<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 删除 session,会返回删除的 session
     *
     * @param key
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> WebSocketSession <span class="token function">remove</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 删除 session</span>
        <span class="token keyword">return</span> SESSION_POOL<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 删除并同步关闭连接
     *
     * @param key
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">removeAndClose</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        WebSocketSession session <span class="token operator">=</span> <span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 关闭连接</span>
                session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// todo: 关闭出现异常处理</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获得 session
     *
     * @param key
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> WebSocketSession <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 获得 session</span>
        <span class="token keyword">return</span> SESSION_POOL<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h5><p>这里简单通过  <strong>ConcurrentHashMap </strong>来实现了一个 session 池，用来保存已经登录的 web socket 的   session。前文提过，服务端发送消息给客户端必须要通过这个 session。</p>
<h4 id="MyInterceptor"><a href="#MyInterceptor" class="headerlink" title="MyInterceptor"></a>MyInterceptor</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 * *
 *  * blog.coder4j.cn
 *  * Copyright (C) 2016-2019 All Rights Reserved.
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>interceptor<span class="token punctuation">;</span>

<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StrUtil<span class="token punctuation">;</span>
<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpUtil<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span>ServerHttpRequest<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span>ServerHttpResponse<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>WebSocketHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>server<span class="token punctuation">.</span>HandshakeInterceptor<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version MyInterceptor.java, v 0.1 2019-10-17 19:21 buhao
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandshakeInterceptor</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 握手前
     *
     * @param request
     * @param response
     * @param wsHandler
     * @param attributes
     * @return
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">beforeHandshake</span><span class="token punctuation">(</span>ServerHttpRequest request<span class="token punctuation">,</span> ServerHttpResponse response<span class="token punctuation">,</span> WebSocketHandler wsHandler<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> attributes<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"握手开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 获得请求参数</span>
        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> paramMap <span class="token operator">=</span> HttpUtil<span class="token punctuation">.</span><span class="token function">decodeParamMap</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String uid <span class="token operator">=</span> paramMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 放入属性域</span>
            attributes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户 token "</span> <span class="token operator">+</span> uid <span class="token operator">+</span> <span class="token string">" 握手成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户登录已失效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 握手后
     *
     * @param request
     * @param response
     * @param wsHandler
     * @param exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterHandshake</span><span class="token punctuation">(</span>ServerHttpRequest request<span class="token punctuation">,</span> ServerHttpResponse response<span class="token punctuation">,</span> WebSocketHandler wsHandler<span class="token punctuation">,</span> Exception exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"握手完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h5><p>通过实现 <strong>HandshakeInterceptor</strong> 接口来定义握手拦截器，注意这里与上面 <strong>Handler</strong> 的事件是不同的，这里是建立握手时的事件，分为握手前与握手后，而   <strong>Handler</strong> 的事件是在握手成功后的基础上建立 socket 的连接。所以在如果把认证放在这个步骤相对来说最节省服务器资源。它主要有两个方法  <strong>beforeHandshake</strong> 与  <strong>afterHandshake </strong>，顾名思义一个在握手前触发，一个在握手后触发。</p>
<h4 id="WebSocketConfig-1"><a href="#WebSocketConfig-1" class="headerlink" title="WebSocketConfig"></a>WebSocketConfig</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 * *
 *  * blog.coder4j.cn
 *  * Copyright (C) 2016-2019 All Rights Reserved.
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>HttpAuthHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>MyInterceptor<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableWebSocket<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebSocketConfigurer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebSocketHandlerRegistry<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version WebSocketConfig.java, v 0.1 2019-10-17 15:43 buhao
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableWebSocket</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketConfigurer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> HttpAuthHandler httpAuthHandler<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> MyInterceptor myInterceptor<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerWebSocketHandlers</span><span class="token punctuation">(</span>WebSocketHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registry
                <span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>httpAuthHandler<span class="token punctuation">,</span> <span class="token string">"myWS"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addInterceptors</span><span class="token punctuation">(</span>myInterceptor<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setAllowedOrigins</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h5><p>通过实现  <strong>WebSocketConfigurer</strong> 类并覆盖相应的方法进行 <strong>websocket</strong> 的配置。我们主要覆盖  <strong>registerWebSocketHandlers</strong> 这个方法。通过向  <strong>WebSocketHandlerRegistry</strong> 设置不同参数来进行配置。其中 <strong>addHandler </strong>方法添加我们上面的写的 ws 的   handler 处理类，第二个参数是你暴露出的 ws 路径。<strong>addInterceptors </strong>添加我们写的握手过滤器。<strong>setAllowedOrigins(“*“) </strong>这个是关闭跨域校验，方便本地调试，线上推荐打开。</p>
<h3 id="3-TIO"><a href="#3-TIO" class="headerlink" title="3. TIO"></a>3. TIO</h3><h4 id="pom-xml-2"><a href="#pom-xml-2" class="headerlink" title="pom.xml"></a>pom.xml</h4><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.t-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tio-websocket-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.5.v20191010-RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="application-xml"><a href="#application-xml" class="headerlink" title="application.xml"></a>application.xml</h4><pre class="line-numbers language-xml"><code class="language-xml">tio:
  websocket:
    server:
      port: 8989
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h5><p>这里只配置了 ws 的启动端口，还有很多配置，可以通过结尾给的链接去寻找</p>
<h4 id="MyHandler"><a href="#MyHandler" class="headerlink" title="MyHandler"></a>MyHandler</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 * *
 *  * blog.coder4j.cn
 *  * Copyright (C) 2016-2019 All Rights Reserved.
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>handler<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>tio<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ChannelContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>tio<span class="token punctuation">.</span>http<span class="token punctuation">.</span>common<span class="token punctuation">.</span>HttpRequest<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>tio<span class="token punctuation">.</span>http<span class="token punctuation">.</span>common<span class="token punctuation">.</span>HttpResponse<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>tio<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>common<span class="token punctuation">.</span>WsRequest<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>tio<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>server<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>IWsMsgHandler<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version MyHandler.java, v 0.1 2019-10-21 14:39 buhao
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHandler</span> <span class="token keyword">implements</span> <span class="token class-name">IWsMsgHandler</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 握手
     *
     * @param httpRequest
     * @param httpResponse
     * @param channelContext
     * @return
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> HttpResponse <span class="token function">handshake</span><span class="token punctuation">(</span>HttpRequest httpRequest<span class="token punctuation">,</span> HttpResponse httpResponse<span class="token punctuation">,</span> ChannelContext channelContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token keyword">return</span> httpResponse<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 握手成功
     *
     * @param httpRequest
     * @param httpResponse
     * @param channelContext
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAfterHandshaked</span><span class="token punctuation">(</span>HttpRequest httpRequest<span class="token punctuation">,</span> HttpResponse httpResponse<span class="token punctuation">,</span> ChannelContext channelContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"握手成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 接收二进制文件
     *
     * @param wsRequest
     * @param bytes
     * @param channelContext
     * @return
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Object <span class="token function">onBytes</span><span class="token punctuation">(</span>WsRequest wsRequest<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> ChannelContext channelContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 断开连接
     *
     * @param wsRequest
     * @param bytes
     * @param channelContext
     * @return
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Object <span class="token function">onClose</span><span class="token punctuation">(</span>WsRequest wsRequest<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> ChannelContext channelContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 接收消息
     *
     * @param wsRequest
     * @param s
     * @param channelContext
     * @return
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Object <span class="token function">onText</span><span class="token punctuation">(</span>WsRequest wsRequest<span class="token punctuation">,</span> String s<span class="token punctuation">,</span> ChannelContext channelContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收文本消息:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="说明-6"><a href="#说明-6" class="headerlink" title="说明"></a>说明</h5><p>这个同上个例子中的 handler 很像，也是通过实现接口覆盖方法来进行事件处理，实现的接口是<strong>IWsMsgHandler</strong>，它的方法功能如下</p>
<ol>
<li>handshake<ol>
<li>在握手的时候触发</li>
</ol>
</li>
<li>onAfterHandshaked<ol>
<li>在握手成功后触发</li>
</ol>
</li>
<li>onBytes<ol>
<li>客户端发送二进制消息触发</li>
</ol>
</li>
<li>onClose<ol>
<li>客户端关闭连接时触发</li>
</ol>
</li>
<li>onText<ol>
<li>客户端发送文本消息触发</li>
</ol>
</li>
</ol>
<h4 id="StudyWebsocketExampleApplication"><a href="#StudyWebsocketExampleApplication" class="headerlink" title="StudyWebsocketExampleApplication"></a>StudyWebsocketExampleApplication</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 * *
 *  * blog.coder4j.cn
 *  * Copyright (C) 2016-2019 All Rights Reserved.
 *
 */</span>

<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>websocket<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>tio<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>starter<span class="token punctuation">.</span>EnableTioWebSocketServer<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableTioWebSocketServer</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudyWebsocketExampleApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>StudyWebsocketExampleApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="说明-7"><a href="#说明-7" class="headerlink" title="说明"></a>说明</h5><p>这个类的名称不重要，它其实是你的 spring boot 启动类，只要记得加上<strong>@EnableTioWebSocketServer</strong>注解就可以了</p>
<h3 id="STOMP"><a href="#STOMP" class="headerlink" title="STOMP"></a>STOMP</h3><h4 id="pom-xml-3"><a href="#pom-xml-3" class="headerlink" title="pom.xml"></a>pom.xml</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="WebSocketConfig-2"><a href="#WebSocketConfig-2" class="headerlink" title="WebSocketConfig"></a>WebSocketConfig</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 * *
 *  * blog.coder4j.cn
 *  * Copyright (C) 2016-2019 All Rights Reserved.
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>simp<span class="token punctuation">.</span>config<span class="token punctuation">.</span>MessageBrokerRegistry<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableWebSocketMessageBroker<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>StompEndpointRegistry<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebSocketMessageBrokerConfigurer<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version WebSocketConfig.java, v 0.1 2019-10-21 16:32 buhao
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableWebSocketMessageBroker</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerStompEndpoints</span><span class="token punctuation">(</span>StompEndpointRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 配置客户端尝试连接地址</span>
        registry<span class="token punctuation">.</span><span class="token function">addEndpoint</span><span class="token punctuation">(</span><span class="token string">"/ws"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAllowedOrigins</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSockJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageBroker</span><span class="token punctuation">(</span>MessageBrokerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 设置广播节点</span>
        registry<span class="token punctuation">.</span><span class="token function">enableSimpleBroker</span><span class="token punctuation">(</span><span class="token string">"/topic"</span><span class="token punctuation">,</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 客户端向服务端发送消息需有/app 前缀</span>
        registry<span class="token punctuation">.</span><span class="token function">setApplicationDestinationPrefixes</span><span class="token punctuation">(</span><span class="token string">"/app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 指定用户发送（一对一）的前缀 /user/</span>
        registry<span class="token punctuation">.</span><span class="token function">setUserDestinationPrefix</span><span class="token punctuation">(</span><span class="token string">"/user/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="说明-8"><a href="#说明-8" class="headerlink" title="说明"></a>说明</h5><ol>
<li>通过实现  <strong>WebSocketMessageBrokerConfigurer</strong> 接口和加上<strong>@EnableWebSocketMessageBroker</strong>来进行 stomp 的配置与注解扫描。</li>
<li>其中覆盖  <strong>registerStompEndpoints</strong> 方法来设置暴露的 stomp 的路径，其它一些跨域、客户端之类的设置。</li>
<li>覆盖  <strong>configureMessageBroker </strong>方法来进行节点的配置。<ol>
<li>其中  <strong>enableSimpleBroker </strong>配置的广播节点，也就是服务端发送消息，客户端订阅就能接收消息的节点。</li>
<li>覆盖<strong>setApplicationDestinationPrefixes </strong>方法，设置客户端向服务端发送消息的节点。</li>
<li>覆盖 <strong>setUserDestinationPrefix</strong> 方法，设置一对一通信的节点。</li>
</ol>
</li>
</ol>
<h4 id="WSController"><a href="#WSController" class="headerlink" title="WSController"></a>WSController</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 * *
 *  * blog.coder4j.cn
 *  * Copyright (C) 2016-2019 All Rights Reserved.
 *
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>model<span class="token punctuation">.</span>RequestMessage<span class="token punctuation">;</span>
<span class="token keyword">import</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>example<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>model<span class="token punctuation">.</span>ResponseMessage<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MessageMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>SendTo<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>simp<span class="token punctuation">.</span>SimpMessagingTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version WSController.java, v 0.1 2019-10-21 17:22 buhao
 */</span>
<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WSController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> SimpMessagingTemplate simpMessagingTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@SendTo</span><span class="token punctuation">(</span><span class="token string">"/topic/hello"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> ResponseMessage <span class="token function">hello</span><span class="token punctuation">(</span>RequestMessage requestMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收消息："</span> <span class="token operator">+</span> requestMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseMessage</span><span class="token punctuation">(</span><span class="token string">"服务端接收到你发的："</span> <span class="token operator">+</span> requestMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sendMsgByUser"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span>
    Object <span class="token function">sendMsgByUser</span><span class="token punctuation">(</span>String token<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        simpMessagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSendToUser</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token string">"/msg"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sendMsgByAll"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span>
    Object <span class="token function">sendMsgByAll</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        simpMessagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"/topic"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"test-stomp.html"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="说明-9"><a href="#说明-9" class="headerlink" title="说明"></a>说明</h5><ol>
<li>通过  <strong>@MessageMapping</strong> 来暴露节点路径，有点类似 <strong>@RequestMapping</strong>。注意这里虽然写的是 hello ，但是我们客户端调用的真正地址是<strong> /app/hello</strong>。 因为我们在上面的 config 里配置了<strong>registry.setApplicationDestinationPrefixes(“/app”)</strong>。</li>
<li><strong>@SendTo</strong>这个注解会把返回值的内容发送给订阅了  <strong>/topic/hello </strong>的客户端，与之类似的还有一个<strong>@SendToUser</strong> 只不过他是发送给用户端一对一通信的。这两个注解一般是应答时响应的，如果服务端主动发送消息可以通过  <strong>simpMessagingTemplate</strong>类的<strong>convertAndSend</strong>方法。注意  <strong>simpMessagingTemplate.convertAndSendToUser(token, “/msg”, msg) </strong>，联系到我们上文配置的 <strong>registry.setUserDestinationPrefix(“/user/“),</strong>这里客户端订阅的是<strong>/user/{token}/msg</strong>,千万不要搞错。</li>
</ol>
<h2 id="Session-共享的问题"><a href="#Session-共享的问题" class="headerlink" title="Session 共享的问题"></a>Session 共享的问题</h2><p>上面反复提到一个问题就是，服务端如果要主动发送消息给客户端一定要用到 session。而大家都知道的是 session 这个东西是不跨 jvm 的。如果有多台服务器，在 http 请求的情况下，我们可以通过把 session 放入缓存中间件中来共享解决这个问题，通过 spring session 几条配置就解决了。但是 web socket  不可以。他的 session 是不能序列化的，当然这样设计的目的不是为了为难你，而是出于对 http 与 web socket 请求的差异导致的。<br>目前网上找到的最简单方案就是通过 redis 订阅广播的形式，主要代码跟第二种方式差不多，你要在本地放个 map 保存请求的 session。也就是说每台服务器都会保存与他连接的 session 于本地。然后发消息的地方要修改，并不是现在这样直接发送，而通过 redis 的订阅机制。服务器要发消息的时候，你通过 redis 广播这条消息，所有订阅的服务端都会收到这个消息，然后本地尝试发送。最后肯定只有有这个对应用户 session 的那台才能发送出去。</p>
<h2 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h2><ol>
<li>如果你在使用 tio，那推荐使用 tio 的集成。因为它已经实现了很多功能，包括上面说的通过 redis 的 session 共享，只要加几个配置就可以了。但是 tio 是半开源，文档是需要收费的。如果没有使用，那就忘了他。</li>
<li>如果你的业务要求比较灵活多变，推荐使用前两种，更推荐第二种 Spring 封装的形式。</li>
<li>如果只是简单的服务器双向通信，推荐 stomp 的形式，因为他更容易规范使用。</li>
</ol>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol>
<li>websocket 在线验证</li>
</ol>
<p>写完服务端代码后想调试，但是不会前端代码怎么办，点<a href="http://coolaf.com/tool/chattest" target="_blank" rel="noopener">这里</a>，这是一个在线的 websocket 客户端，功能完全够我们调试了。</p>
<ol>
<li>stomp 验证</li>
</ol>
<p>这个没找到在线版的，但是网上有很多 demo 可以下载到本地进行调试，也可以通过后文的连接找到。</p>
<ol>
<li>另外由于篇幅有限，并不能放上所有代码，但是测试代码全都上传 gitlab，保证可以正常运行，可以在  <a href="https://github.com/kiwiflydream/study-example/tree/master/study-websocket-example" target="_blank" rel="noopener">这里</a>  找到</li>
</ol>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://www.xncoding.com/2017/07/15/spring/sb-websocket.html" target="_blank" rel="noopener">SpringBoot 系统 - 集成 WebSocket 实时通信</a></li>
<li><a href="https://juejin.im/post/5b7071ade51d45665816f8c0" target="_blank" rel="noopener">WebSocket 的故事（二）—— Spring 中如何利用 STOMP 快速构建 WebSocket 广播式消息模式</a></li>
<li><a href="https://blog.csdn.net/Ouyzc/article/details/79994401" target="_blank" rel="noopener">SpringBoot 集成 WebSocket【基于纯 H5】进行点对点[一对一]和广播[一对多]实时推送</a></li>
<li><a href="https://segmentfault.com/a/1190000016718711" target="_blank" rel="noopener">Spring Framework 参考文档（WebSocket STOMP）</a></li>
<li><a href="https://www.zifangsky.cn/1355.html" target="_blank" rel="noopener">Spring Boot 中使用 WebSocket 总结（一）：几种实现方式详解</a></li>
<li><a href="https://www.jianshu.com/p/161df01cc8af" target="_blank" rel="noopener">Spring Boot 系列 - WebSocket 简单使用</a></li>
<li><a href="https://my.oschina.net/panzi1/blog/3062746" target="_blank" rel="noopener">tio-websocket-spring-boot-starter</a></li>
</ol>
<p>本文地址 <a href="https://blog.coder4j.cn/2019/10/22/yuque-【websocket】spring-boot-集成-websocket-的四种方式/">https://blog.coder4j.cn/2019/10/22/yuque-【websocket】spring-boot-集成-websocket-的四种方式/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[【并发那些事】创建线程的三种方式]]></title>
      <url>https://blog.coder4j.cn/2019/10/16/yuque-%E3%80%90%E5%B9%B6%E5%8F%91%E9%82%A3%E4%BA%9B%E4%BA%8B%E3%80%91%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/119443/1571210975395-ea234d96-3b78-421d-92f5-1efdb5cfb706.jpeg#align=left&amp;display=inline&amp;height=1080&amp;originHeight=1080&amp;originWidth=1920&amp;size=0&amp;status=done&amp;width=1920" alt></p>
<p>创建线程可以说是并发知识中最基础的操作了，JDK 提供的创建线程的方式，如果不包括通过线程池的话，目前有三种形式，它们分别是通过继承 Thread 类，通过实现 Runable 接口，通过 FutureTask。如下图所示</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1571231041090-878dd721-4df8-42f9-b979-a331f1e64ff0.png" alt>下面整理了一下 3 种方法的具体使用与异同。</p>
<h3 id="创建线程的-3-种方法"><a href="#创建线程的-3-种方法" class="headerlink" title="创建线程的 3 种方法"></a>创建线程的 3 种方法</h3><h4 id="1-继承-Thread"><a href="#1-继承-Thread" class="headerlink" title="1. 继承 Thread"></a>1. 继承 Thread</h4><ol>
<li>创建一个类继承 Thread 并覆盖 run 方法</li>
</ol>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String threadName <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程["</span> <span class="token operator">+</span> threadName <span class="token operator">+</span> <span class="token string">"]运行开始,i = "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" time = "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>创建并启动线程</li>
</ol>
<pre class="line-numbers language-java"><code class="language-java">        MyThread myThread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        MyThread myThread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        myThread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myThread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        String threadName <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程["</span> <span class="token operator">+</span> threadName <span class="token operator">+</span> <span class="token string">"]运行开始,i = "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" time = "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>整体流程如下：<br><img src="https://cdn.nlark.com/yuque/__mermaid_v3/e516fbd2b0db871bf82504bdbd9140fe.svg#lake_card_v2=eyJjb2RlIjoiZ3JhcGggVEJcblx0c3RhcnQoKOW8gOWniykpIC0tPiBjcmVhdGVUaHJlYWRb5Yib5bu657un5om_6IeqVGhyZWFk55qE57G7LDxici8-5ZCM5pe26KaG55uWIHJ1biDmlrnms5VdXG5cdGNyZWF0ZVRocmVhZCAtLT4gY3JlYXRlT2JqW-WIm-W7uuWunuS-i11cblx0Y3JlYXRlT2JqIC0tPiBydW5b6LCD55So5a6e5L6L55qEIHN0YXJ0IOaWueazlV0gXG5cdHJ1biAtLT4gZW5kVCgo57uT5p2fKSlcbiIsInR5cGUiOiJtZXJtYWlkIiwiaWQiOiJPSEhtOCIsInVybCI6Imh0dHBzOi8vY2RuLm5sYXJrLmNvbS95dXF1ZS9fX21lcm1haWRfdjMvZTUxNmZiZDJiMGRiODcxYmY4MjUwNGJkYmQ5MTQwZmUuc3ZnIiwiY2FyZCI6ImRpYWdyYW0ifQ==" alt></p>
<p>这里步骤比较简单和清晰</p>
<ol>
<li>创建一个类，这类要继承 Thread</li>
<li>覆盖 Thread 的 run 方法，并在此方法中实现你的多线程任务</li>
<li>创建这个类的实例</li>
<li>调用它的 start() 方法（这里要注意，新手容易直接调用 run 方法，那样只是普通调用，而不多线程调用）</li>
</ol>
<h4 id="2-实现-Runable"><a href="#2-实现-Runable" class="headerlink" title="2. 实现 Runable"></a>2. 实现 Runable</h4><ol>
<li>创建一个类实现 Runable 接口，并覆盖 run 方法</li>
</ol>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyRunable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String threadName <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程["</span> <span class="token operator">+</span> threadName <span class="token operator">+</span> <span class="token string">"]运行开始,i = "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" time = "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>创建类的实现，并将它传给 Thread 的构造函数来创建 Thread</li>
</ol>
<pre class="line-numbers language-java"><code class="language-java">MyRunable myRunable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

String threadName <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程["</span> <span class="token operator">+</span> threadName <span class="token operator">+</span> <span class="token string">"]运行开始,i = "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" time = "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>整体流程如下：<br><img src="https://cdn.nlark.com/yuque/__mermaid_v3/7161a3f6caeee5e7e7576532e2634d71.svg#lake_card_v2=eyJjb2RlIjoiZ3JhcGggVEJcblx0c3RhcnQoKOW8gOWniykpIC0tPiBjcmVhdGVSdW5hYmxlW-WIm-W7uuS4gOS4quWunueOsOS6hiBSdW5hYmxlIOaOpeWPo-eahOexuzxici8-LOW5tuimhuebliBydW4g5pa55rOVXVxuXHRjcmVhdGVSdW5hYmxlIC0tPiBjcmVhdGVPYmpb5Yib5bu6IFJ1bmFibGUg5a6e546w57G75a6e5L6LXVxuXHRjcmVhdGVPYmogLS0-IGNyZWF0ZVRocmVhZFvlsIYgUnVuYWJsZSDlrp7njrDnsbvlrp7kvos8YnIvPuS8oOe7mSBUaHJlYWQg5p6E6YCg5Ye95pWwPGJyLz7liJvlu7ogVGhyZWFkIOWunuS-i11cblx0Y3JlYXRlVGhyZWFkIC0tPiBydW5b6LCD55SoIHN0YXJ0IOaWueazlV1cblx0cnVuIC0tPiBlbmRUKCjnu5PmnZ8pKVxuXHQiLCJ0eXBlIjoibWVybWFpZCIsImlkIjoiM0VxZ2MiLCJ1cmwiOiJodHRwczovL2Nkbi5ubGFyay5jb20veXVxdWUvX19tZXJtYWlkX3YzLzcxNjFhM2Y2Y2FlZWU1ZTdlNzU3NjUzMmUyNjM0ZDcxLnN2ZyIsImNhcmQiOiJkaWFncmFtIn0=" alt>具体步骤如下：</p>
<ol>
<li>创建一个实现了 Runable 接口的类</li>
<li>覆盖 run 方法，并在此方法中实现你的多线程任务</li>
<li>创建 Runable 接口实现类的实例</li>
<li>通过把上步得到的 Runable 接口实现类的实例，传给   Thread 的有参构造函数来创建 Thread 的实例</li>
<li>调用上步得来的 Thread 实例的 start() 方法（这里要注意，新手容易直接调用 run 方法，那样只是普通调用，而不多线程调用）</li>
</ol>
<h4 id="3-通过-FutureTask"><a href="#3-通过-FutureTask" class="headerlink" title="3. 通过 FutureTask"></a>3. 通过 FutureTask</h4><ol>
<li>创建一个实现了 Callable<t> 接口的类，并实现 call 方法 (T 代表你想要的返回值类型)</t></li>
</ol>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyCallerTask</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行任务开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行任务结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>创建并启动线程</li>
</ol>
<pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 创建异步任务</span>
        FutureTask<span class="token operator">&lt;</span>String<span class="token operator">></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCallerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 启动线程</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"其它操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 等待任务执行完，并获得任务执行完的结果</span>
            String result <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>整体流程如下：<br><img src="https://cdn.nlark.com/yuque/__mermaid_v3/b1ffaadf81276165a310c7448b349d77.svg#lake_card_v2=eyJjb2RlIjoiZ3JhcGggVEJcblx0c3RhcnQoKOW8gOWniykpIC0tPiBjcmVhdGVDYWxsYWJsZVvliJvlu7rkuIDkuKrlrp7njrAgY2FsbGFibGUg5o6l5Y-j55qE57G7LDxici8-5bm26KaG55uWIGNhbGwg5pa55rOVXVxuXHRjcmVhdGVDYWxsYWJsZSAtLT4gY3JlYXRlQ09ialvliJvlu7ogY2FsbGFibGUg5a6e546w57G755qE5a6e5L6LXVxuXHRjcmVhdGVDT2JqIC0tPiBjcmVhdGVGT2JqW-mAmui_h-S4iuatpeeahCBjYWxsYWJsZSDlrp7kvoss5Yib5bu6IEZ1dHVyZVRhc2sg5a6e5L6LXVxuXHRjcmVhdGVGT2JqIC0tPiBjcmVhdGVUaHJlYWRb6YCa6L-H5LiK5q2l55qEIEZ1dHVyZVRhc2sg5a6e5L6LLOWIm-W7uiBUaHJlYWQg5a6e5L6LXVxuXHRjcmVhdGVUaHJlYWQgLS0-IHJ1blvosIPnlKggc3RhcnQg5pa55rOVXSBcblx0cnVuIC0tPiAgZ2V0W-iwg-eUqCBGdXR1cmVUYXNrIOWunuS-i-eahCBnZXQg5pa55rOVLOiOt-W-l-i_lOWbnuWAvF1cblx0Z2V0IC0tPiBlbmRUKCjnu5PmnZ8pKVxuXG5cdCIsInR5cGUiOiJtZXJtYWlkIiwiaWQiOiJrejhuWCIsInVybCI6Imh0dHBzOi8vY2RuLm5sYXJrLmNvbS95dXF1ZS9fX21lcm1haWRfdjMvYjFmZmFhZGY4MTI3NjE2NWEzMTBjNzQ0OGIzNDlkNzcuc3ZnIiwiY2FyZCI6ImRpYWdyYW0ifQ==" alt>具体步骤如下：</p>
<ol>
<li>创建一个实现了 <strong>Callable<t></t></strong> 接口的类，这里 T 的类型就是你线程任务想要返回的类型</li>
<li>覆盖 <strong>call</strong> 方法，并在此方法中实现你的多线程任务</li>
<li>创建 <strong>Callable</strong> 接口实现类的实例</li>
<li>通过把上步得到的 <strong>Callable</strong> 接口实现类的实例，传给   <strong>FutureTask</strong> 的有参构造函数来创建 <strong>FutureTask</strong> 的实例</li>
<li>通过把上步得到的  <strong>FutureTask</strong> 实例，传给   <strong>Thread</strong>  的有参构造函数来创建 <strong>Thread</strong> 的实例</li>
<li>调用上步得来的 <strong>Thread</strong> 实例的 <strong>start()</strong> 方法（这里要注意，新手容易直接调用 run 方法，那样只是普通调用，而不多线程调用）</li>
<li>如果你还想获得返回值，需要再调用  <strong>FutureTask </strong>实例的 <strong>get()</strong> 方法（这里要注意，get()会阻塞线程）</li>
</ol>
<h3 id="3-种方法的优缺点"><a href="#3-种方法的优缺点" class="headerlink" title="3 种方法的优缺点"></a>3 种方法的优缺点</h3><p>通过上述的演示代码，可以看出这 3 种方法，其实各有优缺点</p>
<h4 id="复杂程度"><a href="#复杂程度" class="headerlink" title="复杂程度"></a>复杂程度</h4><p>通过代码量与逻辑可以明显感觉出来，第一种直接继承 Thread 最方便，并且其它两种到最后，还是要依赖创建 Thread 才能实现。所以从方便及难易程度来看，可以得到如下结论：<br><em><img src="https://cdn.nlark.com/yuque/__latex/8815a238f7257e13ab9459d03677c3f2.svg#card=math&amp;code=Thread%20%20%3E%20Runable%20%3E%20FutureTask&amp;height=16&amp;width=251" alt></em></p>
<h4 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h4><p>通过演示代码可以看出，只有第一种是通过继承，其它两种是通过实现接口的形式。我们都知道 JAVA 是不允许多继承，但是可以多实现。所以如果使用了第一种方法，就无法再继承别的类了。另外第一种把线程与线程任务冗余在了一起，不利于后期的维护。所以可以得到如下结论：<br><img src="https://cdn.nlark.com/yuque/__latex/e0cbb5af2d7b897d688a44b27e4a42a2.svg#card=math&amp;code=Runable%20%3D%20FutureTask%20%3E%20Thread&amp;height=16&amp;width=251" alt></p>
<h4 id="是否有返回值"><a href="#是否有返回值" class="headerlink" title="是否有返回值"></a>是否有返回值</h4><p>从代码中可以很容易看出，只有通过 FutureTask 的方式才有返回值，另外两种均没有，所以得出如下结论<br><img src="https://cdn.nlark.com/yuque/__latex/7416c5ebf9e2c788548d8ff6ed7a5b8a.svg#card=math&amp;code=FutureTask%20%3E%20Runable%20%3D%20Thread&amp;height=16&amp;width=251" alt></p>
<h3 id="该用哪种方式创建线程"><a href="#该用哪种方式创建线程" class="headerlink" title="该用哪种方式创建线程"></a>该用哪种方式创建线程</h3><p>如果要用到返回值，那不用想，肯定只能使用 FutureTask 的方法。如果对于返回值没有要求，那 Thread 与   Runable 均可，不过，考虑到可扩展性，最好使用 Runable 的形式。不过，话说回来，如果在真正项目中使用，综合考虑，一般还是最推荐通过线程池去创建。</p>
<p>本文地址 <a href="https://blog.coder4j.cn/2019/10/16/yuque-【并发那些事】创建线程的三种方式/">https://blog.coder4j.cn/2019/10/16/yuque-【并发那些事】创建线程的三种方式/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[【随笔】跳出程序员思维看世界]]></title>
      <url>https://blog.coder4j.cn/2019/10/13/yuque-%E3%80%90%E9%9A%8F%E7%AC%94%E3%80%91%E8%B7%B3%E5%87%BA%E7%A8%8B%E5%BA%8F%E5%91%98%E6%80%9D%E7%BB%B4%E7%9C%8B%E4%B8%96%E7%95%8C/</url>
      <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/119443/1570951045907-9a52ecf3-6ca0-4795-9de3-bdf2a8a92c9b.jpeg#align=left&amp;display=inline&amp;height=1080&amp;originHeight=1080&amp;originWidth=1920&amp;size=0&amp;status=done&amp;width=1920" alt></p>
<p>作为程序员，我真的有时候特别想 debug 这个世界。看看这个世界究竟是怎么运行的。因为经常会遇到她的输出跟我断言的不一样，或者我觉得正常的输入，却被她判定为非法。</p>
<p>先分享两件事吧。</p>
<p>第一件事，记得去年考驾照的时候，应该是在练科目三。教练带着我练车，当开到一个地方时，让我停车。然后跟我说：『这里是一个考点，看到前面那棵树没？考试的时候，你把车开到离那棵树大概这么长的距离，停一下车』。我顿时懵逼了，我发现我对『大概这么长』完全没有个概念。我就问教练『大概这么长是多长？』，这下就轮到教练懵逼了，然后，就听到后座早就等的不耐烦排队练车的三个同学跟教练异口同声的对我说『大概这么长就是这么长呀』，同时给我一个看着智障一样的眼神。大概这么长就是这么长，那到底是多长，我彻底凌乱了。那一刻我才发现我和世界不一样。</p>
<p>好在后来教练没有放弃对我的治疗，但我能明显感觉出来，她教我的方式跟其它人不太一样。后面跟我说话的画风都是这样的。『看到前面那棵树没？考试的时候，你把车开到离那棵树半米的距离，停一下车。看到那个花台没？车轮与花台平行，并且保持 20 公分的距离。看到前面那个电线杆没？车头与它的夹角成 60 度的时候，方向盘及时回正』，半米、平行、20 公分、60 度，这些词让我觉得这才是正确的描述。但我还是不明白别人是怎么明白『大概这么长』是多长的。</p>
<p>第二件事，我发现我怎么都学不会做菜。究其原因是什么呢？因为我发现自己完全看不懂菜谱。每次看到里面充斥着类似盐少许、醋若干、酱油适量等这样的描述我都气不打一处来。我如果自己明白适量是多少，我还去看菜谱干什么。我一直觉得写这种菜谱的人，心里一点 B 数都没有。但是呢？跟上面练车的例子一样，别人就是可以通过这些少许、若干、适量的字眼学会做菜，还做的不错。这样看来我可能才是那个没有 B 数的那个。</p>
<p>说到 B 数，我其实觉得这是一个比较粗俗的词汇。但是，我一时又想不到有什么词可以去替换它。如果非要找个词的话，我就想起以前上学打『英雄联盟』的时候，各种坑队友。队友总是能预判出哪个草丛可能有人，哪个地方会有谁来 gank 你，什么时候该到哪里去。他们之间的沟通，一个眼神、一个信号就够了。而我啥也 get 不到，总是送人头，打单机。后来我就问他们是怎么感觉出来，简直像开挂一样，我怎么什么也感觉不到。他们给我的评价是『因为你没有意识』。对，就是『意识』这个词。</p>
<p>为什么我没有意识。可能意识这个东西比较偏感性思维，而我偏理性思维，也可能我天生就是一个意识薄弱的人。但是毫无疑问的是，当我选了理科，当我进入社会成了一名程序员，都一直在弱化意识这个东西。</p>
<p>就拿代码来说，代码里面写的最多的是什么，应该是方法。每个系统是由 N 个类组成，每个类又是由 N 个方法组成。而方法又叫函数，取自数学上的概念。wiki 上是这样描述它的，『<em>函数就像机器或黑箱，给予输入值便产生唯一输出值』。</em>注意唯一这个词，理论上函数的外部输入值一样，最终得到的结果也是一样。我们写代码的时候大部分情况下也是这样，少部分情况下不一致很可能是因为 BUG。这就跟意识没有半毛钱关系了，通常在你输入的情况就能知道他应该有什么样的输出，用程序员的话说就是断言。而如何知道输出断言，不是靠感觉出来的，是你通过逻辑一步一步推导出来的，容不得半点感性思维在里面。</p>
<p>另外一个场景，大家就很熟悉了。就是跟产品经理日常吵架。吵的原因如下，比如加需求了、比如改需求了、再比如需求不明确了。。。无外乎都是围绕着需求的。而其中最伤脑筋的就是需求不明确。</p>
<p>最近几年 AI 非常火，每种职业都有一种，以后会不会被 AI 取代的焦虑，程序员也不例外。以前就看到过这样的帖子，作者表达出类似的担忧。帖子的大概内容就是觉得 AI 发展十分迅速，假以时日，可能以后就没有什么程序员了，只有产品经理。以后开发系统的场景可能是这样的，产品经理登录一个 AI 系统，在系统界面劈哩叭啦把需求输入进去，然后 AI 系统根据输入的需求瞬间生成了一堆代码，组成一个新的系统。看到这个帖子，我瞬间就感受到了那种焦虑，然后我就往下拉，看帖子的回复，当我看到回复里面点赞最高的那一条时，我立刻就释然了。点赞最高的那一条回复是这样说的『这种场景永远也不可能出现，除非有一天，产品经理能把他们的需求说清楚』。🤣</p>
<p>需求是程序员与产品经理之间永恒的话题。每次产品提需求，你都是先抛一个 5W2H 的灵魂拷问。做什么、为什么做、谁来做、什么时候做、在哪里做、怎么做、做多少。有一点不清楚都要找产品经理倒腾清楚，说不清楚大家都别下班。记得，以前我在网上查项目经理与产品经理的区别。知乎上有一个答案让我印象深刻，他说『产品经理着眼于做正确的事情，项目经理着眼于正确的做事情』。项目经理其实代表了程序员这一类群体。这个回答其实很好的阐述两者的关系。产品经理其实更多的是设计出一张正确的图纸，而我们程序员作的是拿着这张图纸正确的去实施。其实，经常我们会自嘲是搬砖的，但是如果从这方面看，还真是这个样子。</p>
<p>产品经理会去想做什么，为什么这么做等问题。而我们可能只是被动去想怎么做。这是现在企业工作高度分工的原因导致的。这本身无可厚非，但是如果长此以往，可能会剥夺我们的思考能力。因为很大一部分思考，产品经理帮你做了，你不清楚的就找产品经理问清楚，缺乏思考的过程，久而久之很容易变成了一个没有感情的代码机器。</p>
<p>上面说的是工作上，生活中更是这样，虽然有本书叫作《人人都是产品经理》，但是现实世界中肯定不是这样。教练跟我说的时候，我抛个 5W2H 问题给她，她可能转身一脚就把我踹下车了。生活中太多不准确、不明确、不科学、不幂等的事情了。只能学的去接受，生活中没有产品经理，先什么都理好了，然后告诉你怎么做，也没有测试同学，帮你一遍遍调试定位问题。我们不能因为工作的分工原因，养成了依赖别人思考的习惯。要学着适当的跳出程序员的思维去看这个世界。</p>
<p>本文地址 <a href="https://blog.coder4j.cn/2019/10/13/yuque-【随笔】跳出程序员思维看世界/">https://blog.coder4j.cn/2019/10/13/yuque-【随笔】跳出程序员思维看世界/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[【随笔】爱因斯坦与科举制]]></title>
      <url>https://blog.coder4j.cn/2019/09/30/yuque-%E3%80%90%E9%9A%8F%E7%AC%94%E3%80%91%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6%E4%B8%8E%E7%A7%91%E4%B8%BE%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>前段时间知乎上有一个热门问题–《<a href="https://www.zhihu.com/question/333199024/answer/746004419" target="_blank" rel="noopener">历史上有哪两件事听起来不在同一个年代实际上却同时发生的?</a>》。点赞最高的是下面这个答案。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1569889057813-ab936263-8827-412b-b6e4-7d9a58c62d5f.png#align=left&amp;display=inline&amp;height=264&amp;name=image.png&amp;originHeight=528&amp;originWidth=1382&amp;size=107427&amp;status=done&amp;width=691" alt="image.png"></p>
<p>答主的答案是『爱因斯坦在他 1905 年的论文《论动体的电动力学》中介绍了其狭义相对论，同年中国废除科举制度。』，很多人留言大呼吃惊，难以相信这是同一年的事情。这个答案其实就是本文的题目。不知道点开这篇文章之前，第一次看到这个题目的你，当时脑海里是什么样的想法。标题党？挂羊头买狗肉？穿越小说？可能各种各样的猜测。但是很难觉得这只是一个简单到不能再简单的事实陈述。</p>
<p>还有另外一个问题，出处我已经找不到了，大致的问题是《美国有哪些细思极恐的地方？》。其中有一个问题让我印象很深。答主的回答是『当我们还处于抗日战争的时候，美国的小朋友就已经在电视上看《猫和老鼠》的动画片了。』</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1570095586223-649fe4cd-64fa-496a-8d81-79233a7a2cbb.png#align=left&amp;display=inline&amp;height=384&amp;name=image.png&amp;originHeight=768&amp;originWidth=1024&amp;size=685044&amp;status=done&amp;width=512" alt="image.png"></p>
<p>这两个问题给人的感受应该是相似的，都是难以置信，不可思议。谁能意识到清光绪三十一年，爱因斯坦发表的相对论。1939 年正处于抗日最艰难的时期，美国小朋友第一次在电视上看到《猫和老鼠》。而这部动画片我小时候还在看，乃至今日，还有很多频道在播放。还有许许多多这样让人感觉历史错位的例子比比皆是，有兴趣的读者可以看<a href="https://kuaibao.qq.com/s/20190319A0LBS100" target="_blank" rel="noopener">这篇文章</a>。</p>
<p>最后一个例子，是我在前不久在语雀上看到了一篇名叫《<a href="https://www.yuque.com/zenany/up/high_productivity_work" target="_blank" rel="noopener">高效工作</a>》的文章，通过这个题目，你或许就可以猜到这是一篇教大家如何提高工作效率的文章。事实也的确如此。但是有一张截图很值得玩味。作者在论述如何通过配置消息提醒来达到更高效的时候，配置了一张如下的截图</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1570096864390-17546218-2d84-4db4-a7d3-46226876e79c.png#align=left&amp;display=inline&amp;height=141&amp;name=image.png&amp;originHeight=282&amp;originWidth=1050&amp;size=134458&amp;status=done&amp;width=525" alt="image.png"></p>
<p>值得玩味的点就是，这是一篇教大家提高工作效率的文章。但是高效的作者竟然还要到 9:30 才能准时回家。不出所料，一看评论就发现有人已经在问了</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1570097068944-e9a21b5c-ad82-4720-aed6-a7d3f7207141.png#align=left&amp;display=inline&amp;height=119&amp;name=image.png&amp;originHeight=238&amp;originWidth=696&amp;size=26475&amp;status=done&amp;width=348" alt="image.png"></p>
<p>相对于这篇文章，作者对于这个问题的回复，才是让我印象最深刻的地方，他的回答如下</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1570097157652-6ab2dbe7-228c-4c3f-9af5-34279adfcbdc.png#align=left&amp;display=inline&amp;height=178&amp;name=image.png&amp;originHeight=356&amp;originWidth=1600&amp;size=79890&amp;status=done&amp;width=800" alt="image.png"></p>
<p>看到这里你或许会很奇怪，这三个例子有什么关系，这篇文章又是在说什么？其实我自己也不知道，前天，也就 2019 年 10 月 01 日的国庆佳节， 我上午看了祖国 70 周年阅兵仪式，下午又去电影院看了《我和我的祖国》，不知道为什么脑海里反复出现的就是上面三个片段。</p>
<p>当时的感受真的是心潮澎湃，热血激昂。短短几十年的光景，中国就像前两个答案一样的，从一个封闭、落后、积贫积弱、一穷二白，谁都能欺负的国家，奇迹般的上升到如今的世界第二，成为了一个没有任何国家能够忽视的民族。而创造这个奇迹的原因是什么呢？我想就那些追随国家大势、紧跟时代脚步、勤劳努力完成自己的责任与义务的每个普通的人们。</p>
<p>1929 年 5 月 4 日，上海《生活周刊》刊发《十问未来之中国》，现在读起来真的是感慨万千</p>
<blockquote>
<ol>
<li>吾国之军权何时归一，分散之军阀何时湮灭？</li>
<li>军人治政之权何时尽除，吾国之行政权何时统于中央？</li>
<li>三十四国治外法权何时可废，吾国之司法何时自主？</li>
<li>由北洋至国府，元首概为军界强人，吾国何时诞生文人执政？</li>
<li>吾国何时举行真正之代议选举，何时举行真正之国民普选？</li>
<li>吾国何时可稻产自丰、谷产自足，不忧饥馑？</li>
<li>吾国何时可自产水笔、灯罩、自行表、人工车等物什，供国人生存之需？</li>
<li>吾国何时可产巨量之钢铁、枪炮、舰船，供给吾国之边防军？</li>
<li>吾国何时可行义务之初级教育、兴十万之中级学堂、育百万之高级学子？</li>
<li>吾国何时可参与寰宇诸强国之角逐，拓势力于境外、通贸易以取利、输文明而和外人？</li>
</ol>
</blockquote>
<p>而用行动回答这些问题的，同样是每个努力而又普通的个体。就像《我和我的祖国》里面一样，镜头对准并不是王侯将相和那些叱咤风云的大人物，而是像林治远、高远、老李。。。这样那些平凡的不能再平凡，可能在历史的长河中并没有留下任何只言片语的普通人。他们就是这些奇迹的一个又一个的载体。</p>
<p>我相信下个十年，中国，一定会成为世界上最强大的国家。中华民族，一定会傲然屹立于世界之巅。历害了我的国！！！</p>
<p>本文地址 <a href="https://blog.coder4j.cn/2019/09/30/yuque-【随笔】爱因斯坦与科举制/">https://blog.coder4j.cn/2019/09/30/yuque-【随笔】爱因斯坦与科举制/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[一个好看又能打的 swagger 工具包]]></title>
      <url>https://blog.coder4j.cn/2019/09/12/yuque-%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%9C%8B%E5%8F%88%E8%83%BD%E6%89%93%E7%9A%84-swagger-%E5%B7%A5%E5%85%B7%E5%8C%85/</url>
      <content type="html"><![CDATA[<h1 id="【Swagger】可能是目前最好的-Spring-Boot-集成-swagger-的项目"><a href="#【Swagger】可能是目前最好的-Spring-Boot-集成-swagger-的项目" class="headerlink" title="【Swagger】可能是目前最好的 Spring Boot 集成 swagger 的项目"></a>【Swagger】可能是目前最好的 Spring Boot 集成 swagger 的项目</h1><p><img src="http://static.coder4j.cn/mweb/15677624942810.jpg#alt=" alt></p>
<p>据说程序员最恨的两件事：一件是别人不写文档，另一件是自己写文档。</p>
<p>可见文档真的是程序员生活中相爱相杀的存在。一方面对于使用者来说，一份<strong>全面、准确</strong>的文档简直就是旅行时的地图，烹饪时的菜谱，通关时的攻略。可以极大的提高对接的效率与尽可能的减少踩坑的概率。然而，一份<strong>全面而又准确</strong>的文档谈何容易。</p>
<p>以接口文档来说，程序员不想写的原因跟写单元测试一样，很大程序上在于它完完全全是一个体力活，毫无创造性可言，枯燥并且乏味。更要紧的它不是一次性写完就可以了，还需要不停的维护，当你的业务变更进而导致代码变动，使得请求值、响应值、接口名称、字段注释、校验信息。。。。。都可能会修改。这个时候接口文档就要同步更新。否则它就会变的不准确了。如果经常对接接口的同学可能深有体会，这不光出现于公司内部，对接外部接口，或提供外部接口不时有这样的问题。</p>
<p><strong>天下苦接口文档久矣</strong>！突然有一天，一个头戴丝袜，气宇轩昂的大侠出现，改变了这个局面。他通过一套自创的注解，就可以自动生成一个在线的接口文档，而且随着代码的变更，它也会跟着变化。极大的减少了人们的工作量。为表达对于这位英雄的敬意，江湖人称–<strong>丝袜哥</strong>(Swagger 音译)。</p>
<p><img src="http://static.coder4j.cn/mweb/15678454841633.jpg#alt=" alt></p>
<p>一个典型的生成后 swagger 的接口文档页面如上图所示。关于丝袜哥的传奇故事，我们今天就说到这里。通过图片其实可以看出原生的界面、功能还是比较有限的。首先没有一个登录界面，基本上在使用时没几个人改 swagger 的默认地址。所以别人发现你的接口地址很容易访问到你的 swagger 页面，这就带来了安全风险。另一点就是这个界面，怎么说呢，至少不是我喜欢的款。还是一点就是直接对接起 Spring Boot 还是有点麻烦的，各种 bean 要手动配置，一点也不 Spring Boot。</p>
<p>凡此种种，终于有一天。在 github 闲逛时，发现了一个不错的 swagger 的工具包，一用就爱不释手。<a href="https://github.com/battcn/swagger-spring-boot" target="_blank" rel="noopener">项目地址</a>下面就演示一下如何使用。</p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.battcn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.5-RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>2.1.5-RELEASE</code>是当前的最新版，后续版本大家可以在项目地址上去看。</p>
<h3 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h3><pre class="line-numbers language-yml"><code class="language-yml">spring:
  swagger:
    enabled: true
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>配置结束了，如果你只想用最基本的 swagger 的功能的话。访问<code>http://{host:port}/swagger-ui.html</code>后会有如下界面</p>
<p><img src="http://static.coder4j.cn/mweb/15679291774614.jpg#alt=" alt></p>
<p>该项目的 UI 是使用 Vue 重写的较原版无论是颜值还是功能都有很大的提升。比如添加了搜索、接口统计等很多实用功能。如果我们想开启登录验证，防止接口文档被外部人员访问到，只要添加三条配置就可以了。</p>
<pre class="line-numbers language-yml"><code class="language-yml">spring:
  swagger:
    enabled: true
    security:
      filter-plugin: true
      username: kiwi
      password: 123456
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们再次访问接口页面，界面被拦截了，变成了如下登录界面。</p>
<p><img src="http://static.coder4j.cn/mweb/15679297752970.jpg#alt=" alt></p>
<p>输入配置的账号与密码，又见到了熟悉的接口页面了。</p>
<h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>是不是感觉很方便，很 easy。其实还有很多功能，因为篇幅有限，更重要是作者本身已经写了很好的使用文档，没有必要在本文再一一列举出来（好吧，其实是我懒），大家可以到<a href="https://github.com/battcn/swagger-spring-boot" target="_blank" rel="noopener">项目页面</a>接着学习。另外在作者的页面可以看到他本人的博客地址，是一个宝藏博主哦！</p>
<p>本文地址 <a href="https://blog.coder4j.cn/2019/09/12/yuque-一个好看又能打的-swagger-工具包/">https://blog.coder4j.cn/2019/09/12/yuque-一个好看又能打的-swagger-工具包/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[碎碎念-02(20190511)]]></title>
      <url>https://blog.coder4j.cn/2019/05/04/yuque-%E7%A2%8E%E7%A2%8E%E5%BF%B5-02-20190511/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>如果想要更好的阅读体验，请点击文章末尾的阅读原文跳转语雀阅读。</strong></p>
</blockquote>
<h4 id="1-动物世界"><a href="#1-动物世界" class="headerlink" title="1. 动物世界"></a>1. 动物世界</h4><p>for  <a href="https://weibo.com/tv/v/Hs374AAhp?fid=1034:4366804517065517" target="_blank" rel="noopener">weibo</a><br><a href="https://www.yuque.com/buhao/blog/fty1nx?_lake_card=%7B%22status%22%3A%22done%22%2C%22name%22%3A%22000i7wVglx07tueoNRgQ01041200oGDw0E010.mp4%22%2C%22size%22%3A5883770%2C%22percent%22%3A0%2C%22id%22%3A%22Byr4b%22%2C%22videoId%22%3A%229b1a1b6e473c4b70bc018a8bc9a6227d%22%2C%22coverUrl%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F119443%2F1556942614120-65b9236d-ef77-4c84-9676-ad5fa15ddcda.jpeg%22%2C%22aliyunVideoSrc%22%3Anull%2C%22taobaoVideoId%22%3A%22225173898479%22%2C%22uploaderId%22%3A119443%2C%22authKey%22%3A%22YXBwX2tleT04MDAwMDAwMTImYXV0aF9pbmZvPXsidGltZXN0YW1wRW5jcnlwdGVkIjoiYjE4NTI2ZThkMjRkZTJiYjczMmM5OTRiZTNkOTBjNzkifSZkdXJhdGlvbj0mdGltZXN0YW1wPTE1NTc2NDQzODY%3D%22%2C%22docUrl%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fbuhao%2Fblog%2Ffty1nx%22%2C%22card%22%3A%22video%22%7D#Byr4b" target="_blank" rel="noopener"><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/119443/1556942614120-65b9236d-ef77-4c84-9676-ad5fa15ddcda.jpeg?x-oss-process=image/resize,h_450" alt="000i7wVglx07tueoNRgQ01041200oGDw0E010.mp4 (5.61MB)"></a></p>
<h4 id="2-时间换收入"><a href="#2-时间换收入" class="headerlink" title="2. 时间换收入"></a>2. 时间换收入</h4><p>for <a href="https://www.yuque.com/ruanyf/share/issue-50" target="_blank" rel="noopener">阮一峰</a></p>
<blockquote>
<p>前几天，我听一个广播节目。主持人问，现在很多人开网约车，这样能赚多少钱，能够赚到大钱吗？<br>这个问题很容易回答，答案就是不能。出租车司机的收入，主要由营业时间的长短决定。基本上，一天开 12 个小时，就是比开 6 个小时，收入高出一倍。每天只有 24 个小时，因此收入存在上限，不可能偏离平均水平很远。<br>出租车是“时间换收入”的典型行业，投入的时间越多，收入越高，在家休息就没收入。很多行业都属于“时间换收入”，所有此类行业都赚不到大钱。因为你能用来交换的时间是有限的，而且进入中年以后，你就拿不出更多的时间来交换。开出租车赚零花钱，或者作为短期过渡，这是没问题的，但作为终身职业是很糟糕的。<br>我觉得，越来越多的程序员正在落入这个陷井，用编码的时间换取收入。只有不停地做项目，才能拿到钱。项目做得越多，收入越高。这个项目开发完了，公司又让他去干下一个项目。 忙了好几年，项目完成了一大堆，但是自己什么也没留下，以后的收入还要取决于从零开始的新项目。这样的话，你跟出租车司机有何两样，哪一天你不写代码了，不是照样没收入。<br>那些赚到大钱的人，没有一个是靠时间换取收入的。他们要么通过积累资产致富，要么购买他人的时间，为自己创造财富。你应该警惕，不要落入“时间换取收入”的陷井，不要只顾着为别人生产代码，而要注意积累自己的资产，以及适时开展属于自己的业务。</p>
</blockquote>
<h4 id="3-积累资产"><a href="#3-积累资产" class="headerlink" title="3. 积累资产"></a>3. 积累资产</h4><p>for <a href="https://www.yuque.com/ruanyf/share/issue-45" target="_blank" rel="noopener">阮一峰</a></p>
<blockquote>
<p>美国科幻小说大师阿西莫夫，写过一本回忆录《人生舞台》。他在里面提到，成名后，他的收入一年比一年高，完稿时的 1990 年是收入最高的一年。<br>很不幸，1992 年他就去世了，享年 72 岁。据他的妻子说，那一年的收入比 1990 年还要高。也就是说，去世时，他达到了一生最高的年收入。我当时心想，这种收入模式真是太好了。老了以后，收入反而更多了，根本不用为养老发愁。<br>大多数人的收入模式恰恰相反：工作时达到收入的高峰，退休停止工作以后，收入就逐渐减少，人到老年，手头越来越紧。所以，大多数人为了养老，年轻时必须足够储蓄。要是年轻就背负了很多房贷和卡债，老了以后，往往会陷入困境。<br>为什么阿西莫夫老了还有大量收入，其他大多数人就没有呢？原因是普通人的收入，来自出卖自己的时间，老了不工作，自然就没收入了。但是，阿西莫夫的收入来自于他的书，这些著作一再重版，为他带来了一年比一年多的版税收入。再加上，他勤奋写作，每年都有新书问世，自然就收入高了。<br>这件事的启示就是，如果退休以后，还想有稳定的收入保障，最好的方式就是你必须拥有资产。在阿西莫夫的例子里，就是他拥有版权，版权就是一种产生收入的资产。其他类型的资产包括房产、专利、股权等等。总之，年轻时就必须明确，你的工作目标不完全是高收入，更重要的是必须积累资产。</p>
</blockquote>
<h4 id="4-衡水出海"><a href="#4-衡水出海" class="headerlink" title="4. 衡水出海"></a>4. 衡水出海</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1557029135875-5712be0c-c7b4-4e1f-913c-45668ef1b29a.png#align=left&amp;display=inline&amp;height=960&amp;name=image.png&amp;originHeight=1920&amp;originWidth=1080&amp;size=694194&amp;status=done&amp;width=540" alt="image.png"></p>
<h4 id="5-mp4-的起始时间"><a href="#5-mp4-的起始时间" class="headerlink" title="5. mp4 的起始时间"></a>5. mp4 的起始时间</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1557029183279-7b320734-2646-4faf-bb68-7685bd2e47ec.png#align=left&amp;display=inline&amp;height=645&amp;name=image.png&amp;originHeight=1290&amp;originWidth=1080&amp;size=443453&amp;status=done&amp;width=540" alt="image.png"></p>
<h4 id="6-越独立越薄情"><a href="#6-越独立越薄情" class="headerlink" title="6. 越独立越薄情"></a>6. 越独立越薄情</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1557029217211-e1df264b-ce72-416d-b0a8-74749bf753f0.png#align=left&amp;display=inline&amp;height=153&amp;name=image.png&amp;originHeight=306&amp;originWidth=596&amp;size=159999&amp;status=done&amp;width=298" alt="image.png"></p>
<h4 id="7-滴滴司机"><a href="#7-滴滴司机" class="headerlink" title="7. 滴滴司机"></a>7. 滴滴司机</h4><p>from <a href="https://wx.zsxq.com/dweb/#/index/8424258282" target="_blank" rel="noopener">知识星球</a><br><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1557029269491-3b6c6f91-ba65-4fc8-885a-5f13d0f0532f.png#align=left&amp;display=inline&amp;height=1380&amp;name=image.png&amp;originHeight=2760&amp;originWidth=990&amp;size=643838&amp;status=done&amp;width=495" alt="image.png"></p>
<h4 id="8-信息流广告"><a href="#8-信息流广告" class="headerlink" title="8. 信息流广告"></a>8. 信息流广告</h4><p>from <a href="https://wx.zsxq.com/dweb/#/index/224555455221" target="_blank" rel="noopener">知识星球</a></p>
<blockquote>
<p>问：百家号页面很干净，只有右下角一个广告位，还要分钱给作者，百度不是亏死了？<br>答：说一个很颠覆大家认知的，也是最近了解了广告行业才知道的事情。<br>信息流的广告位是最值钱的，因为转化效果最好，大多数广告主投放，都是投信息流广告，比如头条信息流、百度信息流等等。<br>详情页的广告位更便宜，但是转化效果没那么好，所以广告主投放的比较少。<br>对于头条和百度来说，信息流广告位才是最赚钱的，然而鸡贼的是，他们不会分信息流的钱给你，只会分内页的钱给你。#广告知识</p>
</blockquote>
<h4 id="9-SCQA"><a href="#9-SCQA" class="headerlink" title="9. SCQA"></a>9. SCQA</h4><p>from <a href="https://mp.weixin.qq.com/s/j3-g1t1R9wF9RlhlN387ew" target="_blank" rel="noopener">公众号</a></p>
<blockquote>
<p>SCQA 叙事模式各个字母是指：<br>S ：Situation(背景)<br>C ：Complication(冲突)</p>
<p>Q ：Question(疑问)</p>
<p>A ：Answer(解答)</p>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>SCQA 叙事模式能给读者或者观众一个环境、背景，让其置身其中，明白下面要关注的是什么，需要做的是什么，这样他才能更好地去接收你之后的信息。</p>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>比如说一个故事是这样讲的：</p>
</blockquote>
<p>&gt;</p>
<p>&gt;</p>
<blockquote>
<p>“王子说服了国王，迎娶了邻国的公主，他们过上了幸福美满的生活。几个月前，王子跟女巫进行了旷世的决斗，最终杀死了女巫。在这之前，王子每天辛苦练习剑法，用剑的能力不断提升，因为之前这个女巫不允许王子和公主的恋爱，这让王子想要除掉这个女巫。对了，这个故事发生在一个古老的王国。”</p>
<p>使用 SCQA 模式之后，故事会变得清晰、条例，听众会觉得更有吸引力：</p>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>S: </strong>从前有一个古老的王国，王子爱上了邻国公主。</p>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>C:</strong>  但是邪恶的女巫不允许王子和公主在一起。</p>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Q:</strong>  那怎么办？王子想了各种办法：</p>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>A:</strong></p>
<p>首先，王子努力提高自己的剑术，获得了和女巫决斗的能力</p>
<p>然后，他用激将法刺激了女巫，并与她决战，终于杀死了女巫</p>
<p>最后，他说服了国王并最终迎娶了邻国的公主</p>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>将 SCQA 运用到技术方案讲解也是一样的，先描述背景，然后说下遇到什么困难，关键是提出好问题让人家思考，最后亮出自己推荐的解决方案，思路顺畅而自然。</p>
</blockquote>
<h4 id="10-高考移民"><a href="#10-高考移民" class="headerlink" title="10. 高考移民"></a>10. 高考移民</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1557644336231-6afb4500-48d7-4709-9a1a-05c1af1369d6.png#align=left&amp;display=inline&amp;height=447&amp;name=image.png&amp;originHeight=893&amp;originWidth=1038&amp;size=754254&amp;status=done&amp;width=519" alt="image.png"></p>
<h4 id="11-让你强大的，终将埋葬你。"><a href="#11-让你强大的，终将埋葬你。" class="headerlink" title="11.  让你强大的，终将埋葬你。"></a>11.  让你强大的，终将埋葬你。</h4><p>from <a href="https://juejin.im/entry/5cd67b5bf265da039d32a138" target="_blank" rel="noopener">掘金</a></p>
<blockquote>
<p>让你强大的，终将埋葬你。</p>
</blockquote>
<h4 id="12-流感"><a href="#12-流感" class="headerlink" title="12. 流感"></a>12. 流感</h4><p>from  尤瓦尔•赫拉利</p>
<blockquote>
<p>AI 眼里的爱情，跟一场流感没有区别。</p>
</blockquote>
<p>本文地址 <a href="https://blog.coder4j.cn/2019/05/04/yuque-碎碎念-02-20190511/">https://blog.coder4j.cn/2019/05/04/yuque-碎碎念-02-20190511/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[JMH 简单入门]]></title>
      <url>https://blog.coder4j.cn/2019/05/04/yuque-JMH-%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2018/png/119443/1545838278500-0e333b6c-2ca5-4a0a-a7d6-59799f11ff91.png#align=left&amp;display=inline&amp;height=480&amp;originHeight=480&amp;originWidth=720&amp;status=done&amp;width=720" alt></p>
<h2 id="什么是-JMH"><a href="#什么是-JMH" class="headerlink" title="什么是 JMH"></a>什么是 JMH</h2><p>JMH 是 Java Microbenchmark Harness 的缩写。中文意思大致是 “JAVA 微基准测试套件”。首先先明白什么是“基准测试”。百度百科给的定义如下：</p>
<blockquote>
<p><a href="https://baike.baidu.com/item/%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/5876292" target="_blank" rel="noopener">基准测试</a>是指通过设计科学的测试方法、测试工具和测试系统，实现对一类测试对象的某项性能指标进行定量的和可对比的测试。</p>
</blockquote>
<p>可以简单的类比成我们电脑常用的鲁大师，或者手机常用的跑分软件安兔兔之类的性能检测软件。都是按一定的基准或者在特定条件下去测试某一对象的的性能，比如显卡、IO、CPU 之类的。</p>
<h2 id="为什么要使用-JMH"><a href="#为什么要使用-JMH" class="headerlink" title="为什么要使用 JMH"></a>为什么要使用 JMH</h2><p>基准测试的特质有如下几种：</p>
<blockquote>
<p><strong>①、可重复性</strong>：可进行重复性的测试，这样做有利于比较每次的测试结果，得到性能结果的长期变化趋势，为系统调优和上线前的容量规划做参考。</p>
<p><strong>②、可观测性</strong>：通过全方位的监控（包括测试开始到结束，执行机、服务器、数据库），及时了解和分析测试过程发生了什么。</p>
<p><strong>③、可展示性</strong>：相关人员可以直观明了的了解测试结果（web 界面、仪表盘、折线图树状图等形式）。</p>
<p><strong>④、真实性</strong>：测试的结果反映了客户体验到的真实的情况（真实准确的业务场景+与生产一致的配置+合理正确的测试方法）。</p>
<p><strong>⑤、可执行性</strong>：相关人员可以快速的进行测试验证修改调优（可定位可分析）。</p>
</blockquote>
<p>可见要做一次符合特质的基准测试，是很繁琐也很困难的。外界因素很容易影响到最终的测试结果。特别对于 JAVA 的基准测试。</p>
<p>有些文章会告诉我们 JAVA 是 C++编写的，一般来说 JAVA 编写的程序不太可能比 C++编写的代码运行效率更好。但是 JAVA 在某些场景的确要比 C++运行的更高效。不要觉得天方夜谭。其实 JVM 随着这些年的发展已经变得很智能，它会在运行期间不断的去优化。</p>
<p>这对于我们程序来说是好事，但是对于性能测试就头疼的。你运行的次数与时间不同可能获得的结果也不同，很难获得一个比较稳定的结果。对于这种情况，有一个解决办法就是大量的重复调用，并且在真正测试前还要进行一定的预热，使结果尽可能的准确。</p>
<p>除了这些，对于结果我们还需要一个很好的展示，可以让我们通过这些展示结果判断性能的好坏。</p>
<p><strong>而这些 JMH 都有！</strong>😊</p>
<h2 id="如何使用-JMH"><a href="#如何使用-JMH" class="headerlink" title="如何使用 JMH"></a>如何使用 JMH</h2><p>下面我们以字符串拼接的几种方法为例子使用 JMH 做基准测试。</p>
<h3 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1. 导入依赖"></a>1. 导入依赖</h3><blockquote>
<p>JMH 是 JDK9 自带的，如果你是 JDK9 之前的版本也可以通过导入 openjdk</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openjdk.jmh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jmh-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openjdk.jmh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jmh-generator-annprocess<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-目录结构"><a href="#2-目录结构" class="headerlink" title="2. 目录结构"></a>2. 目录结构</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">.</span>
├── pom.xml
└── src
   ├── main
   │  └── java
   │     └── cn
   │        └── coder4j
   │           └── study
   │              └── demo
   │                 └── jmh
   │                    ├── benchmark
   │                    │  └── StringConnectBenchmark.java
   │                    └── runner
   │                       └── StringBuilderRunner.java
   └── <span class="token function">test</span>
      └── java
         └── cn
            └── coder4j
               └── study
                  └── demo
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3-具体代码"><a href="#3-具体代码" class="headerlink" title="3. 具体代码"></a>3. 具体代码</h3><ul>
<li>StringBuilderRunner.java</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * coder4j.cn
 * Copyright (C) 2013-2018 All Rights Reserved.
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">;</span>

<span class="token keyword">import</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>benchmark<span class="token punctuation">.</span>StringConnectBenchmark<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Mode<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>Runner<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunnerException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span>Options<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span>OptionsBuilder<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version StringBuilderRunner.java, v 0.1 2018-12-25 09:53 buhao
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderRunner</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token keyword">throws</span> RunnerException <span class="token punctuation">{</span>
        Options opt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">// 导入要测试的类</span>
                <span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span>StringConnectBenchmark<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">// 预热5轮</span>
                <span class="token punctuation">.</span><span class="token function">warmupIterations</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">// 度量10轮</span>
                <span class="token punctuation">.</span><span class="token function">measurementIterations</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">mode</span><span class="token punctuation">(</span>Mode<span class="token punctuation">.</span>Throughput<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">forks</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>StringConnectBenchmark.java</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * coder4j.cn
 * Copyright (C) 2013-2018 All Rights Reserved.
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>study<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>benchmark<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Benchmark<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version StringConnectBenchmark.java, v 0.1 2018-12-25 09:29 buhao
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringConnectBenchmark</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 字符串拼接之 StringBuilder 基准测试
     */</span>
    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 字符串拼接之直接相加基准测试
     */</span>
    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStringAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 字符串拼接之String Concat基准测试
     */</span>
    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStringConcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 字符串拼接之 StringBuffer 基准测试
     */</span>
    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 字符串拼接之 StringFormat 基准测试
     */</span>
    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStringFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s%s%s"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4-运行结果"><a href="#4-运行结果" class="headerlink" title="4. 运行结果"></a>4. 运行结果</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Run progress: 93.33% complete, ETA 00:00:15</span>
<span class="token comment" spellcheck="true"># Fork: 3 of 3</span>
objc<span class="token punctuation">[</span>12440<span class="token punctuation">]</span>: Class JavaLaunchHelper is implemented <span class="token keyword">in</span> both /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/bin/java <span class="token punctuation">(</span>0x106a7d4c0<span class="token punctuation">)</span> and /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/libinstrument.dylib <span class="token punctuation">(</span>0x106af74e0<span class="token punctuation">)</span>. One of the two will be used. Which one is undefined.
<span class="token comment" spellcheck="true"># Warmup Iteration   1: 747281.755 ops/s</span>
<span class="token comment" spellcheck="true"># Warmup Iteration   2: 924220.081 ops/s</span>
<span class="token comment" spellcheck="true"># Warmup Iteration   3: 1129741.585 ops/s</span>
<span class="token comment" spellcheck="true"># Warmup Iteration   4: 1135268.541 ops/s</span>
<span class="token comment" spellcheck="true"># Warmup Iteration   5: 1062994.936 ops/s</span>
Iteration   1: 1142834.160 ops/s
Iteration   2: 1143207.472 ops/s
Iteration   3: 1178363.827 ops/s
Iteration   4: 1156408.897 ops/s
Iteration   5: 1123123.829 ops/s
Iteration   6: 1086029.992 ops/s
Iteration   7: 1108795.147 ops/s
Iteration   8: 1125522.731 ops/s
Iteration   9: 1120021.744 ops/s
Iteration  10: 1119916.181 ops/s


Result <span class="token string">"cn.coder4j.study.demo.jmh.benchmark.StringConnectBenchmark.testStringFormat"</span><span class="token keyword">:</span>
  1132633.183 ±<span class="token punctuation">(</span>99.9%<span class="token punctuation">)</span> 16252.303 ops/s <span class="token punctuation">[</span>Average<span class="token punctuation">]</span>
  <span class="token punctuation">(</span>min, avg, max<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>1082146.355, 1132633.183, 1182418.648<span class="token punctuation">)</span>, stdev <span class="token operator">=</span> 24325.684
  CI <span class="token punctuation">(</span>99.9%<span class="token punctuation">)</span>: <span class="token punctuation">[</span>1116380.879, 1148885.486<span class="token punctuation">]</span> <span class="token punctuation">(</span>assumes normal distribution<span class="token punctuation">)</span>


<span class="token comment" spellcheck="true"># Run complete. Total time: 00:03:57</span>

Benchmark                                  Mode  Cnt          Score         Error  Units
StringConnectBenchmark.testStringAdd      thrpt   30   63728919.269 ±  906608.141  ops/s
StringConnectBenchmark.testStringBuffer   thrpt   30  112423521.098 ± 1157072.848  ops/s
StringConnectBenchmark.testStringBuilder  thrpt   30  110558976.274 ±  654163.111  ops/s
StringConnectBenchmark.testStringConcat   thrpt   30   44820009.200 ±  524305.660  ops/s
StringConnectBenchmark.testStringFormat   thrpt   30    1132633.183 ±   16252.303  ops/s
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="5-代码解析"><a href="#5-代码解析" class="headerlink" title="5. 代码解析"></a>5. 代码解析</h3><ul>
<li>StringBuilderRunner</li>
</ul>
<p>这个 runner 类的作用，就是启动基准测试。</p>
<p>JMH 通常有两种方式启动，一种就是通过命令行使用 maven 命令执行。这种适合对于大型基准测试，像那些要运行很多很多次，并且运行的时间也很长的情况下。你可以直接打个 jar 包，发到服务器上，敲个命令就不用管它，过几十分钟、几小时、几天的时间再回来看结果。</p>
<p>但是很多情况下，我们只是想简单测试一个小功能，没必要还要搞台服务器去跑。所以 JMH 还提供了一种通过 Main 方法运行的方式，就如上面代码所示。</p>
<p>在 Main 方法中，通过 org.openjdk.jmh.runner.Runner 类去运行 org.openjdk.jmh.runner.options.Options 实例即可。这里的重点在于 Options 对象的构建。官方提供了一个 OptionsBuilder 对象去构建。这个 Builder 对象是流式的。它的常用方法及对应的注解形式如下：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>参数</th>
<th>作用</th>
<th>对应注解</th>
</tr>
</thead>
<tbody>
<tr>
<td>include</td>
<td>要运行基准测试类的简单名称 eg. StringConnectBenchmark</td>
<td>指定要运行的基准测试类</td>
<td>-</td>
</tr>
<tr>
<td>exclude</td>
<td>不要运行基准测试类的简单名称 eg. StringConnectBenchmark</td>
<td>指定不要运行的基准测试类</td>
<td>-</td>
</tr>
<tr>
<td>warmupIterations</td>
<td>预热的迭代次数</td>
<td>指定预热的迭代次数</td>
<td>@Warmup</td>
</tr>
<tr>
<td>warmupBatchSize</td>
<td>预热批量的大小</td>
<td>指定预热批量的大小</td>
<td>@Warmup</td>
</tr>
<tr>
<td>warmupForks</td>
<td>预热模式：INDI，BULK，BULK_INDI</td>
<td>指定预热模式</td>
<td>@Warmup</td>
</tr>
<tr>
<td>warmupMode</td>
<td>预热的模式</td>
<td>指定预热的模式</td>
<td>@Warmup</td>
</tr>
<tr>
<td>warmupTime</td>
<td>预热的时间</td>
<td>指定预热的时间</td>
<td>@Warmup</td>
</tr>
<tr>
<td>measurementIterations</td>
<td>测试的迭代次数</td>
<td>指定测试的迭代次数</td>
<td>@Measurement</td>
</tr>
<tr>
<td>measurementBatchSize</td>
<td>测试批量的大小</td>
<td>指定测试批量的大小</td>
<td>@Measurement</td>
</tr>
<tr>
<td>measurementTime</td>
<td>测试的时间</td>
<td>指定测试的时间</td>
<td>@Measurement</td>
</tr>
<tr>
<td>mode</td>
<td>测试模式： Throughput（吞吐量）， AverageTime（平均时间），SampleTime（在测试中，随机进行采样执行的时间），SingleShotTime（在每次执行中计算耗时），All</td>
<td>指定测试的模式</td>
<td>@BenchmarkMode</td>
</tr>
</tbody>
</table>
<ul>
<li>StringConnectBenchmark</li>
</ul>
<p>这个就是真正执行基准测试的类，这个类很像单元测试的类，每个测试方法中写上你要执行的测试代码。只不过这里把@Test 换成了@Benchmark 注解。</p>
<p>而加上了这个就指明这个方法是基准测试方法，当 Runner 类的 Main 方法运行时，它就会找这些被注解修饰的方法，再按指定的规则去进行基准测试。当然可能不同的方法有时候需要不同的规则，这个时间可以通过上面方法对应的注解形式去单独指定某个方法的规则即可。</p>
<h3 id="6-结果解析"><a href="#6-结果解析" class="headerlink" title="6. 结果解析"></a>6. 结果解析</h3><p>结果主要分成三个部分。</p>
<p>第一部分以 “#Warmup Iteration。。。。”这种形式的内容。这表明每次预热迭代的结果。</p>
<p>另一部分以“Iteration。。。”形式内容，这表明每次基准测试迭代的结果。</p>
<p>最后一部分以“Result。。。”形式的内容，这就是所有迭代跑完最终的结果。第一段结果告诉了我们最大值、最小值、平均值的信息。</p>
<p>而最最后的表格结构的信息才是我们分析的重点，但是它输出的结果有点错位，刚开始我一直在纠结 Error 是 ±  906608.141 代表什么意思，google 了一圈发现，Error 它其实什么都没输出，而且 Score 是 63728919.269 ±  906608.141。我用表格排板了一下，解释如下：</p>
<table>
<thead>
<tr>
<th>Benchmark</th>
<th>Mode</th>
<th>Cnt</th>
<th>Score</th>
<th>Error</th>
<th>Units</th>
</tr>
</thead>
<tbody>
<tr>
<td>基准测试执行的方法</td>
<td>测试模式，这里是吞吐量</td>
<td>运行多少次</td>
<td>分数</td>
<td>错误</td>
<td>单位</td>
</tr>
<tr>
<td>StringConnectBenchmark.testStringAdd</td>
<td>thrpt</td>
<td>30</td>
<td>63728919.269 ±  906608.141</td>
<td></td>
<td>ops/s</td>
</tr>
<tr>
<td>StringConnectBenchmark.testStringBuffer</td>
<td>thrpt</td>
<td>30</td>
<td>112423521.098 ± 1157072.848</td>
<td></td>
<td>ops/s</td>
</tr>
<tr>
<td>StringConnectBenchmark.testStringBuilder</td>
<td>thrpt</td>
<td>30</td>
<td>110558976.274 ±  654163.111</td>
<td></td>
<td>ops/s</td>
</tr>
<tr>
<td>StringConnectBenchmark.testStringConcat</td>
<td>thrpt</td>
<td>30</td>
<td>44820009.200 ±  524305.660</td>
<td></td>
<td>ops/s</td>
</tr>
<tr>
<td>StringConnectBenchmark.testStringFormat</td>
<td>thrpt</td>
<td>30</td>
<td>1132633.183 ±   16252.303</td>
<td></td>
<td>ops/s</td>
</tr>
</tbody>
</table>
<p>结论：</p>
<p>StringBuffer  &gt;= StringBuilder &gt; String 直接相加 &gt; StringConcat &gt;&gt; StringFormat</p>
<p>可见 StringBuffer 与 StringBuilder 大致性能相同，都比直接相加高几个数量级，而且直接相加与 Concat 方法相加差不多。但是这里不管哪种都比 StringFormat 高 N 个数量级。<strong>所以 String 的 Format 方法一定要慎用、不用、禁用！！！</strong></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><p><a href="http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/" target="_blank" rel="noopener">openjdk 官方 DEMO</a></p>
</li>
<li><p><a href="https://github.com/Childe-Chen/goodGoodStudy/tree/master/src/main/java/com/cxd/benchmark" target="_blank" rel="noopener">openjdk 官方 DEMO （翻译版）</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/imyalost/p/9630843.html" target="_blank" rel="noopener">浅谈基准测试</a></p>
</li>
<li><p><a href="http://www.blogjava.net/qileilove/archive/2012/07/05/382241.html" target="_blank" rel="noopener">什么是基准测试</a></p>
</li>
<li><p><a href="https://blog.csdn.net/myjcxd/article/details/83501333" target="_blank" rel="noopener">JMH 学习笔记</a>   ← 很不错</p>
</li>
<li><p><a href="https://www.jianshu.com/p/bcb0b60c7ca7" target="_blank" rel="noopener">使用 JMH 做 JAVA 基准测试</a></p>
</li>
<li><p><a href="http://irfen.me/java-jmh-simple-microbenchmark/" target="_blank" rel="noopener">JMH 做 JAVA 基准测试</a></p>
</li>
</ol>
<h3 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a>代码链接</h3><ol>
<li><a href="https://github.com/kiwiflydream/study-demo/tree/master/study-jmh-demo" target="_blank" rel="noopener">DEMO 代码链接</a></li>
</ol>
<p>本文地址 <a href="https://blog.coder4j.cn/2019/05/04/yuque-JMH-简单入门/">https://blog.coder4j.cn/2019/05/04/yuque-JMH-简单入门/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[碎碎念-01(20190504)]]></title>
      <url>https://blog.coder4j.cn/2019/04/25/yuque-%E7%A2%8E%E7%A2%8E%E5%BF%B5-01-20190504/</url>
      <content type="html"><![CDATA[<h4 id="1-生命、宇宙以及任何事情的终极答案"><a href="#1-生命、宇宙以及任何事情的终极答案" class="headerlink" title="1. 生命、宇宙以及任何事情的终极答案"></a>1. 生命、宇宙以及任何事情的终极答案</h4><blockquote>
<p>答案是 42。这其实是一个梗<br>相关链接：&gt; <a href="https://www.yuque.com/buhao/blog/to1mkz/edit" target="_blank" rel="noopener">链接</a></p>
</blockquote>
<p>####</p>
<h4 id="2-生存余力理论模型"><a href="#2-生存余力理论模型" class="headerlink" title="2. 生存余力理论模型"></a>2. 生存余力理论模型</h4><p><img src="https://cdn.nlark.com/yuque/__latex/e79364826b9d0bda3038bb618df3a06b.svg#card=math&amp;code=%E7%94%9F%E5%AD%98%E4%BD%99%E5%8A%9B%3D%E7%94%9F%E5%AD%98%E5%8A%9B%E9%87%8F%2F%E7%94%9F%E5%AD%98%E8%B4%9F%E8%BD%BD&amp;height=26&amp;width=222" alt></p>
<blockquote>
<p>相关链接：<a href="https://www.jianshu.com/p/a404ea58ea15" target="_blank" rel="noopener">链接</a></p>
</blockquote>
<h4 id="3-好人与坏人"><a href="#3-好人与坏人" class="headerlink" title="3. 好人与坏人"></a>3. 好人与坏人</h4><blockquote>
<p>电视节目习惯把一个人塑造为好人，另一个是坏人，实际上这个世界上没有好人和坏人，只有做了好事的人，和做了坏事的人。<br>–《看见》</p>
</blockquote>
<h4 id="4-庐山烟雨浙江潮"><a href="#4-庐山烟雨浙江潮" class="headerlink" title="4. 庐山烟雨浙江潮"></a>4. 庐山烟雨浙江潮</h4><blockquote>
<p>庐山烟雨浙江潮，<br>未到千般恨不消。<br>到得还来别无事，<br>庐山烟雨浙江潮。</p>
</blockquote>
<h4 id="5-社会惰性"><a href="#5-社会惰性" class="headerlink" title="5. 社会惰性"></a>5. 社会惰性</h4><blockquote>
<p>社会上这么多问题，改起来有很多惰性，怎么改？他说，让问题浮出水面，让它“不得不”改变。<br>–《看见》</p>
</blockquote>
<h4 id="6-中国人的性格缺乏精确性"><a href="#6-中国人的性格缺乏精确性" class="headerlink" title="6. 中国人的性格缺乏精确性"></a>6. 中国人的性格缺乏精确性</h4><blockquote>
<p>美国传教士亚瑟·史密斯写过一本书叫《中国人的性格》。他观察到当时的国人有一个强烈的特点是缺乏精确性：“分布在城市边的几个村子，跟城相距一到六里，但每个村子都叫三里屯。”中国的“一串钱”永远不可能是预想的一百文，陕西省是八十三文，直隶是三十三文，“这给诚实的人带来无穷的烦恼”。<br>–《看见》</p>
</blockquote>
<h4 id="7-司法弹性"><a href="#7-司法弹性" class="headerlink" title="7. 司法弹性"></a>7. 司法弹性</h4><blockquote>
<p>司法弹性这么大，还怎么树立权威啊<br>–《看见》</p>
</blockquote>
<h4 id="8-淘宝的猥琐发育"><a href="#8-淘宝的猥琐发育" class="headerlink" title="8. 淘宝的猥琐发育"></a>8. 淘宝的猥琐发育</h4><blockquote>
<p>为了不引起 eBay 的注意，淘宝网在 2003 年里一直声称自己是一个“个人网站”。由于这个创业团队强大的市场开拓和运营能力，淘宝网的发展非常迅猛，2003 年年底就吸引了注册用户 23 万个，每日 31 万个 PV，从 2003 年 5 月到同年年底成交额达 3371 万元。这没有引起 eBay 的注意，却引起了阿里巴巴内部很多员工的注意，他们觉得这个网站以后会成为阿里巴巴强劲的对手，甚至有人在内网发帖，忠告管理层要警惕这个刚刚起步的网站，但管理层似乎无动于衷。（这个团队的保密工作做得真好！）<br>–《淘宝技术这十年》</p>
</blockquote>
<h4 id="9-IOE"><a href="#9-IOE" class="headerlink" title="9. IOE"></a>9. IOE</h4><blockquote>
<p>IBM 小型机、Oracle、EMC 存储</p>
</blockquote>
<h4 id="10-标签与类目"><a href="#10-标签与类目" class="headerlink" title="10. 标签与类目"></a>10. 标签与类目</h4><blockquote>
<p>他说品牌、款式、材质等都可以叫做“属性”，属性是类似 Tag（标签）的一个概念，与类目相比更加离散、灵活，这样也缩减了类目的深度。<br>–《淘宝技术这十年》</p>
</blockquote>
<h4 id="11-火车模型"><a href="#11-火车模型" class="headerlink" title="11. 火车模型"></a>11. 火车模型</h4><blockquote>
<p>他告诉我们一切要以稳定为中心，所有影响系统稳定的因素都要解决掉。例如，每做一个日常修改，都必须对整个系统回归测试一遍；多个日常修改如果放在一个版本中，要是一个功能没有测试通过，整个系统都不能发布。我们把这个叫做“火车模型”，即任何一个乘客没有上车，都不许发车。这样做最直接的后果就是火车一直晚点。<br>–《淘宝技术这十年》</p>
</blockquote>
<h4 id="12-工程师分类"><a href="#12-工程师分类" class="headerlink" title="12. 工程师分类"></a>12. 工程师分类</h4><blockquote>
<p>工程师大致分了类：普通工程师跟着业务跑，来啥需求做啥事；文艺工程师专注于自己的领域，研究得非常精深；2B 工程师跳来跳去，啥都干，啥都浅尝辄止；还有一种工程师叫牛 B 工程师，啥都能干，啥都精通（这种人在工程师心中叫“神”）。<br>–《淘宝技术这十年》</p>
</blockquote>
<h4 id="13-一条道走到黑"><a href="#13-一条道走到黑" class="headerlink" title="13. 一条道走到黑"></a>13. 一条道走到黑</h4><blockquote>
<p>这个世界，坚持也可能是一种一条道走到黑啊。<br>–《你的人生还可以再抢救一下》</p>
</blockquote>
<h4 id="14-收藏"><a href="#14-收藏" class="headerlink" title="14. 收藏"></a>14. 收藏</h4><blockquote>
<p>你别以为是我忘了，我什么也没忘，但是有些事只适合收藏。不能说，也不能想，却又不能忘。它们不能变成语言，它们无法变成语言，一旦变成语言就不再是它们了。<br>–《我与地坛》</p>
</blockquote>
<h4 id="15-一步登天"><a href="#15-一步登天" class="headerlink" title="15. 一步登天"></a>15. 一步登天</h4><blockquote>
<p>1 号和 2 号是病危室，是一步登天的地方<br>–《我与地坛》</p>
</blockquote>
<h4 id="16-生命本轻盈"><a href="#16-生命本轻盈" class="headerlink" title="16. 生命本轻盈"></a>16. 生命本轻盈</h4><blockquote>
<p>我们的生命本来多轻盈，都是被这肉体和各种欲望的污浊给拖住。<br>–《皮囊》</p>
</blockquote>
<h4 id="17-希望"><a href="#17-希望" class="headerlink" title="17. 希望"></a>17. 希望</h4><blockquote>
<p>人生的不可预测，告诉我们在任何时候都要抱着一份希望。<br>      –《朗读者》</p>
</blockquote>
<h4 id="18-人生"><a href="#18-人生" class="headerlink" title="18. 人生"></a>18. 人生</h4><blockquote>
<p>我们的人生，就是一次又一次选择的结果。<br>–《朗读者》</p>
</blockquote>
<h4 id="19-历史"><a href="#19-历史" class="headerlink" title="19. 历史"></a>19. 历史</h4><blockquote>
<p>历史，要用许多不幸和错误去铺路，人类才变得比那些蚂蚁更聪明。人类浩荡前行，在这条路上，不是靠的恨，而是靠的爱……<br>–《朗读者》</p>
</blockquote>
<h4 id="20-水和电"><a href="#20-水和电" class="headerlink" title="20. 水和电"></a>20. 水和电</h4><blockquote>
<p>当时，亚马逊创始人贝佐斯对 2001 年出版的一本名为《创造》的书非常痴迷，让公司高管人人必读。这本书有个理念：最有价值和竞争壁垒、最不可或缺的公司，是那些能够提供类似于水电一样的基础设施服务的公司。<br>–《云端战争 20 年》</p>
</blockquote>
<h4 id="21-xx-即服务"><a href="#21-xx-即服务" class="headerlink" title="21. xx 即服务"></a>21. xx 即服务</h4><blockquote>
<p>IaaS：Infrastructure-as-a-Service(基础设施即服务)<br>PaaS：Platform-as-a-Service(平台即服务)<br>SaaS：Software-as-a-Service(软件即服务)<br>详见：<a href="https://zhuanlan.zhihu.com/p/43216852" target="_blank" rel="noopener">链接</a></p>
</blockquote>
<h4 id="22-对对对，您说的都对"><a href="#22-对对对，您说的都对" class="headerlink" title="22. 对对对，您说的都对"></a>22. 对对对，您说的都对</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1556934536040-c3a35491-90d3-422f-9842-ed0570784763.png#align=left&amp;display=inline&amp;height=574&amp;name=image.png&amp;originHeight=1148&amp;originWidth=1173&amp;size=1439086&amp;status=done&amp;width=586.5" alt="image.png"></p>
<h4 id="23-有点娘"><a href="#23-有点娘" class="headerlink" title="23. 有点娘"></a>23. 有点娘</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1556934582328-24d74b3a-d8ac-48ef-bd42-3b1c2bfa8406.png#align=left&amp;display=inline&amp;height=640&amp;name=image.png&amp;originHeight=1280&amp;originWidth=720&amp;size=310014&amp;status=done&amp;width=360" alt="image.png">  《你今天真可爱》</p>
<h4 id="24-理解灭霸"><a href="#24-理解灭霸" class="headerlink" title="24. 理解灭霸"></a>24. 理解灭霸</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1556934659141-61e5705f-e946-4072-b090-737c08522c2e.png#align=left&amp;display=inline&amp;height=278&amp;name=image.png&amp;originHeight=556&amp;originWidth=1080&amp;size=255428&amp;status=done&amp;width=540" alt="image.png"></p>
<h4 id="25-从需求打造解决方案"><a href="#25-从需求打造解决方案" class="headerlink" title="25. 从需求打造解决方案"></a>25. 从需求打造解决方案</h4><blockquote>
<p>从基因和气质来说，亚马逊的技术虽然也很强，但起于电商的亚马逊更习惯直接从市场需求打造解决方案，而不是靠技术或产品创造市场需求。<br>–《云端战争 20 年》</p>
</blockquote>
<h4 id="26-规模游戏"><a href="#26-规模游戏" class="headerlink" title="26. 规模游戏"></a>26. 规模游戏</h4><blockquote>
<p>亚马逊在这种规模的游戏中，比我们这样的竞争者装备得更好，因为他们可以通过核心业务来筹集资金。他们设定了一段很长的不赚钱的时间——他们是为了增长进行再投资。而我们的创新无法跟上这种脚步。<br>–《云端战争 20 年》</p>
</blockquote>
<h4 id="27-运气好"><a href="#27-运气好" class="headerlink" title="27. 运气好"></a>27. 运气好</h4><blockquote>
<p>事情做不完就明天再做吧，运气好的话，明天死了就不用做了！<br>– 冷兔</p>
</blockquote>
<h4 id="28-早起也是一种胜利"><a href="#28-早起也是一种胜利" class="headerlink" title="28. 早起也是一种胜利"></a>28. 早起也是一种胜利</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1556934967743-4bf251ec-16b2-4196-9e77-b9598c6c8754.png#align=left&amp;display=inline&amp;height=302&amp;name=image.png&amp;originHeight=604&amp;originWidth=690&amp;size=476647&amp;status=done&amp;width=345" alt="image.png"></p>
<h4 id="29-好想做一个程序员呀"><a href="#29-好想做一个程序员呀" class="headerlink" title="29. 好想做一个程序员呀"></a>29. 好想做一个程序员呀</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1556935047132-68135701-7f32-4983-ac76-aede90171764.png#align=left&amp;display=inline&amp;height=855&amp;name=image.png&amp;originHeight=1710&amp;originWidth=598&amp;size=575317&amp;status=done&amp;width=299" alt="image.png"></p>
<h4 id="30-电影院效应-剧场效应"><a href="#30-电影院效应-剧场效应" class="headerlink" title="30. 电影院效应 / 剧场效应"></a>30. 电影院效应 / 剧场效应</h4><blockquote>
<p>说法 1：<br>假如在一个座位按传统方式安排的电影院里，大家都在看电影，这个过程中有一个人要去洗手间，如果这个人是坐在靠边的位置，他只要站起来悄悄离开就可以了，但如果这个人是坐在中间的位置，他站起来往外走，则他旁边的人就要给他让路，整排的人都要站起来。<br>同样的人做同样的事，影响的人和引发的场面却不一样，这并不是因为他自身的影响力或素质发生了变化，只是因为他所处的位置不同。正是因为位置不同，所以他做同一件事所影响的范围和场面就发生了完全不同的变化。</p>
<p>说法 2：<br>一个剧场，大家都在看戏。每个人都有座位，大家都能看到演员的演出。忽然，有一个观众站起来看戏（可能是为了看的更清楚，也可能因为身高较矮），周围的人劝他坐下，他置若罔闻，求助剧场管理员，管理员却不在岗位。于是，周围的人为了看到演出，也被迫站起来看戏。最后全场的观众都从坐着看戏变成了站着看戏。<br>详见：<a href="http://blog.sina.com.cn/s/blog_65a246c70102x00i.html" target="_blank" rel="noopener">链接</a> <a href="https://kknews.cc/zh-my/news/3jv6j5g.html" target="_blank" rel="noopener">链接</a></p>
</blockquote>
<h4 id="31-边际效应"><a href="#31-边际效应" class="headerlink" title="31. 边际效应"></a>31. 边际效应</h4><blockquote>
<p>在<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6" target="_blank" rel="noopener">微观经济学</a>中，边际效用（英语：marginal utility），又译为边际效应，是指每新增（或减少）一个单位的<a href="https://zh.wikipedia.org/wiki/%E5%95%86%E5%93%81" target="_blank" rel="noopener">商品</a>或<a href="https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1" target="_blank" rel="noopener">服务</a>，它对商品或服务的收益增加（或减少）的<a href="https://zh.wikipedia.org/wiki/%E6%95%88%E7%94%A8" target="_blank" rel="noopener">效用</a>，也即是“效用 ── 商品或服务量”图的<a href="https://zh.wikipedia.org/wiki/%E6%96%9C%E7%8E%87" target="_blank" rel="noopener">斜率</a>。经济学通常认为，随着商品或服务的量增加，边际效用将会逐步减少，称为<a href="https://zh.wikipedia.org/wiki/%E8%BE%B9%E9%99%85%E6%95%88%E5%BA%94%E9%80%92%E5%87%8F%E5%AE%9A%E5%BE%8B" target="_blank" rel="noopener">边际效应递减定律</a>。</p>
</blockquote>
<p>– wikipedia</p>
<blockquote>
<p>饿了你会想吃饼<br>一个饼要花你一块钱，这一块钱和吃饼花去的时间是你的成本（Cost)</p>
<p>吃到饼带来的愉快感，是你的收益（Benefit）</p>
<p>收益减去成本</p>
<p>就是你的净收益</p>
<p>所谓边际收益</p>
<p>即是你每多吃一个饼带来的收益</p>
<p>吃一个你很开心</p>
<p>一块钱花的很值</p>
<p>净边际收益很高</p>
<p>吃第二个时变得不那么开心</p>
<p>一块钱花的没那么值了</p>
<p>净边际收益减少</p>
<p>你已经有点饱了</p>
<p>但是你还是吃了第三个</p>
<p>花去的钱和买来的愉快感已基本抵消</p>
<p>净边际收益为零</p>
<p>硬要吃第四个的话</p>
<p>可能就会撑恶心了</p>
<p>一块钱花了不如不花</p>
<p>这时候净边际收益就是负值了</p>
<p>然后你就不会继续吃了</p>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>作者：匿名用户</p>
<p>链接：<a href="https://www.zhihu.com/question/26415450/answer/32698819" target="_blank" rel="noopener">https://www.zhihu.com/question/26415450/answer/32698819</a></p>
<p>来源：知乎</p>
</blockquote>
<p>本文地址 <a href="https://blog.coder4j.cn/2019/04/25/yuque-碎碎念-01-20190504/">https://blog.coder4j.cn/2019/04/25/yuque-碎碎念-01-20190504/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[创建 Java 对象有几种写法？]]></title>
      <url>https://blog.coder4j.cn/2019/04/21/yuque-%E5%88%9B%E5%BB%BA-Java-%E5%AF%B9%E8%B1%A1%E6%9C%89%E5%87%A0%E7%A7%8D%E5%86%99%E6%B3%95%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2019/png/119443/1555856125208-739fc957-7fd1-4fbf-b076-736f03247fb5.png#align=left&amp;display=inline&amp;height=198&amp;name=image.png&amp;originHeight=198&amp;originWidth=307&amp;size=42238&amp;status=done&amp;width=307" alt="image.png"></p>
<blockquote>
<p>创建 Java 对象，跟”回”字一样也有好几种写法。虽然简单，但是也涉及到了几个 Java 关键的基础知识，比如反射、克隆、序列化与反序列化，所以面试也经常会遇到，然后不断扩展的问。</p>
</blockquote>
<h3 id="第一种：通过-new-关键字创建"><a href="#第一种：通过-new-关键字创建" class="headerlink" title="第一种：通过 new 关键字创建"></a>第一种：通过 new 关键字创建</h3><blockquote>
<p>这一种没啥好说的，从学 Java 第一天就不停的跟两样东西打交道，一个的是 new 关键字，一个是<strong>NullPointerException 😂。代码如下</strong></p>
</blockquote>
<h4 id="测试对象代码-Person-java"><a href="#测试对象代码-Person-java" class="headerlink" title="测试对象代码 Person.java"></a>测试对象代码 Person.java</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>code<span class="token punctuation">.</span>crete<span class="token punctuation">.</span>object<span class="token punctuation">.</span>method<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>ReflectionToStringBuilder<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>ToStringStyle<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 人员类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 年龄
     */</span>
    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 用户名
     */</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Getter method for property &lt;tt>age&lt;/tt>.
     *
     * @return property value of age
     */</span>
    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Setter method for property &lt;tt>age&lt;/tt>.
     *
     * @param age value to be assigned to property age
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Getter method for property &lt;tt>name&lt;/tt>.
     *
     * @return property value of name
     */</span>
    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Setter method for property &lt;tt>name&lt;/tt>.
     *
     * @param name value to be assigned to property name
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ReflectionToStringBuilder<span class="token punctuation">.</span><span class="token function">reflectionToString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>
                ToStringStyle<span class="token punctuation">.</span>SHORT_PREFIX_STYLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="创建对象代码"><a href="#创建对象代码" class="headerlink" title="创建对象代码"></a>创建对象代码</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 通过 new 关键字去创建对象
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"kiwi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="第二种：通过-class-的-newInstance-方法"><a href="#第二种：通过-class-的-newInstance-方法" class="headerlink" title="第二种：通过  class 的  newInstance() 方法"></a>第二种：通过  class 的  newInstance<em>() 方法</em></h3><blockquote>
<p>这里就涉及到了 Java 基础里面的反射知识了，大多数框架也是通过这种方式创建的对象，比如说 spring。通过反射拿到 class 对象，再直接调用 newInstance() 方法就可以直接创建出一个对象。获得 class 对象的方法也有好几种，这里直接通过类来获得。代码如下：</p>
</blockquote>
<h4 id="创建对象代码-1"><a href="#创建对象代码-1" class="headerlink" title="创建对象代码"></a>创建对象代码</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 通过类反射
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testClassReflect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>
        Person person <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"kiwi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="第三种：通过-constructor-的-newInstance-方法"><a href="#第三种：通过-constructor-的-newInstance-方法" class="headerlink" title="第三种：通过  constructor 的  newInstance() 方法"></a>第三种：通过  constructor 的  newInstance() 方法</h3><blockquote>
<p>与第二种方法一样，同样是通过反射。也是拿到 class 对象，不过这里，拿到对象后，又多了一步去拿构造函数。可能有人觉得疑问了，与第二种达到的结果是一样的，但是还要多写一些代码，为什么还要用他。其实对于有无参构造函数的类来说，两种方法都一样，哪个都可以使用。但是是对于只有有参构造函数的类来说，只能使用第三种。因为第二种无法指定构建函数。所以因为大多数框架使用的都是第二种包括 spring，所以当你的 bean 没有无参构造函数时，框架就会报错，他是不会帮你用第三种的。代码如下：</p>
</blockquote>
<h4 id="创建对象代码-2"><a href="#创建对象代码-2" class="headerlink" title="创建对象代码"></a>创建对象代码</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 通过构建函数反射创建
     * @throws NoSuchMethodException
     * @throws IllegalAccessException
     * @throws InvocationTargetException
     * @throws InstantiationException
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConstructReflect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>
        Constructor<span class="token operator">&lt;</span>Person<span class="token operator">></span> constructor <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Person person <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"kiwi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 通过有参构造函数反射创建
     * @throws NoSuchMethodException
     * @throws IllegalAccessException
     * @throws InvocationTargetException
     * @throws InstantiationException
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConstructWithParamReflect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>
        Constructor<span class="token operator">&lt;</span>Person<span class="token operator">></span> constructor <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Person person <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"kiwi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="第四种：通过-clone"><a href="#第四种：通过-clone" class="headerlink" title="第四种：通过 clone"></a>第四种：通过 clone</h3><blockquote>
<p>可以看到 Person.java 实现了接口 Cloneable 并覆盖了 clone 方法（其实只是调用了父类方法），然后调用对象的 clone 方法就可以创建一个一毛一样的对象。需要注意的是这是是浅克隆，啥是浅克隆？浅克隆是指复制出来的对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。也就是说修改克隆后的对象中的引用变量，也会导致原对象也产生变化。深克隆反之。代码如下：</p>
</blockquote>
<h4 id="创建对象代码-3"><a href="#创建对象代码-3" class="headerlink" title="创建对象代码"></a>创建对象代码</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 通过克隆
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>
        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"kiwi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Person personClone <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>person<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personClone<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="第五种：通过反序列化"><a href="#第五种：通过反序列化" class="headerlink" title="第五种：通过反序列化"></a>第五种：通过反序列化</h3><blockquote>
<p>序列化与反序列化有很多种，包括 json,xml 其实都是。这里使用的是 java 原生的  Serializable 实现的序列化。很多 rpc 框架，比如 dubbo 使用的就是这种方式，这里需要类实现 jdk 的  Serializable 接口，并且给他一个  <em>serialVersionUID 属性。代码如下：</em></p>
</blockquote>
<h4 id="测试对象代码-PersonDto-java"><a href="#测试对象代码-PersonDto-java" class="headerlink" title="测试对象代码 PersonDto.java"></a>测试对象代码 PersonDto.java</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>code<span class="token punctuation">.</span>crete<span class="token punctuation">.</span>object<span class="token punctuation">.</span>method<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>ReflectionToStringBuilder<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>ToStringStyle<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 人员类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonDto</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 3911118195380172132L<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 年龄
     */</span>
    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 用户名
     */</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">PersonDto</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">PersonDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Getter method for property &lt;tt>age&lt;/tt>.
     *
     * @return property value of age
     */</span>
    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Setter method for property &lt;tt>age&lt;/tt>.
     *
     * @param age value to be assigned to property age
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Getter method for property &lt;tt>name&lt;/tt>.
     *
     * @return property value of name
     */</span>
    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Setter method for property &lt;tt>name&lt;/tt>.
     *
     * @param name value to be assigned to property name
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ReflectionToStringBuilder<span class="token punctuation">.</span><span class="token function">reflectionToString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>
                ToStringStyle<span class="token punctuation">.</span>SHORT_PREFIX_STYLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="创建对象代码-4"><a href="#创建对象代码-4" class="headerlink" title="创建对象代码"></a>创建对象代码</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 通过反序列化
     * @throws IOException
     * @throws ClassNotFoundException
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSerializable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>
        PersonDto person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"kiwi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 把对象序列化</span>
        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 反序列化</span>
        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        PersonDto personSeri <span class="token operator">=</span> <span class="token punctuation">(</span>PersonDto<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personSeri<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>这里就说完了，比较常用的几种 Java 对象创建方法了。由此可以看出单例模式是无法保证系统中只有一个对象的。</p>
</blockquote>
<p>本文地址 <a href="https://blog.coder4j.cn/2019/04/21/yuque-创建-Java-对象有几种写法？/">https://blog.coder4j.cn/2019/04/21/yuque-创建-Java-对象有几种写法？/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[dubbo 过滤器使用]]></title>
      <url>https://blog.coder4j.cn/2018/09/19/yuque-dubbo-%E8%BF%87%E6%BB%A4%E5%99%A8%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2018/png/119443/1537282396426-96544e5f-a1b7-49e0-a244-850912ebbd96.png#width=458" alt></p>
<h3 id="什么是-dubbo-过滤器"><a href="#什么是-dubbo-过滤器" class="headerlink" title="什么是 dubbo 过滤器"></a>什么是 dubbo 过滤器</h3><p>学过 servlet 或 spring mvc 的同学都知道有一个叫作过滤器的东西。顾名思义他就是用于过滤的。它本身不产生请求或者响应，它只是修改对某一资源的请求，或者修改某一资源的响应。</p>
<h3 id="为什么需要-dubbo-过滤器"><a href="#为什么需要-dubbo-过滤器" class="headerlink" title="为什么需要 dubbo 过滤器"></a>为什么需要 dubbo 过滤器</h3><p>对于有些操作，我们可能每个接口都需要使用。比如打印接口调用的请求与响应信息，计算接口调用的时间。或者字符编码的转换。再或者就接口的权限判断。。。不胜枚举。对于这些通用且是大多数接口都会使用的内容。如果在第一个接口里面去实现或者调用，就太过于麻烦。这个时候就可以把它抽到一个调用接口时都会经过的地方去。这个地方就是过滤器。其实可以简单理解成接口层面的 AOP。</p>
<h3 id="什么时候运行"><a href="#什么时候运行" class="headerlink" title="什么时候运行"></a>什么时候运行</h3><p>一般情况下过滤器不只一个。比如说有一个编码转换的过滤器，一个接口调用日志的过滤器，两个同时存在。因为打印日志时是使用一个固定编码的。所以为了防止打印时不产生乱码，必须要在编码转换过滤器之后运行。这种情况下我们就需要一个顺序。这也就形成了常说的过滤器链。至于如何控制顺序，会在下文介绍。</p>
<h3 id="在哪种场景下使用"><a href="#在哪种场景下使用" class="headerlink" title="在哪种场景下使用"></a>在哪种场景下使用</h3><blockquote>
<p>主要是一些通用的操作</p>
</blockquote>
<ol>
<li><p>接口的调用日志打印</p>
</li>
<li><p>接口权限判断</p>
</li>
<li><p>编码转换</p>
</li>
</ol>
<h3 id="相关角色有哪些"><a href="#相关角色有哪些" class="headerlink" title="相关角色有哪些"></a>相关角色有哪些</h3><p>对于 servlet 来说，一个是接口的调用方比如浏览器，爬虫。。。。，一个是提供的接口。对于 dubbo 来说，一个是生产者，一个是消费者。</p>
<h3 id="怎么去使用-dubbo-过滤器"><a href="#怎么去使用-dubbo-过滤器" class="headerlink" title="怎么去使用 dubbo 过滤器"></a>怎么去使用 dubbo 过滤器</h3><ol>
<li>继承<strong>com.alibaba.dubbo.rpc.Filter</strong>并且实现它的 <strong>invoke 方法。</strong></li>
</ol>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>fshows<span class="token punctuation">.</span>fsframework<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>filter<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>Filter<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>Invocation<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>Invoker<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>Result<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>RpcException<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>fshows<span class="token punctuation">.</span>fsframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>SystemClock<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author buhao
 * @version LogFilter.java, v 0.1 2018-09-18 20:40 buhao
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Result <span class="token function">invoke</span><span class="token punctuation">(</span>Invoker<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> invoker<span class="token punctuation">,</span> Invocation invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> RpcException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 获得 RPC 方法名</span>
        String methodName <span class="token operator">=</span> invoker<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 获得开始时间</span>
        <span class="token keyword">long</span> startTime <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">millisClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 打印调用前日志</span>
        <span class="token comment" spellcheck="true">// 获得参数</span>
        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arguments <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"RPC 接口开始 methodName = {}, agruments = {}"</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment" spellcheck="true">// 调用接口</span>
        Result result <span class="token operator">=</span> invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 打印调用后日志</span>
        <span class="token comment" spellcheck="true">// 抛出的异常</span>
        Throwable exception <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 返回结果</span>
        Object value <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 打印结束日志</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"RPC 接口异常结束 methodName = {},  exception = {}, time = {}ms "</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> SystemClock<span class="token punctuation">.</span><span class="token function">millisClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"RPC 接口结束 methodName = {},  result ={}, time = {}ms "</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> value<span class="token punctuation">,</span> SystemClock<span class="token punctuation">.</span><span class="token function">millisClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li><p>配置过滤器</p>
<ol>
<li><p>在 resources 目录下创建一个名为 META-INF 的目录</p>
</li>
<li><p>在 META-INF 的目录下创建一个名为 dubbo 目录</p>
</li>
<li><p>在 dubbo 目录下创建一个名为 <strong>com.alibaba.dubbo.rpc.Filter</strong> 的文本文件</p>
</li>
<li><p>在文本中配置自定义的过滤器</p>
</li>
</ol>
</li>
</ol>
<p>文件目录如下：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2018/png/119443/1537274909108-5f7e2642-b813-432d-95d9-6ee786c57adc.png#width=608" alt></p>
<p><strong>com.alibaba.dubbo.rpc.Filter</strong>文件内容如下：</p>
<blockquote>
<p>内容： 过滤器名称=过滤器全限定名</p>
</blockquote>
<pre><code>logFilter=com.fshows.fsframework.extend.dubbo.filter.LogFilter
</code></pre><blockquote>
<p>至于为什么要这些写？因为这里使用的是 SPI 机制。类似于 spring 的 IOC,详情可以看<a href="https://juejin.im/post/5b9b1c115188255c5e66d18c" target="_blank" rel="noopener">理解的 Java 中 SPI 机制</a></p>
</blockquote>
<ol>
<li>指定过滤器的拦截对象与过滤器顺序</li>
</ol>
<blockquote>
<p>通过@Adaptive 去指定</p>
</blockquote>
<ul>
<li>Adaptive 源码</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Activate</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * Group过滤条件。
     *

     * 包含{@link ExtensionLoader#getActivateExtension}的group参数给的值，则返回扩展。
     *

     * 如没有Group设置，则不过滤。
     */</span>
    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Key过滤条件。包含{@link ExtensionLoader#getActivateExtension}的URL的参数Key中有，则返回扩展。
     * &lt;p/>
     * 示例：&lt;br/>
     * 注解的值 &lt;code>@Activate("cache,validatioin")&lt;/code>，
     * 则{@link ExtensionLoader#getActivateExtension}的URL的参数有&lt;code>cache&lt;/code>Key，或是&lt;code>validatioin&lt;/code>则返回扩展。
     * &lt;br/>
     * 如没有设置，则不过滤。
     */</span>
    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 排序信息，可以不提供。
     */</span>
    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 排序信息，可以不提供。
     */</span>
    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 排序信息，可以不提供。
     */</span>
    <span class="token keyword">int</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>用法</p>
<ul>
<li><p>指定过滤器使用方</p>
<pre><code>- group

   - 例子 - 指定生产者使用

      - ```
</code></pre><p>@Activate(group = {Constants.PROVIDER})</p>
</li>
</ul>
</li>
</ul>
<pre><code>
   - 指定特定参数

      - value

         - 例子 - 指定参数 accessToken=123的参数使用

            - ```java
  @Activate(&quot;accessToken=123&quot;)
</code></pre><pre><code>     - 例子 - 指定有 accessToken参数使用

        - ```java
</code></pre><p>@Activate(“accessToken”)</p>
<pre><code>
   - 指定过滤器顺序

      - order

         - 例子 - 数字越小优先级越高

            - ```java
  @Activate(order = -1)
</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://juejin.im/post/5ab0699f6fb9a028c42e0517" target="_blank" rel="noopener">Dubbo 过滤器 Filter 的使用及应用场景</a><br><a href="https://juejin.im/post/5b9b1c115188255c5e66d18c" target="_blank" rel="noopener">理解的 Java 中 SPI 机制</a><br><a href="http://dubbo.apache.org/zh-cn/docs/dev/SPI.html" target="_blank" rel="noopener">dubbo 官方文档-扩展点加载</a></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/09/19/yuque-dubbo-过滤器使用/">https://blog.coder4j.cn/2018/09/19/yuque-dubbo-过滤器使用/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[黑客马拉松比赛有感]]></title>
      <url>https://blog.coder4j.cn/2018/08/26/yuque-%E9%BB%91%E5%AE%A2%E9%A9%AC%E6%8B%89%E6%9D%BE%E6%AF%94%E8%B5%9B%E6%9C%89%E6%84%9F/</url>
      <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2018/png/119443/1535213291218-8052f245-122f-4adc-be6d-a0222a8e7d68.png#width=747" alt></p>
<p>今天有幸参加了公司举办的黑客马拉松，并且取得了第一名的成绩。当然我对这个第一的成绩还是比较心虚的。因为每一组都很优秀。本来已经做好了冲第三保第四的准备（一共四组参赛 😂）。最后能赢真的感到实在太意外了。心情只能用下图去表达</p>
<p><img src="https://cdn.nlark.com/yuque/0/2018/png/119443/1535213679393-fe8889d6-e3e7-4ffa-849b-45be3f96922d.png#width=492" alt></p>
<p>但是总体下来还是有一些个人的感悟。评委给的评价是，我们这一组是参赛组内完成度最高的一组，也是 ppt 演讲过程中逻辑最清楚的一个。<br>当然 ppt 演讲逻辑清晰这个最大的功劳当然是 MVP 张贤，人称首展贾跃亭。而功能完成度最高，我想很大一部分是我们更在意效率。<br>因为从一开始我们就知道我们根本不占优势。参加比赛没有语言限制，而且在只有 8 个小时的时间内开发。所以我们跟一同参赛的 PHPer 比，已经输在了起跑线上。所以我们没有按均衡的角色去组队。而是 2 名 java 开发 1 名前端 1 名测试 1 名 UI。2 名 java 是为了能用人数弥补语言开发效率上的不足。而测试跟 UI 也是比较偏产品的同学。<br>另一个重要的原因是我们引入了一个 java 开发脚手架，并同时使用了一些代码的自动生成。这使得效率大大的提高。这可以使得开发有更多的时间去优化，比如在前端来不及的情况下，浩翔一个人写完了整个后台。<br><img src="https://cdn.nlark.com/yuque/0/2018/png/119443/1535215540578-2f5ce0fe-c11f-49ad-bf46-11fb746e08d3.png#width=747" alt><br>还有一个关键点我觉得是我们方向比较清晰与明确。因为从一开始我们就有了标准答案–蚂蚁微客。而且知道蚂蚁微客也是在一次很偶然的机会收到支付宝的推送。然后当时也没在意。然后上面说的 java 脚手架也是偶然看到，从来没有使用过。但是正如乔帮主所说生活中的点滴会在你未来的某一天产生联系。<br>所以趁着年轻，多学点知识，多认识点人，多去一些地方。可能就在未来的某一刻，他们就像珍珠一样点点滴滴的串联起来成为你生命中最美好的记忆。</p>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/08/26/yuque-黑客马拉松比赛有感/">https://blog.coder4j.cn/2018/08/26/yuque-黑客马拉松比赛有感/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[jvm 运行时数据区域]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-jvm-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>根据《Java 虚拟机规范》的规定，Java 虚拟机所管理的内存将会包括如下几个运行时数据区域</p>
</blockquote>
<h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="https://cdn.nlark.com/yuque/0/2018/png/119443/1534660000696-28eff01e-7db1-4bef-8900-5afa0e1fb00f.png" alt></p>
<h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul>
<li>字节码行号指示器</li>
</ul>
<blockquote>
<p>程序计数器是一块较小的内存空间，它等同于当前执行字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都依赖于计数器。</p>
</blockquote>
<h4 id="线程存储"><a href="#线程存储" class="headerlink" title="线程存储"></a>线程存储</h4><ul>
<li>线程私有</li>
</ul>
<blockquote>
<p>因为 JAVA 的多线程是通过线程的轮流切换并分配处理器时间的方式来实现的，因此，为了线程切换后能恢复到正确的执行位置，每条线程都要一个独立的程序计数器，所以是线程私有的。</p>
</blockquote>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote>
<p>如果线程执行的是 JAVA 方法，这个计数器保存的就是正在执行的虚拟机字节码指令的地址。如果执行的是 Native 方法，计数器保存值为空。</p>
</blockquote>
<h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><ul>
<li>无</li>
</ul>
<blockquote>
<p>是唯一一个规范中没有规定的任何 OutOfMemoryError 情况的区域。</p>
</blockquote>
<h3 id="JAVA-虚拟机栈"><a href="#JAVA-虚拟机栈" class="headerlink" title="JAVA 虚拟机栈"></a>JAVA 虚拟机栈</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><blockquote>
<p>虚拟机栈描述的是 Java 方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。<br>局部变量表存放了编译期可知的各种基本数据类型、对象引用和 returnAddress 类型（指向了一条字节码指令的地址）</p>
</blockquote>
<h4 id="线程存储-1"><a href="#线程存储-1" class="headerlink" title="线程存储"></a>线程存储</h4><ul>
<li>线程私有</li>
</ul>
<h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><blockquote>
<p>局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p>
</blockquote>
<h4 id="异常-1"><a href="#异常-1" class="headerlink" title="异常"></a>异常</h4><ul>
<li><p>StackOverflowError</p>
<ul>
<li>原因<blockquote>
<p>如果线程请求的栈深度大于虚拟机所允许的深度，就会抛出</p>
</blockquote>
</li>
</ul>
</li>
<li><p>OutOfMemoryError</p>
<ul>
<li>原因<blockquote>
<p>如果虚拟机栈可以动态扩展，扩展时无法申请到足够的内存，就会抛出</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><blockquote>
<p>与 Java 虚拟机栈功能几乎一致，只是一个是运行 JAVA 方法，一个运行 Native 方法。有些虚拟机会直接把这两个栈合二为一（HotSpot）</p>
</blockquote>
<h4 id="线程存储-2"><a href="#线程存储-2" class="headerlink" title="线程存储"></a>线程存储</h4><ul>
<li>线程私有</li>
</ul>
<h4 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h4><blockquote>
<p>局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p>
</blockquote>
<h4 id="异常-2"><a href="#异常-2" class="headerlink" title="异常"></a>异常</h4><ul>
<li><p>StackOverflowError</p>
<ul>
<li>原因<blockquote>
<p>如果线程请求的栈深度大于虚拟机所允许的深度，就会抛出</p>
</blockquote>
</li>
</ul>
</li>
<li><p>OutOfMemoryError</p>
<ul>
<li>原因<blockquote>
<p>如果虚拟机栈可以动态扩展，扩展时无法申请到足够的内存，就会抛出</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="JAVA-堆"><a href="#JAVA-堆" class="headerlink" title="JAVA 堆"></a>JAVA 堆</h3><h4 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h4><blockquote>
<p>是虚拟机管理的内存中最大的一块。唯一的作用就是存放对象实例。</p>
</blockquote>
<h4 id="线程存储-3"><a href="#线程存储-3" class="headerlink" title="线程存储"></a>线程存储</h4><ul>
<li>线程共有</li>
</ul>
<h4 id="注意-3"><a href="#注意-3" class="headerlink" title="注意"></a>注意</h4><blockquote>
<p>由于收集器基本上都采用分代收集算法，所以 JAVA 堆中还可以细分为：新生代和老年代；再细致一点的有 Eden 空间、From Surviror 空间、To Surviror 空间</p>
</blockquote>
<h4 id="异常-3"><a href="#异常-3" class="headerlink" title="异常"></a>异常</h4><ul>
<li><p>OutOfMemoryError</p>
<ul>
<li>原因</li>
</ul>
</li>
</ul>
<blockquote>
<p>如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出 OutOfMemoryError 异常。</p>
</blockquote>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><h4 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h4><blockquote>
<p>用于存储已被虚拟机加载 的类信息、常量、静态变量、即时编译器后的代码等数据。</p>
</blockquote>
<h4 id="线程存储-4"><a href="#线程存储-4" class="headerlink" title="线程存储"></a>线程存储</h4><ul>
<li>线程共有</li>
</ul>
<h4 id="注意-4"><a href="#注意-4" class="headerlink" title="注意"></a>注意</h4><blockquote>
<p>也有人称之为『永久代』，本质上两者并不等价，只是有些虚拟机实现时把用永久代实现方法区而已。</p>
</blockquote>
<h4 id="异常-4"><a href="#异常-4" class="headerlink" title="异常"></a>异常</h4><ul>
<li><p>OufOfMemoryError</p>
<ul>
<li>原因</li>
</ul>
</li>
</ul>
<blockquote>
<p>当方法区无法满足内存分配需求时，将抛出</p>
</blockquote>
<h3 id="运行时常量池（方法区的一部分）"><a href="#运行时常量池（方法区的一部分）" class="headerlink" title="运行时常量池（方法区的一部分）"></a>运行时常量池（方法区的一部分）</h3><h4 id="作用-5"><a href="#作用-5" class="headerlink" title="作用"></a>作用</h4><blockquote>
<p>是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存入编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存入。</p>
</blockquote>
<h4 id="线程存储-5"><a href="#线程存储-5" class="headerlink" title="线程存储"></a>线程存储</h4><ul>
<li>线程共有</li>
</ul>
<h4 id="注意-5"><a href="#注意-5" class="headerlink" title="注意"></a>注意</h4><blockquote>
<p>Java 语言并不要常量一定只有编译期才能产生，也就是并非预置入 Class 文件中常量池的内容才能进入方法区运行时常量池，运行期间也可以，比如 String 类的 intern()方法</p>
</blockquote>
<h4 id="异常-5"><a href="#异常-5" class="headerlink" title="异常"></a>异常</h4><ul>
<li><p>OutOfMemoryError</p>
<ul>
<li>原因</li>
</ul>
</li>
</ul>
<blockquote>
<p>当常量池无法再申请到内存时就会抛出</p>
</blockquote>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-jvm-运行时数据区域/">https://blog.coder4j.cn/2018/08/18/yuque-jvm-运行时数据区域/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[spring-boot 集成 redis]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-spring-boot-%E9%9B%86%E6%88%90-redis/</url>
      <content type="html"><![CDATA[<pre><code>&lt;!--集成redis--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre><pre><code>######################redis配置#########################
# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=localhost
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=0
</code></pre><pre><code>@Autowired
private StringRedisTemplate stringRedisTemplate;
@Resource
private RedisTemplate&lt;String, Users&gt; redisTemplate;
</code></pre><blockquote>
<p>然后就可以在类里使用了，使用泛型的时候如果用@Autowired 按类型注入会报错，要用@Resource</p>
</blockquote>
<p><em>如果方法想用缓存，要在配置类上加上@EnableCaching 打开缓存，并且要在方法上加上@Cacheable(value = “getByUsername”)</em></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-spring-boot-集成-redis/">https://blog.coder4j.cn/2018/08/18/yuque-spring-boot-集成-redis/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[spring-boot 不使用parent POM]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-spring-boot-%E4%B8%8D%E4%BD%BF%E7%94%A8parent-POM/</url>
      <content type="html"><![CDATA[<ul>
<li>一般情况下，推荐使用 parent 标签去继承</li>
</ul>
<pre><code>    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;1.4.2.RELEASE&lt;/version&gt; &lt;!--这里不能使用标签引用，必须写死，maven的bug?--&gt;
&lt;/parent&gt;
</code></pre><ul>
<li>如果不想用继承的方法，可以使用 import</li>
</ul>
<pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${sprint.boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-spring-boot-不使用parent-POM/">https://blog.coder4j.cn/2018/08/18/yuque-spring-boot-不使用parent-POM/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot 生成 war 包]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-spring-boot-%E7%94%9F%E6%88%90-war-%E5%8C%85/</url>
      <content type="html"><![CDATA[<pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>
                <span class="token comment" spellcheck="true">&lt;!--spring boot 内置了tomcat，所以我们没有tomcat也可以直接通过jar运行，如果想通过常规的war来部署就在这里移除tomcat就可以了--></span>
<span class="token comment" spellcheck="true">&lt;!--                &lt;exclusion>
                    &lt;artifactId>spring-boot-starter-tomcat&lt;/artifactId>
                    &lt;groupId>org.springframework.boot&lt;/groupId>
                &lt;/exclusion>--></span>
                <span class="token comment" spellcheck="true">&lt;!--spring boot 内置的日志是slf4j与logback,如果想用log4j就移除，并添加相应依赖就可以了--></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-spring-boot-生成-war-包/">https://blog.coder4j.cn/2018/08/18/yuque-spring-boot-生成-war-包/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[linux ssh 相关操作]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-linux-ssh-%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<blockquote>
<p>ssh 相关的，都是修改/etc/ssh/sshd_config<br>文件修改要重启 sshd 生效<br>/etc/init.d/sshd restart</p>
</blockquote>
<h3 id="修改-SSH-默认端口"><a href="#修改-SSH-默认端口" class="headerlink" title="修改 SSH 默认端口"></a>修改 SSH 默认端口</h3><pre><code>Port xxxx
</code></pre><h3 id="指定用户连接"><a href="#指定用户连接" class="headerlink" title="指定用户连接"></a>指定用户连接</h3><pre><code>AllowUsers user1,user2,user3
</code></pre><h3 id="禁止-root-连接"><a href="#禁止-root-连接" class="headerlink" title="禁止 root 连接"></a>禁止 root 连接</h3><pre><code>PermitRootLogin no
</code></pre><h3 id="ip-白名单"><a href="#ip-白名单" class="headerlink" title="ip 白名单"></a>ip 白名单</h3><pre><code>修改 /etc/hosts.allow
</code></pre><h3 id="重启-ssh"><a href="#重启-ssh" class="headerlink" title="重启 ssh"></a>重启 ssh</h3><pre><code>service sshd restart
</code></pre><p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-linux-ssh-相关操作/">https://blog.coder4j.cn/2018/08/18/yuque-linux-ssh-相关操作/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[idea 常用配置]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-idea-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><blockquote>
<p>File –&gt; Other Settings –&gt; Default Settings</p>
</blockquote>
<h3 id="设置代码编辑视图的行号显示"><a href="#设置代码编辑视图的行号显示" class="headerlink" title="设置代码编辑视图的行号显示"></a>设置代码编辑视图的行号显示</h3><blockquote>
<p>Editor -&gt; General -&gt; Appearance，勾选 show line numbers。</p>
</blockquote>
<h3 id="代码自动补全忽略大小写"><a href="#代码自动补全忽略大小写" class="headerlink" title="代码自动补全忽略大小写"></a>代码自动补全忽略大小写</h3><blockquote>
<p>Editor -&gt; General -&gt; Code Completion -&gt; Case sensitive completion -&gt; 下拉选择 None</p>
</blockquote>
<h3 id="关闭单词拼写检查"><a href="#关闭单词拼写检查" class="headerlink" title="关闭单词拼写检查"></a>关闭单词拼写检查</h3><blockquote>
<p>Editor -&gt; Spelling -&gt; Typo，设置 Options，去掉去掉勾选 Process code、Procss literals、Process comments。</p>
</blockquote>
<h3 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h3><blockquote>
<p>首先， Editor -&gt; Colors &amp; Fonts，Scheme 点击 Save As…按钮，输入另存为字体配置的名称，点击 OK 按钮。<br>再设置，Editor -&gt; Colors &amp; Fonts -&gt; Font，取消勾选 show only monospaced fonts，Primary font 设置为 Monaco(Monaco 字体需要系统已安装该字体)，Size 设置为 14。点击 OK 按钮完成字体样式及大小设置。</p>
</blockquote>
<h3 id="编码设置"><a href="#编码设置" class="headerlink" title="编码设置"></a>编码设置</h3><blockquote>
<p>由于需要避免乱码问题，我们通常情况会将编码统一为 UTF-8。<br>Editor -&gt; File Encodings，将 IDE Encoding、Project Encoding、Default Encoding for properties files，全部设置为 UTF-8。并且勾选 Default Encoding for properties files 后面的 Transparent natice-to-ascii conversion，点击 OK 按钮完成设置。</p>
</blockquote>
<h3 id="过滤文件夹及目录类型"><a href="#过滤文件夹及目录类型" class="headerlink" title="过滤文件夹及目录类型"></a>过滤文件夹及目录类型</h3><blockquote>
<p>Editor -&gt; File Types，Ignore files and folders 过滤列表输入框中添加.iml;.idea;_.gradle;_build;<br>各个过滤项之间以分号( ; )隔开。</p>
</blockquote>
<h3 id="生成序列化-serialVersionUID"><a href="#生成序列化-serialVersionUID" class="headerlink" title="生成序列化 serialVersionUID"></a>生成序列化 serialVersionUID</h3><blockquote>
<p>Editor -&gt; Inspections -&gt; Java -&gt; Serialization issues，勾选 Serializable class without ‘serialVersionUID’，至此以后，在你的 Java 类实现 java.io.Serializable 接口时，使用快捷键 Alt+Enter 就会提示 add ‘serialVersionUID’ field，自动创建 serialVersionUID 了。</p>
</blockquote>
<h3 id="配置-Java-编译版本"><a href="#配置-Java-编译版本" class="headerlink" title="配置 Java 编译版本"></a>配置 Java 编译版本</h3><blockquote>
<p>Build，Execution，Deployment -&gt; Compiler -&gt; Java Compiler，设置 Use Cimpiler 为 javac，Project bytecode version(leave blank for JDK default)下拉列表选中 1.8(需要设置的 JDK 编译版本)，点击 OK 按钮完成设置。</p>
</blockquote>
<h3 id="备份-IDEA-全局配置"><a href="#备份-IDEA-全局配置" class="headerlink" title="备份 IDEA 全局配置"></a>备份 IDEA 全局配置</h3><blockquote>
<p>IDEA 主界面，点击菜单 File，选择 Export Settings，选择导出全部配置文件存放目录，点击 OK 按钮完成导出。</p>
</blockquote>
<h3 id="导入备份的-IDEA-全局配置"><a href="#导入备份的-IDEA-全局配置" class="headerlink" title="导入备份的 IDEA 全局配置"></a>导入备份的 IDEA 全局配置</h3><blockquote>
<p>IDEA 主界面，点击菜单 File，选择 Import Settings，选择导出全部配置文件存放目录的 settings.jar 配置备份文件，点击 OK 按钮完成导入。</p>
</blockquote>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.oschina.net/question/948439_243781" target="_blank" rel="noopener">intellij IDEA 如何设置默认的 maven 配置？</a><br><a href="http://blog.csdn.net/eugeneheen/article/details/50370334" target="_blank" rel="noopener">IntelliJ IDEA15 简要使用手册</a></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-idea-常用配置/">https://blog.coder4j.cn/2018/08/18/yuque-idea-常用配置/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[git 常用命令]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> remote add xxx
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="第一次提交"><a href="#第一次提交" class="headerlink" title="第一次提交"></a>第一次提交</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push -u origin master
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="强制提交"><a href="#强制提交" class="headerlink" title="强制提交"></a>强制提交</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push -f origin master
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="同时提交两个远程库"><a href="#同时提交两个远程库" class="headerlink" title="同时提交两个远程库"></a>同时提交两个远程库</h3><pre class="line-numbers language-bash"><code class="language-bash">    <span class="token operator">></span> vim .git/config
    <span class="token operator">></span> <span class="token punctuation">[</span>remote <span class="token string">"web"</span><span class="token punctuation">]</span>
    <span class="token operator">></span> url <span class="token operator">=</span> ssh://server.example.org/home/ams/website.git
    <span class="token operator">></span> url <span class="token operator">=</span> ssh://other.exaple.org/home/foo/website.git
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="查看本地配置的远程仓库"><a href="#查看本地配置的远程仓库" class="headerlink" title="查看本地配置的远程仓库"></a>查看本地配置的远程仓库</h3><pre><code>git remote -v
</code></pre><h3 id="删除原来的远程分支"><a href="#删除原来的远程分支" class="headerlink" title="删除原来的远程分支"></a>删除原来的远程分支</h3><pre><code>git remote remove origin
</code></pre><h3 id="关联新的远程仓库"><a href="#关联新的远程仓库" class="headerlink" title="关联新的远程仓库"></a>关联新的远程仓库</h3><pre><code>git remote add origin url
</code></pre><h3 id="本地分支关联远程分支"><a href="#本地分支关联远程分支" class="headerlink" title="本地分支关联远程分支"></a>本地分支关联远程分支</h3><pre><code>git branch --set-upstream-to=origin/xxx
</code></pre><h3 id="新库操作"><a href="#新库操作" class="headerlink" title="新库操作"></a>新库操作</h3><pre><code>

Git global setup

git config --global user.name &quot;KiwiFly&quot;
git config --global user.email &quot;xx@qq.com&quot;

Create a new repository

git clone git@xx.com:Java/abc.git
cd fs_saledian_lovelife
touch README.md
git add README.md
git commit -m &quot;add README&quot;
git push -u origin master

Existing folder or Git repository

cd existing_folder
git init
git remote add origin git@xx.com:Java/abc.git
git add .
git commit
git push -u origin master
</code></pre><h3 id="创建公钥"><a href="#创建公钥" class="headerlink" title="创建公钥"></a>创建公钥</h3><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"your_email@youremail.com"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol>
<li>error: failed to push some refs to</li>
</ol>
<ul>
<li><p>原因</p>
<ul>
<li><blockquote>
<p>这个问题是因为远程库与本地库不一致造成的，那么我们把远程库同步到本地库就可以了。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>解决</p>
</li>
</ul>
<pre><code>git pull --rebase origin master
</code></pre><ul>
<li>引用</li>
</ul>
<p><a href="https://blog.csdn.net/MBuger/article/details/70197532" target="_blank" rel="noopener">链接</a></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-git-常用命令/">https://blog.coder4j.cn/2018/08/18/yuque-git-常用命令/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[常用服务安装(原生)]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85-%E5%8E%9F%E7%94%9F/</url>
      <content type="html"><![CDATA[<h3 id="centos-7-安装-docker"><a href="#centos-7-安装-docker" class="headerlink" title="centos 7 安装 docker"></a>centos 7 安装 docker</h3><ol>
<li>安装 docker</li>
</ol>
<pre><code>yum install docker
</code></pre><ol>
<li>启动并开机自启 docker</li>
</ol>
<pre><code>systemctl  start docker.service
systemctl  enable docker.service
</code></pre><p><a href="https://linux.cn/article-4340-1.html" target="_blank" rel="noopener">centos 安装 docker</a></p>
<h3 id="安装-docker-compose"><a href="#安装-docker-compose" class="headerlink" title="安装 docker-compose"></a>安装 docker-compose</h3><pre class="line-numbers language-shell"><code class="language-shell">pip install docker-compose
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span>
http://111.1.14.201/files/6036000006C14836/download.oracle.com/otn-pub/java/jdk/8u172-b11/a58eab1ec242421181065cdc37240b08/jdk-8u172-linux-x64.rpm
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用 RPM 包</span>
rpm -i xx.rpm
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="安装-GIT"><a href="#安装-GIT" class="headerlink" title="安装 GIT"></a>安装 GIT</h3><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> git-core
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="安装-MAVEN"><a href="#安装-MAVEN" class="headerlink" title="安装 MAVEN"></a>安装 MAVEN</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span>
http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo
 -O /etc/yum.repos.d/epel-apache-maven.repo
yum -y <span class="token function">install</span> apache-maven
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="安装-ftp-客户端"><a href="#安装-ftp-客户端" class="headerlink" title="安装 ftp 客户端"></a>安装 ftp 客户端</h3><pre class="line-numbers language-basic"><code class="language-basic">yum install ftp
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="安装-rz"><a href="#安装-rz" class="headerlink" title="安装 rz"></a>安装 rz</h3><pre class="line-numbers language-bash"><code class="language-bash">yum -y <span class="token function">install</span> lrzsz
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://raw.githubusercontent.com/helloxz/nginx-cdn/master/nginx.sh <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> nginx.sh
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="安装-redis"><a href="#安装-redis" class="headerlink" title="安装 redis"></a>安装 redis</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装</span>
<span class="token function">sudo</span> yum -y <span class="token function">install</span> redis
<span class="token comment" spellcheck="true"># 启动</span>
<span class="token function">sudo</span> systemctl start redis
<span class="token comment" spellcheck="true"># 修改配置</span>
<span class="token function">vi</span> /etc/redis.conf
<span class="token comment" spellcheck="true"># 注释本地访问</span>
<span class="token comment" spellcheck="true">#bind 127.0.0.1</span>
<span class="token comment" spellcheck="true"># 设置密码</span>
requirepass 密码
<span class="token comment" spellcheck="true"># 其它常用命令</span>
systemctl start redis.service <span class="token comment" spellcheck="true">#启动redis服务器</span>
systemctl stop redis.service <span class="token comment" spellcheck="true">#停止redis服务器</span>
systemctl restart redis.service <span class="token comment" spellcheck="true">#重新启动redis服务器</span>
systemctl status redis.service <span class="token comment" spellcheck="true">#获取redis服务器的运行状态</span>
systemctl <span class="token function">enable</span> redis.service <span class="token comment" spellcheck="true">#开机启动redis服务器</span>
systemctl disable redis.service <span class="token comment" spellcheck="true">#开机禁用redis服务器</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-常用服务安装-原生/">https://blog.coder4j.cn/2018/08/18/yuque-常用服务安装-原生/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[常用服务安装(docker)]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85-docker/</url>
      <content type="html"><![CDATA[<ol>
<li>mariadb</li>
</ol>
<pre><code>docker run --name db --env MYSQL_PASSWORD=example -d mariadb
</code></pre><ol>
<li>wordpress</li>
</ol>
<pre><code>docker run --MyWordPress --link db:mysql -p 8080:80 -d wordpress
</code></pre><ol>
<li>postgresql</li>
</ol>
<pre><code>docker run --postgresql -d \
--env &#39;DB_NAME=gitlabhq_production&#39; \
--env &#39;DB_USER=gitlab&#39; \
--env &#39;DB_PASS=password&#39; \
sameersbn/postgresql:9.4-12
</code></pre><ol>
<li>redis</li>
</ol>
<pre><code>docker run --name redis -d sameersbn/redis:latest
</code></pre><ol>
<li>gitlab</li>
</ol>
<pre><code>docker run --name gitlab -d \
--link postgresql:postgresql \
--link redis:redisio \
--publish 10022:22 \
--publish 10080:80 \
--env &#39;GITLAB_PORT=10080&#39; \
--env &#39;GITLAB_SSH_PORT=10022&#39; \
--env &#39;GITLAB_SECRETS_DB_KEY_BASE-long-and-random-alpha-numeric-string&#39;\
sameersbn/gitlab:8.4.4
</code></pre><p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-常用服务安装-docker/">https://blog.coder4j.cn/2018/08/18/yuque-常用服务安装-docker/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[docker compose使用]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-docker-compose%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<ol>
<li>安装(<a href="https://get.daocloud.io/" target="_blank" rel="noopener">https://get.daocloud.io/</a>)</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">curl -L https://get.daocloud.io/docker/compose/releases/download/1.15.0/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -s<span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -m<span class="token variable">`</span></span> <span class="token operator">></span> /usr/local/bin/docker-compose
<span class="token function">chmod</span> +x /usr/local/bin/docker-compose
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol>
<li>配置文件 docker-compose.yml</li>
</ol>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">wordpress</span><span class="token punctuation">:</span>
  <span class="token key atrule">image</span><span class="token punctuation">:</span> wordpress
  <span class="token key atrule">links</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> db<span class="token punctuation">:</span>mysql
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">80</span>
<span class="token key atrule">db</span><span class="token punctuation">:</span>
  <span class="token key atrule">image</span><span class="token punctuation">:</span> mariadb
  <span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> example
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>启动</li>
</ol>
<pre><code># 创建与启动
docker-compose up
# -f 指定配置文件名，默认docker-compose.yml

# 启动
docker-compose start
</code></pre><ol>
<li>关闭</li>
</ol>
<pre><code>docker-compose stod
</code></pre><ol>
<li>查询</li>
</ol>
<pre><code>docker-compose ps
</code></pre><ol>
<li>删除</li>
</ol>
<pre><code>docker-compose down
</code></pre><p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-docker-compose使用/">https://blog.coder4j.cn/2018/08/18/yuque-docker-compose使用/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[docker 常用命令]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<ol>
<li>基础命令</li>
</ol>
<pre><code># 命令格式
docker 命令关键字(command) 一系列参数([args...])

# 查询命令帮助
docker command --help
</code></pre><ol>
<li><p>启动容器<br><code>docker start id/name</code></p>
</li>
<li><p>关闭容器<br><code>docker stop id/name</code></p>
</li>
<li><p>查询在线容器</p>
</li>
</ol>
<pre><code>docker ps [-a]

# -a 显示所有，包括已经关闭的
</code></pre><ol>
<li><p>查询容器信息<br><code>docker inspect id/name</code></p>
</li>
<li><p>查看容器日志<br><code>docker logs [-f] id/name</code></p>
</li>
<li><p>查看容器资源占用<br><code>docker stats</code></p>
</li>
<li><p>容器内部命令</p>
</li>
</ol>
<pre><code># 在容器内部执行命令
docker exec id/name 执行命令
# 以root用户执行命令
docker exec -it id/name 执行命令
# 以root用户打开一个终端,exit退出
docker exec -it id/name /bin/bash
</code></pre><ol>
<li>镜像查询</li>
</ol>
<pre><code>docker search xx
</code></pre><ol>
<li>镜像下载</li>
</ol>
<pre><code>docker pull xx
</code></pre><ol>
<li>本地镜像列表</li>
</ol>
<pre><code>docker images
</code></pre><ol>
<li>启动容器</li>
</ol>
<pre><code>docker run [--name] [--link] 镜像id/name

# --link 容器连接
# --name 容器起的名称
# --p 端口映射 8080:80
# --e 环境变量设置
</code></pre><ol>
<li>删除容器</li>
</ol>
<pre><code>docker rm id/name
</code></pre><ol>
<li>创建镜像</li>
</ol>
<pre><code>docker commit id imageName
</code></pre><ol>
<li>关闭所有运行的容器</li>
</ol>
<pre><code>docker stop $(docker ps -q)
</code></pre><p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-docker-常用命令/">https://blog.coder4j.cn/2018/08/18/yuque-docker-常用命令/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[lombok 基础教程]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-lombok-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h1><h4 id="作用：帮使用者提高编码效率，减少重复与冗余的代码"><a href="#作用：帮使用者提高编码效率，减少重复与冗余的代码" class="headerlink" title="作用：帮使用者提高编码效率，减少重复与冗余的代码"></a>作用：帮使用者提高编码效率，减少重复与冗余的代码</h4><h4 id="原理：ASM-动态修改-class-文件"><a href="#原理：ASM-动态修改-class-文件" class="headerlink" title="原理：ASM   动态修改 class 文件"></a>原理：ASM   动态修改 class 文件</h4><hr>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><pre class="line-numbers language-xml"><code class="language-xml">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.16.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><pre class="line-numbers language-xml"><code class="language-xml">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.16.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h3><ul>
<li>安装插件<br><img src="http://ww2.sinaimg.cn/large/68f7efe0gw1fb0hl2gmyzj20su0kagqg.jpg#align=left&amp;display=inline&amp;height=730&amp;margin=%5Bobject%20Object%5D&amp;originHeight=730&amp;originWidth=1038&amp;status=done&amp;style=none&amp;width=1038" alt></li>
</ul>
<hr>
<h1 id="常用注解："><a href="#常用注解：" class="headerlink" title="常用注解："></a>常用注解：</h1><h2 id="java-bean-相关"><a href="#java-bean-相关" class="headerlink" title="java bean 相关"></a>java bean 相关</h2><h3 id="Setter"><a href="#Setter" class="headerlink" title="@Setter"></a>@Setter</h3><ul>
<li><code>功能</code></li>
</ul>
<blockquote>
<p>生成 setter 方法</p>
</blockquote>
<ul>
<li><code>源码</code></li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Setter</span>
        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

            <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
            <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>编译后</code></li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">
  <span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
      <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

      <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Getter"><a href="#Getter" class="headerlink" title="@Getter"></a>@Getter</h3><ul>
<li><code>功能</code></li>
</ul>
<blockquote>
<p>生成 getter 方法</p>
</blockquote>
<ul>
<li><code>源码</code></li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

public class LombokDemo {
    private Integer id;
    private String name;

    public LombokDemo() {
    }

    public Integer getId() {
        return this.id;
    }

    public String getName() {
        return this.name;
    }
}
</code></pre><h3 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h3><ul>
<li><code>功能</code></li>
</ul>
<blockquote>
<p>生成 toString 方法</p>
</blockquote>
<ul>
<li><code>源码</code></li>
</ul>
<pre><code>@ToString
public class LombokDemo {

    private Integer id;
    private String name;
}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

public class LombokDemo {
    private Integer id;
    private String name;

    public LombokDemo() {
    }

    public String toString() {
        return &quot;LombokDemo(id=&quot; + this.id + &quot;, name=&quot; + this.name + &quot;)&quot;;
    }
}
</code></pre><h3 id="Getter-lazy-true"><a href="#Getter-lazy-true" class="headerlink" title="@Getter(lazy = true)"></a>@Getter(lazy = true)</h3><ul>
<li><code>功能</code></li>
</ul>
<blockquote>
<p>懒加载属性</p>
</blockquote>
<ul>
<li><code>注意:</code></li>
</ul>
<blockquote>
<p>这个与上面@Getter 不同，那个是修饰在类上的，也可以修饰在属性上。如果有 lazy=true 只能修饰在属性，并且还要是 private final 修饰，限制很大</p>
</blockquote>
<ul>
<li><code>编码</code></li>
</ul>
<pre><code>public class LombokDemo {

    @Getter(lazy = true) private final List&lt;Integer&gt; ids = Arrays.asList(1, 2, 3, 4);
    private String name;
}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;

public class LombokDemo {
    private final AtomicReference&lt;Object&gt; ids = new AtomicReference();
    private String name;

    public LombokDemo() {
    }

    public List&lt;Integer&gt; getIds() {
        Object value = this.ids.get();
        if(value == null) {
            AtomicReference var2 = this.ids;
            synchronized(this.ids) {
                value = this.ids.get();
                if(value == null) {
                    List actualValue = Arrays.asList(new Integer[]{Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3), Integer.valueOf(4)});
                    value = actualValue == null?this.ids:actualValue;
                    this.ids.set(value);
                }
            }
        }

        return (List)((List)(value == this.ids?null:value));
    }
}
</code></pre><h3 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h3><ul>
<li><code>功能</code></li>
</ul>
<blockquote>
<p>生成 equals 方法与 hashCode 方法</p>
</blockquote>
<ul>
<li><code>源码</code></li>
</ul>
<pre><code>@EqualsAndHashCode
public class LombokDemo {

    private Integer id;
    private String name;
}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

public class LombokDemo {
    private Integer id;
    private String name;

    public LombokDemo() {
    }

    public boolean equals(Object o) {
        if(o == this) {
            return true;
        } else if(!(o instanceof LombokDemo)) {
            return false;
        } else {
            LombokDemo other = (LombokDemo)o;
            if(!other.canEqual(this)) {
                return false;
            } else {
                Integer this$id = this.id;
                Integer other$id = other.id;
                if(this$id == null) {
                    if(other$id != null) {
                        return false;
                    }
                } else if(!this$id.equals(other$id)) {
                    return false;
                }

                String this$name = this.name;
                String other$name = other.name;
                if(this$name == null) {
                    if(other$name != null) {
                        return false;
                    }
                } else if(!this$name.equals(other$name)) {
                    return false;
                }

                return true;
            }
        }
    }

    protected boolean canEqual(Object other) {
        return other instanceof LombokDemo;
    }

    public int hashCode() {
        boolean PRIME = true;
        byte result = 1;
        Integer $id = this.id;
        int result1 = result * 59 + ($id == null?43:$id.hashCode());
        String $name = this.name;
        result1 = result1 * 59 + ($name == null?43:$name.hashCode());
        return result1;
    }
}
</code></pre><h3 id="NoAragsConstructor"><a href="#NoAragsConstructor" class="headerlink" title="@NoAragsConstructor"></a>@NoAragsConstructor</h3><ul>
<li><code>功能</code></li>
</ul>
<blockquote>
<p>添加一个无参构造函数</p>
</blockquote>
<ul>
<li><code>注意</code></li>
</ul>
<blockquote>
<p>这个注解在没有其它有参构造函数的情况下使用意义不大，因为在这种情况下 java 默认会添加一个无参构造函数</p>
</blockquote>
<ul>
<li><code>源码</code></li>
</ul>
<pre><code>@NoArgsConstructor
public class LombokDemo {

    private Integer id;
    private String name;
}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

public class LombokDemo {
    private Integer id;
    private String name;

    public LombokDemo() {
    }
}
</code></pre><h3 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h3><ul>
<li><code>功能</code></li>
</ul>
<blockquote>
<p>添加一个所有参数的构造函数</p>
</blockquote>
<ul>
<li><code>源码</code></li>
</ul>
<pre><code>@AllArgsConstructor
public class LombokDemo {

    private Integer id;
    private String name;
}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

import java.beans.ConstructorProperties;

public class LombokDemo {
    private Integer id;
    private String name;

    @ConstructorProperties({&quot;id&quot;, &quot;name&quot;})
    public LombokDemo(Integer id, String name) {
        this.id = id;
        this.name = name;
    }
}
</code></pre><h3 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a>@RequiredArgsConstructor</h3><ul>
<li><code>功能</code></li>
</ul>
<blockquote>
<p>生成一个包含必填参数的构造函数</p>
</blockquote>
<ul>
<li><code>注意</code></li>
</ul>
<blockquote>
<p>要与@NonNull 搭配使用，该注解修饰的属性就是必填参数</p>
</blockquote>
<ul>
<li><code>源码</code></li>
</ul>
<pre><code>@RequiredArgsConstructor
public class LombokDemo {

    @NonNull private Integer id;
    private String name;
}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

import java.beans.ConstructorProperties;
import lombok.NonNull;

public class LombokDemo {
    @NonNull
    private Integer id;
    private String name;

    @ConstructorProperties({&quot;id&quot;})
    public LombokDemo(@NonNull Integer id) {
        if(id == null) {
            throw new NullPointerException(&quot;id&quot;);
        } else {
            this.id = id;
        }
    }
}
</code></pre><h3 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h3><ul>
<li><code>功能</code></li>
</ul>
<blockquote>
<p>这是一个综合注解了，等于同时使用</p>
<p><code>@Getter</code>, <code>@Setter</code>, <code>@ToString</code>, <code>@EqualsAndHashCode</code>,<code>@RequiredArgsConstructor</code></p>
</blockquote>
<ul>
<li><code>源码</code></li>
</ul>
<pre><code>@Data
public class LombokDemo {

    @NonNull private Integer id;
    private String name;
}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

public class LombokDemo {
    private Integer id;
    private String name;

    public LombokDemo() {
    }

    public Integer getId() {
        return this.id;
    }

    public String getName() {
        return this.name;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public void setName(String name) {
        this.name = name;
    }

    public boolean equals(Object o) {
        if(o == this) {
            return true;
        } else if(!(o instanceof LombokDemo)) {
            return false;
        } else {
            LombokDemo other = (LombokDemo)o;
            if(!other.canEqual(this)) {
                return false;
            } else {
                Integer this$id = this.getId();
                Integer other$id = other.getId();
                if(this$id == null) {
                    if(other$id != null) {
                        return false;
                    }
                } else if(!this$id.equals(other$id)) {
                    return false;
                }

                String this$name = this.getName();
                String other$name = other.getName();
                if(this$name == null) {
                    if(other$name != null) {
                        return false;
                    }
                } else if(!this$name.equals(other$name)) {
                    return false;
                }

                return true;
            }
        }
    }

    protected boolean canEqual(Object other) {
        return other instanceof LombokDemo;
    }

    public int hashCode() {
        boolean PRIME = true;
        byte result = 1;
        Integer $id = this.getId();
        int result1 = result * 59 + ($id == null?43:$id.hashCode());
        String $name = this.getName();
        result1 = result1 * 59 + ($name == null?43:$name.hashCode());
        return result1;
    }

    public String toString() {
        return &quot;LombokDemo(id=&quot; + this.getId() + &quot;, name=&quot; + this.getName() + &quot;)&quot;;
    }
}
</code></pre><h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3><ul>
<li><code>功能</code></li>
</ul>
<blockquote>
<p>不可变类的@Data, 他会默认给属性加上 final</p>
</blockquote>
<ul>
<li><code>源码</code></li>
</ul>
<pre><code>@Value
public class LombokDemo {

    private Integer id;
    private String name;
}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

import java.beans.ConstructorProperties;

public final class LombokDemo {
    private final Integer id;
    private final String name;

    @ConstructorProperties({&quot;id&quot;, &quot;name&quot;})
    public LombokDemo(Integer id, String name) {
        this.id = id;
        this.name = name;
    }

    public Integer getId() {
        return this.id;
    }

    public String getName() {
        return this.name;
    }

    public boolean equals(Object o) {
        if(o == this) {
            return true;
        } else if(!(o instanceof LombokDemo)) {
            return false;
        } else {
            LombokDemo other = (LombokDemo)o;
            Integer this$id = this.getId();
            Integer other$id = other.getId();
            if(this$id == null) {
                if(other$id != null) {
                    return false;
                }
            } else if(!this$id.equals(other$id)) {
                return false;
            }

            String this$name = this.getName();
            String other$name = other.getName();
            if(this$name == null) {
                if(other$name != null) {
                    return false;
                }
            } else if(!this$name.equals(other$name)) {
                return false;
            }

            return true;
        }
    }

    public int hashCode() {
        boolean PRIME = true;
        byte result = 1;
        Integer $id = this.getId();
        int result1 = result * 59 + ($id == null?43:$id.hashCode());
        String $name = this.getName();
        result1 = result1 * 59 + ($name == null?43:$name.hashCode());
        return result1;
    }

    public String toString() {
        return &quot;LombokDemo(id=&quot; + this.getId() + &quot;, name=&quot; + this.getName() + &quot;)&quot;;
    }
}
</code></pre><h3 id="Accessors"><a href="#Accessors" class="headerlink" title="@Accessors"></a>@Accessors</h3><ul>
<li><code>功能</code></li>
</ul>
<blockquote>
<p>这个注解要搭配@Getter 与@Setter 使用，用来修改默认的 setter 与 getter 方法的形式</p>
</blockquote>
<ul>
<li><code>注意</code></li>
</ul>
<blockquote>
<p>@Accessors 有三个参数可以使用</p>
<ol>
<li><p>chain   链式的形式</p>
</li>
<li><p>fluent   流式的形式</p>
</li>
<li><p>prefix   生成指定前缀的属性的 getter 与 setter 方法，并且生成的 getter 与 setter 方法时会去除前缀</p>
</li>
</ol>
</blockquote>
<ul>
<li><code>源码 chain = true</code></li>
</ul>
<pre><code>@Accessors(chain = true)
@Setter
@Getter
public class LombokDemo {

    private Integer id;
    private String name;
}
</code></pre><ul>
<li><code>编译后 chain = true</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

public class LombokDemo {
    private Integer id;
    private String name;

    public LombokDemo() {
    }

    public LombokDemo setId(Integer id) {
        this.id = id;
        return this;
    }

    public LombokDemo setName(String name) {
        this.name = name;
        return this;
    }

    public Integer getId() {
        return this.id;
    }

    public String getName() {
        return this.name;
    }
}
</code></pre><ul>
<li><code>源码 fluent = true</code></li>
</ul>
<pre><code>@Accessors(fluent = true)
@Setter
@Getter
public class LombokDemo {

    private Integer id;
    private String name;
}
</code></pre><ul>
<li><code>编译后 fluent = true</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

public class LombokDemo {
    private Integer id;
    private String name;

    public LombokDemo() {
    }

    public LombokDemo id(Integer id) {
        this.id = id;
        return this;
    }

    public LombokDemo name(String name) {
        this.name = name;
        return this;
    }

    public Integer id() {
        return this.id;
    }

    public String name() {
        return this.name;
    }
}
</code></pre><ul>
<li><code>源码 prefix = &quot;xxx&quot;</code></li>
</ul>
<pre><code>@Accessors(prefix = &quot;xxx&quot;)
@Setter
@Getter
public class LombokDemo {

    private Integer xxxId;
    private String name;
}
</code></pre><ul>
<li><code>编译后 prefix = &quot;xxx&quot;</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

public class LombokDemo {
    private Integer xxxId;
    private String name;

    public LombokDemo() {
    }

    public void setId(Integer xxxId) {
        this.xxxId = xxxId;
    }

    public Integer getId() {
        return this.xxxId;
    }
}
</code></pre><hr>
<h1 id="其它注解："><a href="#其它注解：" class="headerlink" title="其它注解："></a>其它注解：</h1><h2 id="日志相关"><a href="#日志相关" class="headerlink" title="日志相关"></a>日志相关</h2><h3 id="Log4j"><a href="#Log4j" class="headerlink" title="@Log4j"></a>@Log4j</h3><ul>
<li><code>源码</code></li>
</ul>
<pre><code>@Log4j
public class LombokDemo {

    private Integer xxxId;
    private String name;
}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

import org.apache.log4j.Logger;

public class LombokDemo {
    private static final Logger log = Logger.getLogger(LombokDemo.class);
    private Integer xxxId;
    private String name;

    public LombokDemo() {
    }
}
</code></pre><h3 id="CommonsLog"><a href="#CommonsLog" class="headerlink" title="@CommonsLog"></a>@CommonsLog</h3><ul>
<li><code>源码</code></li>
</ul>
<pre><code>@CommonsLog
public class LombokDemo {

    private Integer xxxId;
    private String name;
}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class LombokDemo {
    private static final Log log = LogFactory.getLog(LombokDemo.class);
    private Integer xxxId;
    private String name;

    public LombokDemo() {
    }
}
</code></pre><h3 id="Log"><a href="#Log" class="headerlink" title="@Log"></a>@Log</h3><ul>
<li><code>源码</code></li>
</ul>
<pre><code>@Log
public class LombokDemo {

    private Integer xxxId;
    private String name;
}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

import java.util.logging.Logger;

public class LombokDemo {
    private static final Logger log = Logger.getLogger(LombokDemo.class.getName());
    private Integer xxxId;
    private String name;

    public LombokDemo() {
    }
}
</code></pre><h3 id="Log4j2"><a href="#Log4j2" class="headerlink" title="@Log4j2"></a>@Log4j2</h3><ul>
<li><code>源码</code></li>
</ul>
<pre><code>@Log4j2
public class LombokDemo {

    private Integer xxxId;
    private String name;
}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class LombokDemo {
    private static final Logger log = LogManager.getLogger(LombokDemo.class);
    private Integer xxxId;
    private String name;

    public LombokDemo() {
    }
}
</code></pre><h3 id="Slf4j"><a href="#Slf4j" class="headerlink" title="@Slf4j"></a>@Slf4j</h3><ul>
<li><code>源码</code></li>
</ul>
<pre><code>@Slf4j
public class LombokDemo {

    private Integer xxxId;
    private String name;
}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LombokDemo {
    private static final Logger log = LoggerFactory.getLogger(LombokDemo.class);
    private Integer xxxId;
    private String name;

    public LombokDemo() {
    }
}
</code></pre><h2 id="设计模式相关"><a href="#设计模式相关" class="headerlink" title="设计模式相关"></a>设计模式相关</h2><h3 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h3><ul>
<li><code>功能</code></li>
</ul>
<blockquote>
<p>通过建造者模块来生成 bean</p>
</blockquote>
<ul>
<li><code>源码</code></li>
</ul>
<pre><code>@Builder
public class LombokDemo {

    private Integer id;
    private String name;
}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

public class LombokDemo {
    private Integer id;
    private String name;

    LombokDemo(Integer id, String name) {
        this.id = id;
        this.name = name;
    }

    public static LombokDemo.LombokDemoBuilder builder() {
        return new LombokDemo.LombokDemoBuilder();
    }

    public static class LombokDemoBuilder {
        private Integer id;
        private String name;

        LombokDemoBuilder() {
        }

        public LombokDemo.LombokDemoBuilder id(Integer id) {
            this.id = id;
            return this;
        }

        public LombokDemo.LombokDemoBuilder name(String name) {
            this.name = name;
            return this;
        }

        public LombokDemo build() {
            return new LombokDemo(this.id, this.name);
        }

        public String toString() {
            return &quot;LombokDemo.LombokDemoBuilder(id=&quot; + this.id + &quot;, name=&quot; + this.name + &quot;)&quot;;
        }
    }
}
</code></pre><h3 id="Delegate"><a href="#Delegate" class="headerlink" title="@Delegate"></a>@Delegate</h3><ul>
<li><code>功能</code></li>
</ul>
<blockquote>
<p>@Delegate 注释的属性，会把这个属性对象的公有非静态方法合到当前类</p>
</blockquote>
<ul>
<li><code>注意</code></li>
</ul>
<blockquote>
<p>公共 非静态方法</p>
</blockquote>
<ul>
<li><code>源码</code></li>
</ul>
<pre><code>public class LombokDemo {

    @Delegate
    private Integer id;
    private String name;
}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

public class LombokDemo {
    private Integer id;
    private String name;

    public LombokDemo() {
    }

    public byte byteValue() {
        return this.id.byteValue();
    }

    public short shortValue() {
        return this.id.shortValue();
    }

    public int intValue() {
        return this.id.intValue();
    }

    public long longValue() {
        return this.id.longValue();
    }

    public float floatValue() {
        return this.id.floatValue();
    }

    public double doubleValue() {
        return this.id.doubleValue();
    }

    public int compareTo(Integer arg0) {
        return this.id.compareTo(arg0);
    }
}
</code></pre><h2 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h2><h3 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a>@Cleanup</h3><ul>
<li><code>功能</code></li>
</ul>
<blockquote>
<p>关闭流</p>
</blockquote>
<ul>
<li><code>注意</code></li>
</ul>
<blockquote>
<p>关闭流的方式有点怪异，而且没有在<strong>finally</strong>里面关闭，如果出现异常的就不会关闭了</p>
</blockquote>
<ul>
<li><code>源码</code></li>
</ul>
<pre><code>public class LombokDemo {

    public void test() throws IOException {

        @Cleanup InputStream inputStream = new FileInputStream(&quot;xxx.txt&quot;);

    }

}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Collections;

public class LombokDemo {
    public LombokDemo() {
    }

    public void test() throws IOException {
        FileInputStream inputStream = new FileInputStream(&quot;xxx.txt&quot;);
        if(Collections.singletonList(inputStream).get(0) != null) {
            inputStream.close();
        }

    }
}
</code></pre><h3 id="Synchronized"><a href="#Synchronized" class="headerlink" title="@Synchronized"></a>@Synchronized</h3><ul>
<li><code>功能</code></li>
</ul>
<blockquote>
<p>给方法加一个同步块</p>
</blockquote>
<ul>
<li><code>源码</code></li>
</ul>
<pre><code>public class LombokDemo {

    @Synchronized
    public void test() throws IOException {

        System.out.println(&quot;test&quot;);

    }

}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

import java.io.IOException;

public class LombokDemo {
    private final Object $lock = new Object[0];

    public LombokDemo() {
    }

    public void test() throws IOException {
        Object var1 = this.$lock;
        synchronized(this.$lock) {
            System.out.println(&quot;test&quot;);
        }
    }
}
</code></pre><h3 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="@SneakyThrows"></a>@SneakyThrows</h3><ul>
<li><code>功能</code></li>
</ul>
<blockquote>
<p>忽略异常</p>
</blockquote>
<ul>
<li><code>源码</code></li>
</ul>
<pre><code>public class LombokDemo {

    @SneakyThrows
    public void test() {

        String s = new String(&quot;test&quot;.getBytes(), &quot;utf-8&quot;);

    }

}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

import java.io.IOException;

public class LombokDemo {
    private final Object $lock = new Object[0];

    public LombokDemo() {
    }

    public void test() throws IOException {
        Object var1 = this.$lock;
        synchronized(this.$lock) {
            System.out.println(&quot;test&quot;);
        }
    }
}
</code></pre><h3 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h3><ul>
<li><code>功能</code></li>
</ul>
<blockquote>
<p>设置不能为空的参数</p>
</blockquote>
<ul>
<li><code>源码</code></li>
</ul>
<pre><code>public class LombokDemo {

    public void test(@NonNull String val) {

    }
}
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>  package xyz.mrwood.study.lombok;

  import lombok.NonNull;

  public class LombokDemo {
      public LombokDemo() {
      }

      public void test(@NonNull String val) {
          if(val == null) {
              throw new NullPointerException(&quot;val&quot;);
          }
      }
  }
</code></pre><h3 id="UtilityClass"><a href="#UtilityClass" class="headerlink" title="@UtilityClass"></a>@UtilityClass</h3><ul>
<li><code>功能</code></li>
</ul>
<blockquote>
<p>把普通类转为工具类</p>
</blockquote>
<ul>
<li><code>源码</code></li>
</ul>
<pre><code>    @UtilityClass
    public class LombokDemo {

        private Integer id = 1;
        private String name = &quot;kiwi&quot;;

        public void util(){

            System.out.println(&quot;xxx&quot;);
        }
    }
</code></pre><ul>
<li><code>编译后</code></li>
</ul>
<pre><code>package xyz.mrwood.study.lombok;

public final class LombokDemo {
    private static Integer id = Integer.valueOf(1);
    private static String name = &quot;kiwi&quot;;

    public static void util() {
        System.out.println(&quot;xxx&quot;);
    }

    private LombokDemo() {
        throw new UnsupportedOperationException(&quot;This is a utility class and cannot be instantiated&quot;);
    }
}
</code></pre><p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-lombok-基础教程/">https://blog.coder4j.cn/2018/08/18/yuque-lombok-基础教程/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[maven 按环境加载配置文件]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-maven-%E6%8C%89%E7%8E%AF%E5%A2%83%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>通过 maven 的 profile 实现按环境来加载配置文件</p>
<h6 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h6><p>project_file_root<br>|—main<br>|——–java<br>|——–resources<br>|——–profile<br>|—————dev<br>|—————test<br>|—————beta<br>|—————release</p>
<h6 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h6><pre><code>    &lt;profiles&gt;
        &lt;profile&gt;
            &lt;id&gt;dev&lt;/id&gt;
            &lt;activation&gt;
                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
            &lt;/activation&gt;
            &lt;properties&gt;
                &lt;config.dir&gt;dev&lt;/config.dir&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;
        &lt;profile&gt;
            &lt;id&gt;test&lt;/id&gt;
            &lt;properties&gt;
                &lt;config.dir&gt;test&lt;/config.dir&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;
        &lt;profile&gt;
            &lt;id&gt;beta&lt;/id&gt;
            &lt;properties&gt;
                &lt;config.dir&gt;beta&lt;/config.dir&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;
        &lt;profile&gt;
            &lt;id&gt;release&lt;/id&gt;
            &lt;properties&gt;
                &lt;config.dir&gt;release&lt;/config.dir&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;
    &lt;/profiles&gt;

    &lt;build&gt;
        &lt;resources&gt;
            &lt;resource&gt;
                &lt;directory&gt;src/main/profile/${config.dir}&lt;/directory&gt;
                &lt;targetPath&gt;./&lt;/targetPath&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
                &lt;directory&gt;src/main/resources&lt;/directory&gt;
                &lt;targetPath&gt;./&lt;/targetPath&gt;
            &lt;/resource&gt;
        &lt;/resources&gt;
      &lt;/build&gt;
</code></pre><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><blockquote>
<p>大致思路就是建一个 profile 的目录，这个目录名可以随意只要跟后面保持一致就行，然后在这个目录下面建几个按环境区分的目录，通常是 dev(开发)，test（测试），beta（预发），release(正式)。然后再通过 maven 的 profile 特性，生成按环境的\${config.dir}的值。最后通过 maven 的 resources 标签来完成配置文件的拷贝，大功告成。</p>
</blockquote>
<h5 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h5><pre><code>mvn clean install -P(profile_id)
eg. mvn clean install -Pdev  --打包开发环境的配置文件
</code></pre><p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-maven-按环境加载配置文件/">https://blog.coder4j.cn/2018/08/18/yuque-maven-按环境加载配置文件/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[spring aop注解教程]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-spring-aop%E6%B3%A8%E8%A7%A3%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>spring aop 常用的有以下：</p>
<ul>
<li>通知类型：</li>
</ul>
</blockquote>
<ul>
<li>前置通知（Before advice）：在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。</li>
<li>后置通知（After returning advice）：在某连接点正常完成后执行的通知：例如，一个方法没有抛出任何异常，正常返回。</li>
<li>异常通知（After throwing advice）：在方法抛出异常退出时执行的通知。</li>
<li>最终通知（After (finally) advice）：当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。</li>
<li>环绕通知（Around Advice）：包围一个连接点的通知，如方法调用。这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它自己的返回值或抛出异常来结束执行。</li>
</ul>
<blockquote>
<ul>
<li>核心配置只要在 AOP 的实现方法上加上@Aspect 与在 spring 配置文件中加上 aop:aspectj-autoproxy/,spring 就可以配置 aop 方法，然后再根据方法的增强标签不同的效果，这里需要注意是它们的参数不同。</li>
</ul>
</blockquote>
<ul>
<li>pom.xml</li>
</ul>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mrwood_study<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xyz.mrwood.study<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>study-spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>study-spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.apache.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>4.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- spring开始 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context-support<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--spring 结束--></span>

        <span class="token comment" spellcheck="true">&lt;!-- AOP begin --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjrt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- AOP end --></span>

        <span class="token comment" spellcheck="true">&lt;!-- 日志开始 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 日志结束 --></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>spring-context.xml</li>
</ul>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--自动注入--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.mrwood.study<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

    <span class="token comment" spellcheck="true">&lt;!--开启aop--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>AopHandler.java</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * Copyright (c) 2016, 791650277@qq.com(Mr.kiwi) All Rights Reserved.
 */</span>
<span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>aop<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>JoinPoint<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ProceedingJoinPoint<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 项目：study
 * 包名：xyz.mrwood.study.aop
 * 功能：aop实现
 * 时间：2016-05-28 10:33
 * 作者：Mr.Kiwi
 * 通知类型：
 * 前置通知（Before advice）：在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。
 * 后置通知（After returning advice）：在某连接点正常完成后执行的通知：例如，一个方法没有抛出任何异常，正常返回。
 * 异常通知（After throwing advice）：在方法抛出异常退出时执行的通知。
 * 最终通知（After (finally) advice）：当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。
 * 环绕通知（Around Advice）：包围一个连接点的通知，如方法调用。这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它自己的返回值或抛出异常来结束执行。
 */</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AopHandler</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 拦截工程下所有的切点
     */</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* xyz.mrwood.study..*.*(..))"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getAllPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 拦截所有service层下的切点
     */</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* xyz.mrwood.study.service..*.*(..))"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getServicePoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true">/**
     * 前置增强
     * @param joinPoint
     */</span>
    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"getServicePoint()"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[前置增强开始]："</span> <span class="token operator">+</span> <span class="token string">"方法开始了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"getServicePoint()"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"ex"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionMethod</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[异常增强]："</span> <span class="token operator">+</span> <span class="token string">"如果你看到这行，就说明你的程序报错了！"</span> <span class="token operator">+</span> <span class="token string">"异常信息："</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 后置增强，只有在方法正常结束才会调用
     * @param returnVal
     */</span>
    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"getServicePoint()"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"returnVal"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturningMethod</span><span class="token punctuation">(</span>Object returnVal<span class="token punctuation">)</span><span class="token punctuation">{</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[后置增强]："</span> <span class="token operator">+</span> <span class="token string">"当你看到这个说明，你的方法没有正常结束了！"</span> <span class="token operator">+</span> <span class="token string">"它的返回值为："</span> <span class="token operator">+</span> returnVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 最终增强，类似于finally的功能
     */</span>
    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"getServicePoint()"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[最终增强]："</span> <span class="token operator">+</span> <span class="token string">"无论发论发生什么事，我都会运行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 环绕增强
     * @param proceedingJoinPoint
     */</span>
    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"getServicePoint()"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Object <span class="token function">aroundMethod</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[环绕增强开始]："</span> <span class="token operator">+</span> <span class="token string">"方法开始了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Object returnVal <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[环绕增强结束]："</span> <span class="token operator">+</span> <span class="token string">"方法已经结束了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> returnVal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>TargetService.java</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * Copyright (c) 2016, 791650277@qq.com(Mr.kiwi) All Rights Reserved.
 */</span>
<span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>service<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 项目：study
 * 包名：xyz.mrwood.study.service
 * 功能：被拦截的目标类
 * 时间：2016-05-28 10:32
 * 作者：Mr.Kiwi
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetService</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token keyword">return</span> <span class="token string">"hello "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>


        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>运行结果</li>
</ul>
<pre><code>[环绕增强开始]：方法开始了！
[前置增强开始]：方法开始了
[环绕增强结束]：方法已经结束了！
[最终增强]：无论发论发生什么事，我都会运行！
[后置增强]：当你看到这个说明，你的方法没有正常结束了！它的返回值为：test
</code></pre><p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-spring-aop注解教程/">https://blog.coder4j.cn/2018/08/18/yuque-spring-aop注解教程/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[tomcat 配置https证书]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-tomcat-%E9%85%8D%E7%BD%AEhttps%E8%AF%81%E4%B9%A6/</url>
      <content type="html"><![CDATA[<h1 id="Tomcat-配置-https-证书"><a href="#Tomcat-配置-https-证书" class="headerlink" title="Tomcat 配置 https 证书"></a>Tomcat 配置 https 证书</h1><blockquote>
<p>网上搜索出来大多数是通过 keytool 自已生成证书来完成，这种在工作很少用到（浏览器会报不安全）。以下是通过申请的证书配置过程。因为在配置中遇到了一些坑，记之</p>
</blockquote>
<h4 id="1、准备证书与私钥"><a href="#1、准备证书与私钥" class="headerlink" title="1、准备证书与私钥"></a>1、准备证书与私钥</h4><p><code>demo.crt</code>  <code>demo.key</code></p>
<h4 id="2、合并证书"><a href="#2、合并证书" class="headerlink" title="2、合并证书"></a>2、合并证书</h4><pre><code>openssl pkcs12 -export -in demo.crt -inkey demo.key -out demo.p12 -name demo
</code></pre><blockquote>
<p>注意：<br>1、 demo.crt 是你的证书<br>2、 demo.key 是你的私钥<br>3、 demo.p12 是合并后的证书<br>4、-name 后面的 demo 是指定的别名，后面配置 tomcat8.5 之后的版本需要用到，要记住<br>5、执行这条命令要设置一个导出密码，后面要用到，要记住，最好 6 位以上</p>
</blockquote>
<h4 id="3、生成-keystore-文件"><a href="#3、生成-keystore-文件" class="headerlink" title="3、生成 keystore 文件"></a>3、生成 keystore 文件</h4><pre><code>keytool -importkeystore -srckeystore demo.p12 -srcstoretype PKCS12 -destkeystore demo.jks
</code></pre><blockquote>
<p>注意：<br>1、demo.p12 是第二步生成的证书名<br>2、demo.jks 是生成的 keystore 文件名<br>3、执行这条命令会首先让你设置一个密码，这个密码后面配置会用到，要记住。然后验证上一步设置的密码。推荐该步骤设置的密码与上一步一致，如果不一致可能会出现错误详见 <a href="http://hw1287789687.iteye.com/blog/1965703" target="_blank" rel="noopener">java.security.UnrecoverableKeyException: Cannot recover key - 简单的幸福 - ITeye 技术网站</a></p>
</blockquote>
<h4 id="4、配置-tomcat"><a href="#4、配置-tomcat" class="headerlink" title="4、配置 tomcat"></a>4、配置 tomcat</h4><p><code>tomcat 8.5 之前</code></p>
<pre><code>&lt;Connector SSLEnabled=&quot;true&quot; acceptCount=&quot;100&quot; clientAuth=&quot;false&quot;
    disableUploadTimeout=&quot;true&quot; enableLookups=&quot;false&quot; maxThreads=&quot;25&quot;
    port=&quot;8443&quot; keystoreFile=&quot;~/ssl/demo.jks&quot; keystorePass=&quot;123456&quot;
    protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot; scheme=&quot;https&quot;
    secure=&quot;true&quot; sslProtocol=&quot;TLS&quot; /&gt;
</code></pre><p><code>tomcat 8.5 之后</code></p>
<pre><code>&lt;Connector port=&quot;8643&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;
maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot;&gt;
&lt;SSLHostConfig&gt;
&lt;Certificate certificateKeystoreFile=&quot;~/ssl/demo.jks&quot;
certificateKeyAlias=&quot;demo&quot;
certificateKeystorePassword=&quot;123456&quot;
type=&quot;RSA&quot; /&gt;
&lt;/SSLHostConfig&gt;
&lt;/Connector&gt;
</code></pre><blockquote>
<p>注意：<br>1、~_ssl_demo.jks   是你前面步骤生成的 storekey 文件的路径<br>2、123456 是前面第 3 步设置的密码<br>3、tomcat8.5 之后有一个 certificateKeyAlias 这个是 2 步设置-name 的值</p>
</blockquote>
<h4 id="参数地址："><a href="#参数地址：" class="headerlink" title="参数地址："></a>参数地址：</h4><p><a href="http://blog.csdn.net/freeiceflame/article/details/50420059" target="_blank" rel="noopener">TOMCAT 导入通过第三方证书机构获取的证书 - IceFlame 博客频道 - CSDN.NET</a></p>
<p><a href="http://hw1287789687.iteye.com/blog/1965703" target="_blank" rel="noopener">java.security.UnrecoverableKeyException: Cannot recover key - 简单的幸福 - ITeye 技术网站</a></p>
<p><a href="https://www.oschina.net/question/12_23148" target="_blank" rel="noopener">5 分钟内搞定 Tomcat 的 SSL 配置 - 开源中国社区</a></p>
<p><a href="https://bbs.wosign.com/forum.php?mod=viewthread&amp;tid=2881" target="_blank" rel="noopener">tomcat 8.5+版本 SSL 证书部署-沃通 CA 官方论坛 -   专业数字证书论坛</a></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-tomcat-配置https证书/">https://blog.coder4j.cn/2018/08/18/yuque-tomcat-配置https证书/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring boot 对于 js 的 long 精度问题处理]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-Spring-boot-%E5%AF%B9%E4%BA%8E-js-%E7%9A%84-long-%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>这几天前后端联调，遇到一个诡异的问题。前端请求后端提供的详情接口得到用户的 Id 与其它数据。然后前端又把这个 Id 与修改的数据内容一同传回后端的修改接口。结果前端反馈死活修改不了。</p>
<p>然后各种 debug 查日志，发现详情接口返回给前端的与前端调用修改接口传回的 Id 不一致。</p>
<p>然后一查发现是 js 的精度问题，原以为 js 只是浮点型会有精度问题，没想到长整型也会出现。因为是语言的限制，前端要解决这个问题，还是很吃力的。所以只能在后端在传 json 的时候把 long 全部转成 string 类型。</p>
<p>然后问题又来了，因为项目已写了差不多了。太多地方用了 long 类型，改基础类的字段类型是不可能了。于是想在对象转 json 的时候能否统一处理。</p>
<p>因为使用的是 spring boot 框架，而 spring boot 默认的 json 框架的 Jackson。就是找了一下，果然 jackson 有一个可以自定义的类型转换器机制。直接上代码 ↓</p>
<ul>
<li>json 转换器<br>JsonLong2StrConverter<br>public class JsonLong2StrConverter extends StdSerializer {</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token function">JsonLong2StrConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Long value<span class="token punctuation">,</span> JsonGenerator gen<span class="token punctuation">,</span> SerializerProvider provider<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>

    gen<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>使用配置<br>JsonConf<br>@Configuration<br>@EnableWebMvc<br>public class JsonConf extends WebMvcConfigurerAdapter {</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">Jackson2ObjectMapperBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//            .propertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE)</span>
            <span class="token punctuation">.</span><span class="token function">serializationInclusion</span><span class="token punctuation">(</span>
                Include<span class="token punctuation">.</span>NON_NULL<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">serializerByType</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JsonLong2StrConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">serializerByType</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JsonLong2StrConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样 spring boot 在转换 json 时，发现是 Long 类型就直接转成 String 类型，也就是加个单引号。</p>
<p>参考：<br><a href="http://okeeper.leanote.com/post/Spring-boot-%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89Json%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2" target="_blank" rel="noopener">Spring boot 配置自定义 Json 类型转换</a></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-Spring-boot-对于-js-的-long-精度问题处理/">https://blog.coder4j.cn/2018/08/18/yuque-Spring-boot-对于-js-的-long-精度问题处理/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[docker 安装 workpress]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-docker-%E5%AE%89%E8%A3%85-workpress/</url>
      <content type="html"><![CDATA[<ul>
<li>使用 docker 安装 wordpress</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装数据库</span>
docker run --name db --env MYSQL_ROOT_PASSWORD<span class="token operator">=</span>example -d mariadb

<span class="token comment" spellcheck="true"># 安装 wordpress</span>
docker run --name MyWordPress --link db:mysql -p 8080:80 -d wordpress
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>安装成功效果图<br><img src="http://ww1.sinaimg.cn/large/68f7efe0gy1fn1igx342oj21sc0tsdjn.jpg#width=" alt></p>
<ul>
<li><p>命令解析</p>
<ul>
<li>安装数据库</li>
</ul>
</li>
</ul>
<pre><code>docker run --name db --env MYSQL_ROOT_PASSWORD=example -d mariadb
</code></pre><pre><code>  - docker run

     - 启动容器的命令

  - --name db

     - 指定启动容器的名称

  - --env MYSQL_ROOT_PASSWORD=example

     - 传入环境变量，此处是设置 mysql 密码为 example

  - -d

     - 后台运行，否则前台进行
</code></pre><ul>
<li>安装 wordpress</li>
</ul>
<pre><code>docker run --name MyWordPress --link db:mysql -p 8080:80 -d wordpress
</code></pre><pre><code>  - --link db:mysql

     - 与上面启动的 db 容器建立联系

  - -p 8080:80

     - 端口映射，把宿主机的8080端口映射到容器内的80端口
</code></pre><p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-docker-安装-workpress/">https://blog.coder4j.cn/2018/08/18/yuque-docker-安装-workpress/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[docker 安装 gitlab]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-docker-%E5%AE%89%E8%A3%85-gitlab/</url>
      <content type="html"><![CDATA[<ul>
<li>使用 docker 安装 gitlab</li>
</ul>
<pre><code># 安装 postgresql
docker run --name=gitlab-postgresql -d --env DB_NAME=gitlabhq_prodution --env DB_USER=gitlab --env DB_PASS=password sameersbn/postgresql:9.4-12
# 安装 redis
docker run --name gitlab-redis -d sameersbn/redis
# 安装 gitlab
docker run --name gitlab -d --link gitlab-postgresql:postgresql --link gitlab-redis:redisio --publish 10022:22 --publish 10080:80 --env GITLAB_PORT=10080 --env GITLAB_SSH_PORT=10022 --env GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alpha-numeric-string sameersbn/gitlab:8.4.4
</code></pre><ul>
<li><p>访问 <a href="http://xn--ip-gm8c691d:10080" target="_blank" rel="noopener">http://本地 ip:10080</a><br><img src="http://ww1.sinaimg.cn/large/68f7efe0gy1fn1jbcqanij21ro11sq8s.jpg#width=" alt></p>
</li>
<li><p>参考链接<br><a href="https://github.com/sameersbn/docker-gitlab" target="_blank" rel="noopener">docker-gitlab</a><br><a href="http://www.damagehead.com/docker-gitlab/" target="_blank" rel="noopener">Zero to GitLab in 5 seconds or less*</a></p>
</li>
</ul>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-docker-安装-gitlab/">https://blog.coder4j.cn/2018/08/18/yuque-docker-安装-gitlab/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[linux 用户管理]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-linux-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">useradd</span> 用户名称
adduser 用户名称
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><a href="https://my.oschina.net/lyp82nlf/blog/477319" target="_blank" rel="noopener">Linux 添加新用户命令：useradd 与 adduser 的区别</a></p>
<h4 id="设置用户密码"><a href="#设置用户密码" class="headerlink" title="设置用户密码"></a>设置用户密码</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">passwd</span> 用户名称
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">userdel</span> 用户名称
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h4><h5 id="添加后并设置密码仍无法登录"><a href="#添加后并设置密码仍无法登录" class="headerlink" title="添加后并设置密码仍无法登录?"></a>添加后并设置密码仍无法登录?</h5><blockquote>
<p>查看 /etc/ssh/sshd_config 文件中是否允许登录，更多无法登录问题 <a href="http://lakemoonstar.iteye.com/blog/1471532" target="_blank" rel="noopener">root 帐户无法登陆解决办法</a></p>
</blockquote>
<h5 id="修改了-etc-ssh-sshd-config-仍然无效"><a href="#修改了-etc-ssh-sshd-config-仍然无效" class="headerlink" title="修改了/etc/ssh/sshd_config 仍然无效?"></a>修改了/etc/ssh/sshd_config 仍然无效?</h5><blockquote>
<p>要更新配置，不能直接使用 source xxx,要重启 ssh 服务，使用<code>service sshd restart</code></p>
</blockquote>
<h4 id="相关博客"><a href="#相关博客" class="headerlink" title="相关博客"></a>相关博客</h4><p><a href="https://blog.csdn.net/beitiandijun/article/details/41678251" target="_blank" rel="noopener">linux 用户管理（1）—-创建用户（adduser 和 useradd）和删除用户（userdel）</a></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-linux-用户管理/">https://blog.coder4j.cn/2018/08/18/yuque-linux-用户管理/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx 常用配置]]></title>
      <url>https://blog.coder4j.cn/2018/08/18/yuque-nginx-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="配置结构"><a href="#配置结构" class="headerlink" title="配置结构"></a>配置结构</h3><p><img src="https://upload-images.jianshu.io/upload_images/9824247-6f7a9706b9f3982b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240#width=" alt></p>
<h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><ol>
<li>配置 https</li>
</ol>
<pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>
    <span class="token keyword">listen</span> <span class="token number">443</span><span class="token punctuation">;</span>
    <span class="token keyword">server_name</span> localhost<span class="token punctuation">;</span>
    <span class="token keyword">ssl</span> on<span class="token punctuation">;</span>
    <span class="token keyword">root</span> html<span class="token punctuation">;</span>
    <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>
    <span class="token keyword">ssl_certificate</span>   cert<span class="token operator">/</span><span class="token number">1535407297197</span><span class="token punctuation">.</span>pem<span class="token punctuation">;</span>
    <span class="token keyword">ssl_certificate_key</span>  cert<span class="token operator">/</span><span class="token number">1535407297197</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>
    <span class="token keyword">ssl_session_timeout</span> 5m<span class="token punctuation">;</span>
    <span class="token keyword">ssl_ciphers</span> ECDHE<span class="token operator">-</span>RSA<span class="token operator">-</span>AES128<span class="token operator">-</span>GCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>ECDHE<span class="token punctuation">:</span>ECDH<span class="token punctuation">:</span>AES<span class="token punctuation">:</span>HIGH<span class="token punctuation">:</span><span class="token operator">!</span>NULL<span class="token punctuation">:</span><span class="token operator">!</span>aNULL<span class="token punctuation">:</span><span class="token operator">!</span>MD5<span class="token punctuation">:</span><span class="token operator">!</span>ADH<span class="token punctuation">:</span><span class="token operator">!</span>RC4<span class="token punctuation">;</span>
    <span class="token keyword">ssl_protocols</span> TLSv1 TLSv1<span class="token number">.1</span> TLSv1<span class="token number">.2</span><span class="token punctuation">;</span>
    <span class="token keyword">ssl_prefer_server_ciphers</span> on<span class="token punctuation">;</span>
    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>
        <span class="token keyword">root</span> html<span class="token punctuation">;</span>
        <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>配置端口转发</li>
</ol>
<pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">http</span><span class="token punctuation">{</span>
    <span class="token keyword">proxy_read_timeout</span> 300s<span class="token punctuation">;</span>
    <span class="token keyword">proxy_send_timeout</span> 300s<span class="token punctuation">;</span>
    <span class="token keyword">keepalive_requests</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token keyword">keepalive_timeout</span> 300s<span class="token punctuation">;</span>
    <span class="token keyword">server</span><span class="token punctuation">{</span>
        <span class="token keyword">listen</span>  <span class="token number">8888</span><span class="token punctuation">;</span>
        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>
            <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">1.20</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>参考</p>
<ul>
<li><a href="https://blog.csdn.net/qq_31226223/article/details/78766314" target="_blank" rel="noopener">Nginx 配置端口转发 映射 以及连接超时问题</a></li>
</ul>
</li>
</ul>
<ol>
<li>跨域问题解决</li>
</ol>
<pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>
        <span class="token keyword">listen</span>       <span class="token number">8081</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span>前端调试打开localhost<span class="token punctuation">:</span><span class="token number">8081</span>页面<span class="token punctuation">;</span>js文件中后台接口访问localhost<span class="token punctuation">:</span><span class="token number">8081</span><span class="token operator">/</span>data<span class="token punctuation">;</span>这样就保证不跨域了
        <span class="token keyword">server_name</span>  localhost<span class="token punctuation">;</span>
        <span class="token keyword">access_log</span>  logs<span class="token operator">/</span>host<span class="token punctuation">.</span>access<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span>
        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>    <span class="token operator">/</span><span class="token operator">/</span>访问localhost<span class="token punctuation">:</span><span class="token number">8081</span>实际上访问是前端端口<span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>
            <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">location</span> <span class="token operator">^</span><span class="token operator">~</span> <span class="token operator">/</span>data <span class="token punctuation">{</span><span class="token operator">/</span><span class="token operator">/</span>访问localhost<span class="token punctuation">:</span><span class="token number">8081</span><span class="token operator">/</span>data实际上访问是后端接口<span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.128</span><span class="token punctuation">.</span><span class="token number">166.42</span><span class="token punctuation">:</span><span class="token number">8533</span><span class="token operator">/</span>
            <span class="token keyword">rewrite</span> <span class="token operator">^</span><span class="token operator">/</span>data<span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">/</span>$<span class="token number">1</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.128</span><span class="token punctuation">.</span><span class="token number">166.42</span><span class="token punctuation">:</span><span class="token number">8533</span><span class="token operator">/</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>配置压缩</li>
</ol>
<pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">gzip</span> on<span class="token punctuation">;</span>
<span class="token keyword">gzip_disable</span> <span class="token string">"msie6"</span><span class="token punctuation">;</span>
<span class="token keyword">gzip_vary</span> on<span class="token punctuation">;</span>
<span class="token keyword">gzip_proxied</span> any<span class="token punctuation">;</span>
<span class="token keyword">gzip_comp_level</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">gzip_buffers</span> <span class="token number">16</span> 8k<span class="token punctuation">;</span>
<span class="token keyword">gzip_http_version</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
<span class="token keyword">gzip_types</span> text<span class="token operator">/</span>plain text<span class="token operator">/</span>css application<span class="token operator">/</span>json application<span class="token operator">/</span>x<span class="token operator">-</span>javascript text<span class="token operator">/</span>xml application<span class="token operator">/</span>xml application<span class="token operator">/</span>xml<span class="token operator">+</span>rss image<span class="token operator">/</span>jpeg image<span class="token operator">/</span>gif image<span class="token operator">/</span>png
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>参考</p>
<ul>
<li><a href="https://blog.csdn.net/u013160932/article/details/50704618" target="_blank" rel="noopener">Nginx—-使用压缩传输</a></li>
</ul>
</li>
</ul>
<ol>
<li>负载均衡</li>
</ol>
<pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">upstream</span> favtomcat <span class="token punctuation">{</span>
       <span class="token keyword">server</span> <span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">6.108</span><span class="token punctuation">:</span><span class="token number">7080</span> weight<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
       <span class="token keyword">server</span> <span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">0.85</span><span class="token punctuation">:</span><span class="token number">8980</span> weight<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>
            <span class="token keyword">root</span>   html<span class="token punctuation">;</span>
            <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>
            <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>favtomcat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>参考</p>
<ul>
<li><a href="http://blog.51cto.com/favccxx/1622091" target="_blank" rel="noopener">Nginx 配置 upstream 实现负载均衡</a></li>
</ul>
</li>
</ul>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token comment" spellcheck="true"># 重新打开日志文件</span>
nginx <span class="token operator">-</span>s reopen
<span class="token comment" spellcheck="true"># 重新加载配置文件</span>
nginx <span class="token operator">-</span>s reload
<span class="token comment" spellcheck="true"># 查看nginx的配置文件的目录，测试配置文件是否正确</span>
nginx <span class="token operator">-</span>t
<span class="token comment" spellcheck="true"># 停止ngix（优雅关闭）</span>
nginx <span class="token operator">-</span>s quit
<span class="token comment" spellcheck="true"># 关闭 nginx(快速关闭，不管有没有请求)</span>
nginx <span class="token operator">-</span>s stop
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><ol>
<li><p>invalid PID</p>
<ul>
<li>错误信息</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-nginx"><code class="language-nginx">nginx<span class="token punctuation">:</span> <span class="token punctuation">[</span>error<span class="token punctuation">]</span> invalid <span class="token keyword">PID</span> number <span class="token string">""</span> in "<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>nginx
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>解决方法</li>
</ul>
<pre><code>$ sudo nginx -c /usr/local/etc/nginx/nginx.conf
$ sudo nginx -s reload
</code></pre><ol>
<li><p>nginx 做转发时，带’_‘的 header 内容丢失</p>
<ul>
<li>解决方法</li>
</ul>
</li>
</ol>
<pre><code>underscores_in_headers on;
</code></pre><ul>
<li><p>参考</p>
</li>
<li><p><a href="https://blog.csdn.net/Nazir2513/article/details/70889319" target="_blank" rel="noopener">nginx 做转发时，带’_‘的 header 内容丢失</a></p>
</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class="line-numbers language-nginx"><code class="language-nginx">
      <span class="token keyword">worker_processes</span>  <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token operator">/</span><span class="token operator">/</span>开启进程数小于CPU数
      <span class="token keyword">error_log</span>  logs<span class="token operator">/</span>error<span class="token punctuation">.</span>log<span class="token punctuation">;</span>  <span class="token operator">/</span><span class="token operator">/</span>自定义错误日志保存位置，全局设置，默认logs<span class="token operator">/</span>error<span class="token punctuation">.</span>log
      <span class="token keyword">events</span> <span class="token punctuation">{</span>
          <span class="token keyword">worker_connections</span>  <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">/</span>每个进程最大连接数（最大连接<span class="token operator">=</span>连接数x进程数）每个worker允许同时产生多少个链接，默认<span class="token number">1024</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">http</span> <span class="token punctuation">{</span>
          <span class="token keyword">include</span>       mime<span class="token punctuation">.</span><span class="token keyword">types</span><span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token operator">/</span>文件扩展名与文件类型映射表
          <span class="token keyword">default_type</span>  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>     <span class="token operator">/</span><span class="token operator">/</span>默认文件类型
          <span class="token keyword">log_format</span>  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" '</span>    <span class="token operator">/</span><span class="token operator">/</span>自定义日志文件输出格式 全局设置
                    <span class="token string">'$status $body_bytes_sent "$http_referer" '</span>
                    <span class="token string">'"$http_user_agent" "$http_x_forwarded_for"'</span><span class="token punctuation">;</span>
          <span class="token keyword">access_log</span>  logs<span class="token operator">/</span>access<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span>    自定义全局请求日志保存位置，全局设置，默认logs<span class="token operator">/</span>access<span class="token punctuation">.</span>log， 定义格式：文件存储位置 <span class="token operator">+</span> 日志输出格式
          <span class="token keyword">sendfile</span>        on<span class="token punctuation">;</span>     <span class="token operator">/</span><span class="token operator">/</span>打开发送文件
          <span class="token keyword">keepalive_timeout</span>  <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token operator">/</span><span class="token operator">/</span>连接超时时间
          <span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span><span class="token punctuation">;</span>
          <span class="token keyword">gzip</span>  on<span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token operator">/</span>打开<span class="token keyword">gzip</span>压缩
          配置虚拟主机，基于域名、ip和端口，可以配置多个<span class="token keyword">server</span>
          <span class="token keyword">server</span> <span class="token punctuation">{</span>
              <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">/</span>监听端口，可以是ip<span class="token punctuation">:</span>port 或者 port
              <span class="token keyword">server_name</span>  <span class="token number">10.128</span><span class="token punctuation">.</span><span class="token number">166.57</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>监听域名<span class="token punctuation">,</span>可以是ip或者域名，<span class="token keyword">server_name</span>有三种匹配方式：精准匹配（www<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>com）、通配符匹配（<span class="token operator">*</span><span class="token punctuation">.</span>domain<span class="token punctuation">.</span>com 、www<span class="token punctuation">.</span><span class="token operator">*</span>）、正则表达式匹配（<span class="token operator">~</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">)</span>\<span class="token punctuation">.</span>domain\<span class="token punctuation">.</span>com$）
              <span class="token keyword">access_log</span>  logs<span class="token operator">/</span>host<span class="token punctuation">.</span>access<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span>     <span class="token operator">/</span><span class="token operator">/</span>自定义请求日志，局部，当前<span class="token keyword">server</span>有效
              <span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span>50x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>  <span class="token operator">/</span><span class="token operator">/</span>错误页面及其返回地址
              <span class="token keyword">charset</span> UTF<span class="token number">-8</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">/</span>设置字符集
              <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>     <span class="token operator">/</span><span class="token operator">/</span>当访问<span class="token number">10.128</span><span class="token punctuation">.</span><span class="token number">166.57</span><span class="token punctuation">:</span><span class="token number">80</span>时
                 <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.128</span><span class="token punctuation">.</span><span class="token number">166.57</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">:</span><span class="token number">8083</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>实际上访问的时<span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.128</span><span class="token punctuation">.</span><span class="token number">166.57</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">:</span><span class="token number">8083</span>地址
              <span class="token punctuation">}</span>
              <span class="token keyword">location</span> <span class="token operator">^</span><span class="token operator">~</span><span class="token operator">/</span>data <span class="token punctuation">{</span>     <span class="token operator">/</span><span class="token operator">/</span>当访问<span class="token number">10.128</span><span class="token punctuation">.</span><span class="token number">166.57</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token operator">/</span>data时
                 <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.128</span><span class="token punctuation">.</span><span class="token number">166.57</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">:</span><span class="token number">8084</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>实际上访问的时<span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.128</span><span class="token punctuation">.</span><span class="token number">166.57</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">:</span><span class="token number">8084</span>地址
              <span class="token punctuation">}</span>

          <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://my.oschina.net/hansonwang99/blog/1835408" target="_blank" rel="noopener">从一份配置清单详解 Nginx 服务器配置</a></li>
</ol>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/08/18/yuque-nginx-常用配置/">https://blog.coder4j.cn/2018/08/18/yuque-nginx-常用配置/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[Linux] Linux用户管理]]></title>
      <url>https://blog.coder4j.cn/2018/06/20/Linux-Linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><pre class="line-numbers language-shell"><code class="language-shell">useradd 用户名称
adduser 用户名称
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><a href="https://my.oschina.net/lyp82nlf/blog/477319" target="_blank" rel="noopener">Linux添加新用户命令：useradd 与adduser的区别</a></p>
<h4 id="设置用户密码"><a href="#设置用户密码" class="headerlink" title="设置用户密码"></a>设置用户密码</h4><pre class="line-numbers language-shell"><code class="language-shell">passwd 用户名称
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><pre class="line-numbers language-shell"><code class="language-shell">userdel 用户名称
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h4><h5 id="添加后并设置密码仍无法登录"><a href="#添加后并设置密码仍无法登录" class="headerlink" title="添加后并设置密码仍无法登录?"></a>添加后并设置密码仍无法登录?</h5><blockquote>
<p>查看 /etc/ssh/sshd_config 文件中是否允许登录，更多无法登录问题 <a href="http://lakemoonstar.iteye.com/blog/1471532" target="_blank" rel="noopener">root 帐户无法登陆解决办法</a></p>
<h5 id="修改了-etc-ssh-sshd-config仍然无效"><a href="#修改了-etc-ssh-sshd-config仍然无效" class="headerlink" title="修改了/etc/ssh/sshd_config仍然无效?"></a>修改了/etc/ssh/sshd_config仍然无效?</h5><p>要更新配置，不能直接使用source xxx,要重启ssh服务，使用<code>service sshd restart</code></p>
</blockquote>
<h4 id="相关博客"><a href="#相关博客" class="headerlink" title="相关博客"></a>相关博客</h4><p><a href="https://blog.csdn.net/beitiandijun/article/details/41678251" target="_blank" rel="noopener">linux用户管理（1）—-创建用户（adduser和useradd）和删除用户（userdel）</a></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/06/20/Linux-Linux用户管理/">https://blog.coder4j.cn/2018/06/20/Linux-Linux用户管理/</a> </p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[问题集] mysql 数据库存储表情]]></title>
      <url>https://blog.coder4j.cn/2018/05/15/%E9%97%AE%E9%A2%98%E9%9B%86-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%82%A8%E8%A1%A8%E6%83%85/</url>
      <content type="html"><![CDATA[<h4 id="问题出现原因"><a href="#问题出现原因" class="headerlink" title="问题出现原因"></a>问题出现原因</h4><blockquote>
<p>Emoji表情符号为4个字节的字符，而 utf8 字符集只支持1-3个字节的字符，导致无法写入数据库。  </p>
</blockquote>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul>
<li>语言<ul>
<li>java</li>
</ul>
</li>
<li>数据库连接池<ul>
<li>druid</li>
</ul>
</li>
<li>数据库<ul>
<li>mysql</li>
</ul>
</li>
<li>持久性框架<ul>
<li>mybatis</li>
</ul>
</li>
</ul>
<h4 id="数据库修改"><a href="#数据库修改" class="headerlink" title="数据库修改"></a>数据库修改</h4><ul>
<li>修改数据库字符集character-set-server=utf8mb4 重启数据库生效 </li>
</ul>
<h4 id="代码修改"><a href="#代码修改" class="headerlink" title="代码修改"></a>代码修改</h4><ul>
<li>druid 配置文件修改</li>
</ul>
<pre class="line-numbers language-xml"><code class="language-xml">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connectionInitSqls<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>set names utf8mb4;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/05/15/问题集-mysql-数据库存储表情/">https://blog.coder4j.cn/2018/05/15/问题集-mysql-数据库存储表情/</a> </p>
]]></content>
      
        <categories>
            
            <category> 问题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 问题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[转] 有没有安全的工作？]]></title>
      <url>https://blog.coder4j.cn/2018/04/02/%E8%BD%AC-%E6%9C%89%E6%B2%A1%E6%9C%89%E5%AE%89%E5%85%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%EF%BC%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文由 <a href="http://ksria.com/simpread/" target="_blank" rel="noopener">简悦 SimpRead</a> 转码， 原文地址 <a href="http://www.ruanyifeng.com/blog/2015/12/safe-job.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/12/safe-job.html</a></p>
</blockquote>
<p>如果你经常使用互联网，可能知道有一种东西叫做 Flash。</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015121501.jpg" alt></p>
<p>它是一种软件，用来制作网页游戏、动画，以及视频播放器。只要观看网络视频，基本都会用到它。</p>
<p>七八年前，它是最热门的互联网技术之一。如果不安装 Flash，很多网站根本打不开。那时还流行用它制作动画，随便一个作品，就有几十万、上百万的浏览量。电视台甚至开辟栏目，播放网上流行的 Flash 动画。各大互联网公司都有专门的 Flash 工程师，还是属于那种比较抢手、收入较高的工程师。我记得那个时候，社会上也有大量的 Flash 培训班，它们的招生广告都写着保证就业。</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015121502.jpg" alt></p>
<p>后来，Flash 就不行了。2010 年，乔布斯宣布，苹果手机不会使用 Flash，因为影响手机性能。再后来，新的技术兴起，它就开始没落了。上个月，BBC 发表一篇报道，名字就叫<a href="http://www.bbc.com/news/technology-34799790" target="_blank" rel="noopener">《Flash 还能活多久？》</a>。话音刚落，一周后，这项技术的拥有者 Adobe 公司<a href="http://arstechnica.com/information-technology/2015/12/adobe-to-kill-off-flash-in-januarys-creative-cloud-update/" target="_blank" rel="noopener">宣布</a>，放弃 Flash 这个名字，软件将<a href="http://www.zdnet.com/article/adobe-renames-flash-professional-to-animate-pivots-to-html5/" target="_blank" rel="noopener">重新定位</a>，只用来制作动画。</p>
<p>说了这么多，我并不是感叹 Flash 这项技术的没落，这也是很正常的事，而是感叹那些从事 Flash 开发的工程师，他们该怎么办呢？你在一个领域钻研多年，都成了专家，突然之间那个领域过时了，你的所学所长没人需要了，那将是怎样的处境？</p>
<p>那些年里，我在上海遇见过一个朋友。他开了一家软件公司，专门面向海外市场开发 Flash 游戏。公司不大，十几个人，那时正是最好的年景，每个月都有几十万、甚至上百万人民币进账，看上去前景一片大好。可是，谁能想到 Flash 技术突然就会不行了呢？开始时，公司还能维持，后来手机游戏起来了，Flash 游戏的市场顿时萎缩。我见过他的招聘广告，改招手机游戏的开发者。再后来，就再没听到过他的消息。</p>
<p>当一种技术消亡的时候，与它相关的工作岗位也就消亡了。这种事情在技术行业特别多，因为技术的升级换代太快了。</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015121503.jpg" alt></p>
<p>我再举一个例子。苹果手机出现之前，最流行的手机都使用 Nokia 公司开发的 “塞班” 操作系统。你可能还记得，它的典型标志就是 “九宫格” 菜单。那时，塞班工程师也是非常抢手的，彻底掌握它那一套开发技术，我估计至少要一两年时间。后来，智能手机流行，塞班一败涂地。2010 年，诺基亚宣布放弃塞班，改用微软的操作系统。再后来，Nokia 自己也没了，所有手机工程师都遣散了。我知道，Nokia 中国有一个资深工程师，选择重进大学去读 MBA 学位。</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015121504.jpg" alt></p>
<p>试想一下，你花了多年的心血，孜孜不倦地投入和练习，终于掌握了一门赖以谋生的手艺，还进入了世界排名第一位的通信业跨国公司。就在你觉得人生终于有一点安全感的时候，一切就变了，几年之间，曾经的巨无霸土崩瓦解，不仅你的职位没了，更可怕的是，以前的产品已经没人用了，全世界现在不生产任何塞班设备。你的手艺的价值变成了零。</p>
<p>有人说，可以再学习、然后重新就业啊，塞班不行了，可以学习苹果手机开发。没错，说得完全正确。但是，你以前的积累没了，需要从零开始。跟现在刚刚走出校门的学生，站在同一条起跑线上，学习同样的东西。说实话，虽然你有几年开发经验，但很可能并没有那些 20 岁的年轻人学得快。在一个高速变化的行业，经验有时候不是帮助，而是障碍，因为以前的那套行不通了。退一步说，就算你重新学习了，但苹果手机的开发也在变，你得不停地追赶新东西 。一个人的人生，能经受得起多少次从零开始呢？</p>
<p>“终身学习” 这个词完全没错，但是想通过 “终身学习” 保持职业竞争力，我觉得不太可能。</p>
<p>程序员，乃至其他很多技术岗位，其实是青春饭。只有底层的技术，还有一些稳定性，越接近应用层，技术的升级换代就越快。你学会一门技术，然后吃上三十年，这种事情越来越少见了。更常见的是，几年以后，你会的东西就淘汰了，你被迫重新学习新东西，或者重新就业。</p>
<p>为什么中国很少见 35 岁以上的程序员？因为他们上学时学习的东西都淘汰了，必须和年轻人一起学习新技术。你很难比年轻人更有竞争力，其中最关键的是，雇佣刚走出校门的学生，比雇佣你便宜得多。</p>
<p>其他行业的升级换代，不如技术行业那么夸张和激进。职业的安全感可以保持得更久一些，但远不是高枕无忧。技术正在取代人力劳动，比如财务会计这样的行业，随着电子支付的兴起，将来肯定不会需要这么多财务人员。”互联网 +” 从某个方面说，就是使用互联网技术取代一部分人力，更便宜地服务更多的顾客。</p>
<p>回到本文的题目，世界上有没有安全的工作？应该是有的吧，但真的不多。公务员可能比较安全，因为这个职业改变得比较缓慢，而且没有技术升级的压力。医生和律师，也比较安全，因为对于这些行业，经验很重要，但技术正在把它们的成本降下来。厨师和物流，也是比较安全的行业，因为技术再进步，也总需要人来做饭和送货，但是它们是纯粹的体力劳动，没有进入门槛，供给非常大，想拿到高工资不容易。</p>
<p>最终来说，人类社会的就业形态正在发生深刻的改变，”终生职业” 越来越少了。每个人都应该尽早打算，如果明天你的职业消失了，你该怎么办？</p>
<p>[说明] 原文发表在<a href="http://culture.caixin.com/2015-12-11/100885728.html" target="_blank" rel="noopener">《财新周刊》</a>（2015 年 12 月 11 日）的专栏。</p>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/04/02/转-有没有安全的工作？/">https://blog.coder4j.cn/2018/04/02/转-有没有安全的工作？/</a> </p>
]]></content>
      
        <categories>
            
            <category> 转载 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 职业道路 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[转] Java 8 开发的 4 大顶级技巧]]></title>
      <url>https://blog.coder4j.cn/2018/02/26/%E8%BD%AC-Java-8-%E5%BC%80%E5%8F%91%E7%9A%84-4-%E5%A4%A7%E9%A1%B6%E7%BA%A7%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文由 <a href="http://ksria.com/simpread/" target="_blank" rel="noopener">简悦 SimpRead</a> 转码， 原文地址 <a href="http://www.importnew.com/22417.html" target="_blank" rel="noopener">http://www.importnew.com/22417.html</a> 译文出处： <a href="https://www.evget.com/article/2016/8/10/24674.html" target="_blank" rel="noopener">Elyn</a>   原文出处：<a href="https://dzone.com/articles/java-8-top-tips" target="_blank" rel="noopener">Java 8 Top Tips</a></p>
</blockquote>
<p>我使用 Java 8 编码已经有些年头，既用于新的应用程序，也用来迁移现有的应用，感觉是时候写一些我发现的非常有用的 “最佳实践”。我个人并不喜欢“最佳实践” 这个说法，因为它意味着 “一刀切” 的解决方案，而编码不可能是这样的工作方式——我们需要亲自去发现什么样的解决方案才是有效的。但是我发现了一些 Java 8 代码中可以帮助我们的一些选择，让我们一起来看看吧。</p>
<h3 id="1-Optional"><a href="#1-Optional" class="headerlink" title="1.Optional"></a><strong>1.Optional</strong></h3><p>Optional 是一个严重被低估的功能，并且有潜力删除很多困扰我们的 NullPointerExceptions。这在代码边界中（要么是正在使用的 API，要么是正在暴露的 API）特别有用，因为它允许你和你的调用代码来推理所期待的东西。</p>
<p>然而，不加思考和设计就应用 Optional 可能会导致影响大量的类，并可能导致可读性更差。下面是一些关于如何高效使用 Optional 的技巧。</p>
<h4 id="Optional-应该只用于返回类型"><a href="#Optional-应该只用于返回类型" class="headerlink" title="Optional 应该只用于返回类型"></a><strong>Optional 应该只用于返回类型</strong></h4><p>…… 不是参数，也不是字段。幸运的是，IntelliJ IDEA 的让你打开检查来查看是是否遵循这些建议。</p>
<p><img src="http://image.evget.com/images/article/2016/java81.png" alt></p>
<p>Optional 值应在遇到它们的地方中处理。IntelliJ IDEA 的建议会防止代码 Optional 泄漏，所以请记得在你发现 Optional 的地方处理它，迅速采取行动。</p>
<p><img src="http://image.evget.com/images/article/2016/java82.png" alt></p>
<h4 id="不应该简单调用-get"><a href="#不应该简单调用-get" class="headerlink" title="不应该简单调用 get()"></a><strong>不应该简单调用 get()</strong></h4><p>Optional 的功能是表达这个值可能是空的，并让你应对这种情况。因此，在对它做任何事情之前一定要检查是否有一个值。只是简单得调用 get() 而不先检查 isPresent() 在某些时候可能会导致空指针。幸运的是，IntelliJ IDEA 也有检查可以提醒你这一点。</p>
<p><img src="http://image.evget.com/images/article/2016/java83.png" alt></p>
<h4 id="可能有更优雅的方式"><a href="#可能有更优雅的方式" class="headerlink" title="可能有更优雅的方式"></a><strong>可能有更优雅的方式</strong></h4><p>结合了 get() 的 isPresent() 当然会很赞…</p>
<p><img src="http://image.evget.com/images/article/2016/java84.png" alt></p>
<p>…… 但也有更优雅的解决方案。你可以使用 orElse 在万一是空值的情况下给一个替代方案。</p>
<p><img src="http://image.evget.com/images/article/2016/java85.png" alt></p>
<p>…… 或者你可以使用 orElseGet 说明在值为空的情况下调用哪个方法。这似乎与上面的例子相同，但 supplier 方法将只在需要的时候调用，因此，如果这是一种昂贵的方法，那么使用 lambda 会有更佳性能。</p>
<p><img src="http://image.evget.com/images/article/2016/java86.png" alt></p>
<h3 id="2-使用-Lambda-表达式"><a href="#2-使用-Lambda-表达式" class="headerlink" title="2. 使用 Lambda 表达式"></a><strong>2. 使用 Lambda 表达式</strong></h3><p>Lambda 表达式是 Java 8 的主要特点之一。即使你还没有使用 Java 8，你现在可能已经对它们有了基本的了解。它们是用 Java 编程的一种新的方式，并且什么是 “最佳实践” 还不明显。下面是我喜欢遵循的一些指引。</p>
<h4 id="保持简短"><a href="#保持简短" class="headerlink" title="保持简短"></a><strong>保持简短</strong></h4><p>函数式程序员与较长的 lambda 表达式相处会更愉快，但那些淫浸于 Java 多年的人会发现保持 lambda 表达式为区区几行代码更容易。你甚至可能更愿意将其限制到一行代码，并且你可以轻松<a href="http://www.amazon.cn/gp/product/B003BY6PLK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=importnew-23&amp;linkCode=as2&amp;camp=536&amp;creative=3200&amp;creativeASIN=B003BY6PLK" title="重构" target="_blank" rel="noopener">重构</a>较长的表达式为一个方法。</p>
<p><img src="http://image.evget.com/images/article/2016/java87.png" alt></p>
<p>这些甚至可能会成为方法引用。方法引用一开始会觉得有点陌生，但实际上坚持方法引用是有价值的，因为它们在某些情况下有助于可读性，后面我会讨论到这一点。</p>
<p><img src="http://image.evget.com/images/article/2016/java88.png" alt></p>
<h4 id="明确"><a href="#明确" class="headerlink" title="明确"></a><strong>明确</strong></h4><p>类型信息缺少 lambda 表达式，所以你可能会觉得包含类型信息用于参数会很有用。</p>
<p><img src="http://image.evget.com/images/article/2016/java899.png" alt></p>
<p>正如你所见，这回变得相当笨拙。所以我更喜欢给参数取一个有用的名字。当然，不管你有没有这么做，IntelliJ IDEA 可以让你看到参数得类型信息。</p>
<p><img src="http://image.evget.com/images/article/2016/java89.png" alt></p>
<p>甚至是 lambda 所代表的函数式接口：</p>
<p><img src="http://image.evget.com/images/article/2016/java810.png" alt></p>
<h3 id="3-针对-Lambda-表达式设计"><a href="#3-针对-Lambda-表达式设计" class="headerlink" title="3. 针对 Lambda 表达式设计"></a><strong>3. 针对 Lambda 表达式设计</strong></h3><p>我认为 lambda 表达式有点像泛型——和泛型一起，我们经常使用它们（例如，添加类型信息到 List&lt;&gt;），但最好我们可以设计一种方法或一个具有泛型类型（例如 Person&lt; T&gt;）的类。同样的，当使用类似于 Streams API 的东西时，我们会传递 lambda 表达式，但更好的是创造一个需要 lambda 参数的方法。</p>
<p>但是，如果你发现自己处于这类情况下，下面有一些超棒的技巧。</p>
<h4 id="IntelliJ-IDEA-可以帮你引进函数式参数"><a href="#IntelliJ-IDEA-可以帮你引进函数式参数" class="headerlink" title="IntelliJ IDEA 可以帮你引进函数式参数"></a><strong>IntelliJ IDEA 可以帮你引进函数式参数</strong></h4><p>这让你可以在有人将传递一个 lambda 而非 Object 的地方创建一个参数。此功能的好处是，它表明，现有函数式接口匹配规格说明。</p>
<p><img src="http://image.evget.com/images/article/2016/java811.png" alt></p>
<p>这会导致…</p>
<h4 id="使用现有的函数式接口"><a href="#使用现有的函数式接口" class="headerlink" title="使用现有的函数式接口"></a><strong>使用现有的函数式接口</strong></h4><p>随着开发人员越来越熟悉 Java 8 代码，我们就能知道当使用如 Supplier 和 Consumer 的接口时，会发生什么，以及创建一个本地的 ErrorMessageCreator（举个例子）可能会造成混乱，而且浪费。看看这个函数包了解一下哪些已经是可用的。</p>
<h4 id="添加-FunctionalInterface-到函数式接口"><a href="#添加-FunctionalInterface-到函数式接口" class="headerlink" title="添加 @FunctionalInterface 到函数式接口"></a><strong>添加 @FunctionalInterface 到函数式接口</strong></h4><p>如果你确实需要创建自己的函数式接口，那么就这样用此注释标记。这似乎没有太大的作用，但 IntelliJ IDEA 会告诉你，在你的接口不能匹配用于函数式接口的异常的时候。当你没有指定要覆盖的方法时，它会标志：</p>
<p><img src="http://image.evget.com/images/article/2016/java812.png" alt></p>
<p>当你指定了太多方法的时候，它会标志：</p>
<p><img src="http://image.evget.com/images/article/2016/java813.png" alt></p>
<p>并且如果你应用它到一个类而不是接口时，它会警告你：</p>
<p><img src="http://image.evget.com/images/article/2016/java814.png" alt></p>
<p>lambda 表达式可用于带有一个单一抽象方法的任何接口，但它们不能用于符合相同标准的抽象类。似乎不合逻辑，但就是这样。</p>
<h3 id="4-Stream"><a href="#4-Stream" class="headerlink" title="4.Stream"></a><strong>4.Stream</strong></h3><p>Stream API 是 Java 8 另一个大特点，并且我认为我们还真的不知道这对我们的编码方式会产生多大的改变。下面是我发现的一些有用的东西</p>
<h4 id="排队点操作符"><a href="#排队点操作符" class="headerlink" title="排队点操作符"></a><strong>排队点操作符</strong></h4><p>我个人更喜欢排队我的流操作。当然，你没有必要这样，当我发现这样做对我有帮助：</p>
<ul>
<li>一目了然地看到我有哪些操作</li>
<li>调试更容易（虽然 IntelliJ IDEA 确实提供了对一行中的任意多个 lambda 表达式设置断点的能力，但是拆分到不同的行会变得更简单）</li>
<li>当我测试东西的时候注释操作</li>
<li>轻松插入 peek() 用于调试或测试</li>
</ul>
<p><img src="http://image.evget.com/images/article/2016/java815.png" alt></p>
<p>此外，在我看来，它更整洁。如果我们按照这个模式，在减少代码行数方面我们并没有增加很多。</p>
<p>你可能需要调整格式设置以排列点操作符。</p>
<p><img src="http://image.evget.com/images/article/2016/java816.png" alt></p>
<h4 id="使用方法引用"><a href="#使用方法引用" class="headerlink" title="使用方法引用"></a><strong>使用方法引用</strong></h4><p>是的，确实需要一段时间来适应这个奇怪的语法。但是，如果使用得当，它确实可以增加可读性。请看：</p>
<p><img src="http://image.evget.com/images/article/2016/java817.png" alt></p>
<p>与（相对）新的 Objects 类上的辅助方法相比较：</p>
<p><img src="http://image.evget.com/images/article/2016/java818.png" alt></p>
<p>后者的代码对于哪些值是要保存的更加明确。当 lambda 可以被折叠到方法参考的时候，IntelliJ IDEA 通常会让你知道。</p>
<p><img src="http://image.evget.com/images/article/2016/java819.png" alt></p>
<h4 id="当遍历一个集合时，在可行的情况下使用-Streams-API"><a href="#当遍历一个集合时，在可行的情况下使用-Streams-API" class="headerlink" title="当遍历一个集合时，在可行的情况下使用 Streams API"></a><strong>当遍历一个集合时，在可行的情况下使用 Streams API</strong></h4><p>… 或者新的集合方法，如 forEach。IntelliJ IDEA 给你建议是：</p>
<p><img src="http://image.evget.com/images/article/2016/java820.png" alt></p>
<p>一般使用 Streams API 比循环和 if 语句的组合更加明确。例如：</p>
<p><img src="http://image.evget.com/images/article/2016/java821.png" alt></p>
<p>IntelliJ IDEA 建议这可重构为：</p>
<p><img src="http://image.evget.com/images/article/2016/java822.png" alt></p>
<p>我所做的性能测试表明这种重构令人惊讶——并不总是可预测性能是保持不变，改善还是变得更糟。与往常一样，如果性能在应用程序中是关键，那么在交付一种风格到另一种之前衡量它。</p>
<h4 id="遍历数组时使用循环"><a href="#遍历数组时使用循环" class="headerlink" title="遍历数组时使用循环"></a><strong>遍历数组时使用循环</strong></h4><p>但是，使用 Java 8 并不一定意味着你必须到处使用流和新的集合方法。IntelliJ IDEA 会建议转换成流，但是，这并不意味着你必须回答 “yes”（记得检查是可以抑制或关闭的）。</p>
<p>特别是，遍历原始类型的小型数组几乎肯定会用，以获得更好的性能循环，很可能（至少对于 Java 开发人员是新的流）更具可读性。</p>
<p><img src="http://image.evget.com/images/article/2016/java823.png" alt></p>
<p>与任何技巧一样，规则并不是一成不变的，但你应该决定是尽可能地使用 Streams API，还是依然对一些操作使用循环。总之，要一致。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a><strong>最后</strong></h3><p>每天都在发现新的东西，并且有时候我的偏好会发生变化——例如，方法引用，我曾经深恶痛绝并且避免在我的代码中使用。现在我很想听听你的秘诀！</p>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/02/26/转-Java-8-开发的-4-大顶级技巧/">https://blog.coder4j.cn/2018/02/26/转-Java-8-开发的-4-大顶级技巧/</a> </p>
]]></content>
      
        
        <tags>
            
            <tag> jdk8 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[转] 使用 Java8 Optional 的正确姿势]]></title>
      <url>https://blog.coder4j.cn/2018/02/26/%E8%BD%AC-%E4%BD%BF%E7%94%A8-Java8-Optional-%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</url>
      <content type="html"><![CDATA[<p><a href="http://www.importnew.com/22060.html" target="_blank" rel="noopener">原文链接</a></p>
<p><img src="http://ww1.sinaimg.cn/large/68f7efe0gy1fou0ynetdcj21hc3847rl.jpg" alt></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/02/26/转-使用-Java8-Optional-的正确姿势/">https://blog.coder4j.cn/2018/02/26/转-使用-Java8-Optional-的正确姿势/</a> </p>
]]></content>
      
        
        <tags>
            
            <tag> jdk8 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[转] 版本号命名指南]]></title>
      <url>https://blog.coder4j.cn/2018/02/26/%E8%BD%AC-%E7%89%88%E6%9C%AC%E5%8F%B7%E5%91%BD%E5%90%8D%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文由 <a href="http://ksria.com/simpread/" target="_blank" rel="noopener">简悦 SimpRead</a> 转码， 原文地址 <a href="http://www.importnew.com/28063.html" target="_blank" rel="noopener">http://www.importnew.com/28063.html</a> 原文出处： <a href="http://wsfdl.com/devops/2016/09/27/%E7%89%88%E6%9C%AC%E5%8F%B7.html" target="_blank" rel="noopener">koala bear</a></p>
</blockquote>
<p>首先看看某些常见软件的版本号：</p>
<ul>
<li>Linux Kernel： 0.0.1，1.0.0，2.6.32，3.0.18…，若用 X.Y.Z 表示，则偶数 Y 表示稳定版本，奇数 Y 表示开发版本。</li>
<li>Windows：windows 98，windows 2000，windows xp，windows 7…，最大的特点是杂乱无章，毫无规律。</li>
<li>SSH Client：0.9.8。</li>
<li>OpenStack：2014.1.3，2015.1.1.dev8。</li>
</ul>
<p>从上可以看出，不同的软件版本号风格各异，随着系统的规模越大，依赖的软件越多，如果这些软件没有遵循一套规范的命名风格，容易造成 <a href="https://en.wikipedia.org/wiki/Dependency_hell" target="_blank" rel="noopener">Dependency Hell</a>。所以当我们发布版本时，版本号的命名需要遵循某种规则，其中 <a href="http://semver.org/" target="_blank" rel="noopener">Semantic Versioning 2.0.0</a> 定义了一套简单的规则及条件来约束版本号的配置和增长。本文根据 <a href="http://semver.org/" target="_blank" rel="noopener">Semantic Versionning 2.0.0</a> 和 <a href="http://docs.openstack.org/developer/pbr/semver.html" target="_blank" rel="noopener">Semantic Versioning 3.0.0</a> 选择性的整理出版本号命名规则指南。</p>
<hr>
<h1 id="版本号命名规则指南"><a href="#版本号命名规则指南" class="headerlink" title="版本号命名规则指南"></a>版本号命名规则指南</h1><p>版本号的格式为 X.Y.Z(又称 Major.Minor.Patch)，递增的规则为：</p>
<ul>
<li>X 表示主版本号，当 API 的兼容性变化时，X 需递增。</li>
<li>Y 表示次版本号，当增加功能时 (不影响 API 的兼容性)，Y 需递增。</li>
<li>Z 表示修订号，当做 Bug 修复时 (不影响 API 的兼容性)，Z 需递增。</li>
</ul>
<p>详细的规则如下：</p>
<ol>
<li>X, Y, Z 必须为非负整数，且不得包含前导零，必须按数值递增，如 1.9.0 -&gt; 1.10.0 -&gt; 1.11.0</li>
<li>0.Y.Z 的版本号表明软件处于初始开发阶段，意味着 API 可能不稳定；1.0.0 表明版本已有稳定的 API。</li>
<li>当 API 的兼容性变化时，X 必须递增，Y 和 Z 同时设置为 0；当新增功能 (不影响 API 的兼容性) 或者 API 被标记为 Deprecated 时，Y 必须递增，同时 Z 设置为 0；当进行 bug fix 时，Z 必须递增。</li>
<li>先行版本号 (Pre-release) 意味该版本不稳定，可能存在兼容性问题，其格式为：X.Y.Z.[a-c][正整数]，如 1.0.0.a1，1.0.0.b99，1.0.0.c1000。</li>
<li>开发版本号常用于 CI-CD，格式为 X.Y.Z.dev[正整数]，如 1.0.1.dev4。</li>
<li>版本号的排序规则为依次比较主版本号、次版本号和修订号的数值，如 1.0.0 &lt; 1.0.1 &lt; 1.1.1 &lt; 2.0.0；对于先行版本号和开发版本号，有：1.0.0.a100 &lt; 1.0.0，2.1.0.dev3 &lt; 2.1.0；当存在字母时，以 ASCII 的排序来比较，如 1.0.0.a1 &lt; 1.0.0.b1。</li>
<li>注意：版本一经发布，不得修改其内容，任何修改必须在新版本发布！</li>
</ol>
<hr>
<h1 id="一些修饰的词"><a href="#一些修饰的词" class="headerlink" title="一些修饰的词"></a>一些修饰的词</h1><ul>
<li>alpha：内部版本</li>
<li>beta：测试版</li>
<li>demo：演示版</li>
<li>enhance：增强版</li>
<li>free：自由版</li>
<li>full version：完整版，即正式版</li>
<li>lts：长期维护版本</li>
<li>release：发行版</li>
<li>rc：即将作为正式版发布</li>
<li>standard：标准版</li>
<li>ultimate：旗舰版</li>
<li>upgrade：升级版</li>
</ul>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/02/26/转-版本号命名指南/">https://blog.coder4j.cn/2018/02/26/转-版本号命名指南/</a> </p>
]]></content>
      
        <categories>
            
            <category> 程序员的自我修养 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 程序员的自我修养 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[转] 正则表达式简明参考]]></title>
      <url>https://blog.coder4j.cn/2018/02/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文由 <a href="http://ksria.com/simpread/" target="_blank" rel="noopener">简悦 SimpRead</a> 转码， 原文地址 <a href="http://xiaoleilu.com/regex-guide" target="_blank" rel="noopener">http://xiaoleilu.com/regex-guide</a></p>
</blockquote>
<h1 id="正则表达式简明参考"><a href="#正则表达式简明参考" class="headerlink" title="正则表达式简明参考"></a><a href="/regex-guide" title="正则表达式简明参考">正则表达式简明参考</a></h1><p>2014-09-11</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我想在网上最出名的正则相关的一篇文章就是《正则表达式30分钟入门教程》了，说实话这篇文章确实是我的正则入门，但是随着使用熟练，冗长的文章已经不能满足我了，在此做个归纳总结，用于快速查阅。</p>
<p>以下语法在<strong>Java</strong>中有效，大部分应该是通用的。</p>
<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>元字符，又叫字符集，就是用一些特殊符号表示特定种类的字符或位置。</p>
<p><strong>匹配字符</strong></p>
<ul>
<li><code>.</code> 匹配除换行符以外的任意字符</li>
<li><code>\w</code> 匹配字母或数字或下划线或汉字</li>
<li><code>\s</code> 匹配任意的空白符</li>
<li><code>\d</code> 匹配数字</li>
</ul>
<p><strong>匹配位置</strong></p>
<ul>
<li><code>\b</code> 匹配单词的开始或结束</li>
<li><code>^</code> 匹配字符串的开始</li>
<li><code>$</code> 匹配字符串的结束</li>
<li><code>\G</code> 上一个匹配的结尾（本次匹配开始）</li>
<li><code>\A</code> 字符串开头(类似<code>^</code>，但不受处理多行选项的影响)</li>
<li><code>\Z</code> 字符串结尾或行尾(不受处理多行选项的影响)</li>
<li><code>\z</code> 字符串结尾(类似<code>$</code>，但不受处理多行选项的影响)</li>
</ul>
<p><strong>重复</strong></p>
<ul>
<li><code>*</code> 重复零次或更多次</li>
<li><code>+</code> 重复一次或更多次</li>
<li><code>?</code> 重复零次或一次</li>
<li><code>{n}</code> 重复n次</li>
<li><code>{n,}</code> 重复n次或更多次</li>
<li><code>{n,m}</code> 重复n到m次</li>
</ul>
<h2 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h2><p>如果想匹配元字符本身或者正则中的一些特殊字符，使用<code>\</code>转义。例如匹配<code>*</code>这个字符则使用<code>\*</code>，匹配<code>\</code>这个字符，使用<code>\\</code>。</p>
<p>需要转义的字符：<code>$</code>, <code>(</code>, <code>)</code>, <code>*</code>, <code>+</code>, <code>.</code>, <code>[</code>, <code>]</code>, <code>?</code>, <code>\</code>, <code>^</code>, <code>{</code>, <code>}</code>, <code>|</code></p>
<h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><p>当需要匹配明确的字符或字符集合时候，就用到字符类。</p>
<p><strong>特殊字符</strong></p>
<ul>
<li><code>\0hh</code> 8进制值hh所表示的字符</li>
<li><code>\xhh</code> 16进制值hh所表示的字符</li>
<li><code>\uhhhh</code> 16进制值hhhh所表示的Unicode字符</li>
<li><code>\t</code> Tab</li>
<li><code>\n</code> 换行符</li>
<li><code>\r</code> 回车符</li>
<li><code>\f</code> 换页符</li>
<li><code>\e</code> Escape</li>
<li><code>\cN</code> ASCII控制字符。比如<code>\cC</code>代表<code>Ctrl+C</code></li>
<li><code>\p{name}</code> Unicode中命名为name的字符类，例如<code>\p{IsGreek}</code></li>
</ul>
<p><strong>陈列</strong></p>
<ul>
<li><code>[aeiou]</code> 匹配一个元音字符</li>
<li><code>[.?!]</code> 匹配给定的一个标点</li>
</ul>
<p><strong>范围</strong></p>
<ul>
<li><code>[0-9]</code> 匹配0~9的数字，同<code>\d</code></li>
<li><code>[a-z]</code> 匹配所有小写字母</li>
<li><code>[a-zA-Z]</code> 匹配所有字母</li>
<li><code>[a-z0-9A-Z_\u4E00-\u9FFF]</code> 等同于<code>\w</code></li>
</ul>
<h2 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h2><p>表示不属于元字符或者字符类的字符</p>
<p><strong>反义元字符</strong></p>
<ul>
<li><code>\W</code> 匹配任意不是字母，数字，下划线，汉字的字符</li>
<li><code>\S</code> 匹配任意不是空白符的字符</li>
<li><code>\D</code> 匹配任意非数字的字符</li>
<li><code>\B</code> 匹配不是单词开头或结束的位置</li>
</ul>
<p><strong>反义字符类</strong></p>
<ul>
<li><code>[^x]</code> 匹配除了x以外的任意字符</li>
<li><code>[^aeiou]</code> 匹配除了aeiou这几个字母以外的任意字符</li>
</ul>
<h2 id="分枝条件"><a href="#分枝条件" class="headerlink" title="分枝条件"></a>分枝条件</h2><p>又叫逻辑运算符，在此<code>X</code>和<code>Y</code>表示两个<strong>表达式</strong></p>
<ul>
<li><code>XY</code> X紧跟Y</li>
<li><code>X|Y</code> 表示X或Y，从左到右，满足第一个条件就不会继续匹配了。</li>
</ul>
<h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>在这里我把<strong>表达式</strong>统一以<code>\w</code>为例：</p>
<ul>
<li><code>(\w)</code> 被一个括号包围起来是一个整体，表示一个分组</li>
<li><code>(\w)(\w)</code> 自动命名分组，第一个小括号是分组1，第二个小括号是分组2</li>
<li><code>(?&#39;Word&#39;\w+))</code> 表示定义了一个叫做<code>Word</code>的分组</li>
<li><code>(?&lt;Word&gt;\w+))</code> 表示定义了一个叫做<code>Word</code>的分组</li>
<li><code>(?:\w+)</code> 匹配exp,不捕获匹配的文本，也不给此分组分配组号</li>
</ul>
<h2 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h2><p>后面的表达式可以引用前面的某个分组，用<code>\1</code>表示，就好像分组1的值赋值给了<code>\1</code>这个变量，这个变量可以在后面任意位置引用。</p>
<ul>
<li><code>\1</code> 表示分组1匹配的文本</li>
<li><code>\k&lt;Word&gt;</code> 表示分组<code>Word</code>匹配的文本</li>
</ul>
<p>匹配重复两个的英文，例如匹配<code>Hello Hello</code>、<code>lei123 lei123</code>：</p>
<ol>
<li><code>(\w+)\s+\1</code></li>
<li><code>(?&lt;Word&gt;\w+)\s+\k&lt;Word&gt;</code></li>
</ol>
<h2 id="零宽断言（正向和负向）"><a href="#零宽断言（正向和负向）" class="headerlink" title="零宽断言（正向和负向）"></a>零宽断言（正向和负向）</h2><p>零宽断言表示匹配字符的时候再添加一些定位条件，使匹配更精准。</p>
<ul>
<li><code>\w+(?=ing)</code> 匹配以<code>ing</code>结尾的多个字符（不包括ing）</li>
<li><code>\w+(?!ing)</code> 匹配<strong>不是</strong>以<code>ing</code>结尾的多个字符</li>
</ul>
<hr>
<ul>
<li><code>(?&lt;=re)\w+</code> 匹配以<code>re</code>开头的多个字符（不包括re）</li>
<li><code>(?&lt;!re)\w+</code> 匹配<strong>不是</strong>以<code>re</code>开头的多个字符</li>
</ul>
<hr>
<ul>
<li><code>(?&lt;=\s)\d+(?=\s)</code> 匹配两边是空白符的数字，不包括空白符</li>
</ul>
<h2 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h2><p><strong>贪婪</strong>：匹配尽可能长的字符串</p>
<p><strong>懒惰</strong>：匹配尽可能短的字符串</p>
<p>懒惰模式的启用只需在<strong>重复元字符</strong>之后加<code>?</code>既可。</p>
<ul>
<li><code>*?</code> 重复任意次，但尽可能少重复</li>
<li><code>+?</code> 重复1次或更多次，但尽可能少重复</li>
<li><code>??</code> 重复0次或1次，但尽可能少重复</li>
<li><code>{n,m}?</code> 重复n到m次，但尽可能少重复</li>
<li><code>{n,}?</code> 重复n次以上，但尽可能少重复</li>
</ul>
<h2 id="处理选项"><a href="#处理选项" class="headerlink" title="处理选项"></a>处理选项</h2><p>在表达式里插记号的方式来启用绝大多数的模式，在正则的哪里插入，就从哪里启用。</p>
<ol>
<li><code>(?i)</code>：忽略大小写(CASE_INSENSITIVE)</li>
<li><code>(?x)</code>：忽略空格字符(COMMENTS)</li>
<li><code>(?s)</code>：<code>.</code>匹配任意字符，包括换行符（DOTALL）</li>
<li><code>(?m)</code>：多行模式（MULTILINE）</li>
<li><code>(?u)</code>：对Unicode符大小写不敏感（UNICODE_CASE），必须启用<strong>CASE_INSENSITIVE</strong></li>
<li><code>(?d)</code>：只有’\n’才被认作一行的中止（UNIX_LINES）</li>
</ol>
<h2 id="平衡组-递归匹配"><a href="#平衡组-递归匹配" class="headerlink" title="平衡组/递归匹配"></a>平衡组/递归匹配</h2><p>平衡组用于匹配嵌套层次结构，常用于匹配HTML标签（当HTML内容不规范，起始标签和结束标签数量不同时，匹配出正确配对的标签），在此把表达式统一以<code>\w</code>为例。</p>
<ul>
<li><code>(?&#39;group&#39;\w)</code> 捕获的分组（<code>\w</code>匹配到的内容）命名为<code>group</code>，并压入堆栈</li>
<li><code>(?&#39;-group&#39;\w)</code> 捕获分组（<code>\w</code>匹配到的内容）后，弹出<code>group</code>分组栈的栈顶内容（最后压入的捕获内容），堆栈本来为空，则本分组的匹配失败</li>
<li><code>(?(group)yes|no)</code> 如果<code>group</code>栈非空匹配表达式<code>yes</code>，否则匹配表达式<code>no</code></li>
<li><code>(?!)</code> 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败</li>
</ul>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释语法：<code>(?#comment)</code>，这个语法的内容会被正则忽略，用于注释含义。可以放在正则表达式的任意位置。</p>
<hr>
<p>参考：</p>
<p><a href="http://www.jb51.net/tools/zhengze.html" target="_blank" rel="noopener">正则表达式30分钟入门教程</a></p>
<p><a href="http://www.java3z.com/cwbwebhome/article/article2/2311.html?id=877" target="_blank" rel="noopener">正则表达式</a></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/02/11/正则表达式简单教程/">https://blog.coder4j.cn/2018/02/11/正则表达式简单教程/</a> </p>
]]></content>
      
        
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[转] 小明历险记：规则引擎drools教程一]]></title>
      <url>https://blog.coder4j.cn/2018/02/10/%E8%BD%AC-%E5%B0%8F%E6%98%8E%E5%8E%86%E9%99%A9%E8%AE%B0%EF%BC%9A%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8Edrools%E6%95%99%E7%A8%8B%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>转自 <a href="http://www.ityouknow.com/drools/2017/08/07/drools-started.html" target="_blank" rel="noopener">小明历险记：规则引擎drools教程一</a><br><img src="http://ww1.sinaimg.cn/large/68f7efe0gy1fobrwwkdg4j21hc6jpe82.jpg" alt></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/02/10/转-小明历险记：规则引擎drools教程一/">https://blog.coder4j.cn/2018/02/10/转-小明历险记：规则引擎drools教程一/</a> </p>
]]></content>
      
        <categories>
            
            <category> 规则引擎 </category>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> drools </tag>
            
            <tag> 规则引擎 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql 中 between and 的边界问题]]></title>
      <url>https://blog.coder4j.cn/2018/02/10/mysql-%E4%B8%AD-between-and-%E7%9A%84%E8%BE%B9%E7%95%8C%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>mysql 中的 between … and … 语法，相信大家都会，但是在边界这个细节上一不留神就可能会出错。下面就以一个简单的例子去理解边界性的问题。</p>
</blockquote>
<ol>
<li><p>首先我们建一个简单的用户表，简单到只有一个 age 和 name 字段（其实可以没有），下面是建表语句</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_user
<span class="token punctuation">(</span>
   age <span class="token keyword">int</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
   name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token boolean">null</span>
<span class="token punctuation">)</span>
<span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span>
<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>插入几条测试语句</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> mytest<span class="token punctuation">.</span>t_user <span class="token punctuation">(</span>age<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">'kiwi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> mytest<span class="token punctuation">.</span>t_user <span class="token punctuation">(</span>age<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">'kimi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> mytest<span class="token punctuation">.</span>t_user <span class="token punctuation">(</span>age<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'tony'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> mytest<span class="token punctuation">.</span>t_user <span class="token punctuation">(</span>age<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'kim'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> mytest<span class="token punctuation">.</span>t_user <span class="token punctuation">(</span>age<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>执行完插入语句后，表应该是如下这样<br><img src="http://ww1.sinaimg.cn/large/68f7efe0gy1fobqkynwtbj20b005mjrk.jpg" alt></p>
</li>
<li><p>准备工作已经做完了，我们先执行一下 between and 语句</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_user <span class="token keyword">WHERE</span> age <span class="token operator">BETWEEN</span> <span class="token number">17</span> <span class="token operator">AND</span> <span class="token number">23</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>执行结果如下<br><img src="http://ww1.sinaimg.cn/large/68f7efe0gy1fobqo084drj20am03qq2y.jpg" alt></li>
<li>分析<blockquote>
<p>可见结果是包含边界的，在这里也就是包含 17 与 23，相当于如下 sql ，<br><code>SELECT * FROM t_user WHERE age &gt;= 17 AND age &lt;= 23;</code></p>
</blockquote>
</li>
</ul>
</li>
<li><p>我们接着执行 not between and 语句</p>
<pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_user <span class="token keyword">WHERE</span> age <span class="token operator">NOT</span> <span class="token operator">BETWEEN</span> <span class="token number">17</span> <span class="token operator">AND</span> <span class="token number">23</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>执行结果如下<br><img src="http://ww1.sinaimg.cn/large/68f7efe0gy1fobqv3ybjxj20am02u3yg.jpg" alt><ul>
<li>分析<blockquote>
<p>可见结果是不包含边界的，在这里也就是 17 与 23 不在检索条件内，相当于如下 sql ,<br><code>SELECT * FROM t_user WHERE age &lt; 17 OR age &gt; 23;</code></p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>最终结论</p>
<ol>
<li>between … and … 是包含边界的，相当于 … &gt;= AND &lt;= … ，很容易以为是大于并且小于边界的</li>
<li>not between … and … 是不包含边界的，相当于 … &gt; OR &lt; …，这里可以理解为是 between  … and 的否命题</li>
</ol>
</li>
</ol>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/02/10/mysql-中-between-and-的边界问题/">https://blog.coder4j.cn/2018/02/10/mysql-中-between-and-的边界问题/</a> </p>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
            <tag> between and </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker 常用命令]]></title>
      <url>https://blog.coder4j.cn/2018/01/19/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h5 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h5><pre class="line-numbers language-shell"><code class="language-shell">  # 命令格式
  docker 命令关键字(command) 一系列参数([args...]) 

  # 查询命令帮助
  docker command --help
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h6 id="1-启动容器"><a href="#1-启动容器" class="headerlink" title="1. 启动容器"></a>1. 启动容器</h6><p><code>docker start id/name</code></p>
<h6 id="2-关闭容器"><a href="#2-关闭容器" class="headerlink" title="2. 关闭容器"></a>2. 关闭容器</h6><p><code>docker stop id/name</code></p>
<h6 id="3-查询在线容器"><a href="#3-查询在线容器" class="headerlink" title="3. 查询在线容器"></a>3. 查询在线容器</h6><pre class="line-numbers language-shell"><code class="language-shell">  docker ps [-a] 
  # -a 显示所有，包括已经关闭的
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h6 id="4-查询容器信息"><a href="#4-查询容器信息" class="headerlink" title="4. 查询容器信息"></a>4. 查询容器信息</h6><p><code>docker inspect id/name</code></p>
<h6 id="5-查看容器日志"><a href="#5-查看容器日志" class="headerlink" title="5. 查看容器日志"></a>5. 查看容器日志</h6><p><code>docker logs [-f] id/name</code></p>
<h6 id="6-查看容器资源占用"><a href="#6-查看容器资源占用" class="headerlink" title="6. 查看容器资源占用"></a>6. 查看容器资源占用</h6><p><code>docker stats</code></p>
<h6 id="7-容器内部命令"><a href="#7-容器内部命令" class="headerlink" title="7. 容器内部命令"></a>7. 容器内部命令</h6><pre class="line-numbers language-shell"><code class="language-shell">  # 在容器内部执行命令
  docker exec id/name 执行命令  
  # 以root用户执行命令
  docker exec -it id/name 执行命令
  # 以root用户打开一个终端,exit退出
  docker exec -it id/name /bin/bash
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h6 id="8-镜像查询"><a href="#8-镜像查询" class="headerlink" title="8. 镜像查询"></a>8. 镜像查询</h6><pre class="line-numbers language-shell"><code class="language-shell">docker search xx
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h6 id="9-镜像下载"><a href="#9-镜像下载" class="headerlink" title="9. 镜像下载"></a>9. 镜像下载</h6><pre class="line-numbers language-shell"><code class="language-shell">docker pull xx
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h6 id="10-本地镜像列表"><a href="#10-本地镜像列表" class="headerlink" title="10. 本地镜像列表"></a>10. 本地镜像列表</h6><pre class="line-numbers language-shell"><code class="language-shell">docker images
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h6 id="11-启动容器"><a href="#11-启动容器" class="headerlink" title="11. 启动容器"></a>11. 启动容器</h6><pre class="line-numbers language-shell"><code class="language-shell">docker run [--name] [--link] 镜像id/name

# --link 容器连接
# --name 容器起的名称
# --p 端口映射 8080:80
# --e 环境变量设置
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h6 id="12-删除容器"><a href="#12-删除容器" class="headerlink" title="12. 删除容器"></a>12. 删除容器</h6><pre class="line-numbers language-shell"><code class="language-shell">docker rm id/name
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h6 id="13-创建镜像"><a href="#13-创建镜像" class="headerlink" title="13. 创建镜像"></a>13. 创建镜像</h6><pre class="line-numbers language-shell"><code class="language-shell">docker commit id imageName
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h6 id="14-关闭所有运行的容器"><a href="#14-关闭所有运行的容器" class="headerlink" title="14. 关闭所有运行的容器"></a>14. 关闭所有运行的容器</h6><pre class="line-numbers language-shell"><code class="language-shell">docker stop $(docker ps -q)
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/01/19/docker-常用命令/">https://blog.coder4j.cn/2018/01/19/docker-常用命令/</a> </p>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[转]spring 循环依赖]]></title>
      <url>https://blog.coder4j.cn/2018/01/13/spring-%E5%BE%AA%E7%8E%AF%E5%BC%95%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文由 <a href="http://ksria.com/simpread/" target="_blank" rel="noopener">简悦 SimpRead</a> 转码， 原文地址 <a href="http://www.importnew.com/17580.html" target="_blank" rel="noopener">http://www.importnew.com/17580.html</a> 原文出处： <a href="http://sishuok.com/forum/blogPost/list/2448.html" target="_blank" rel="noopener">张开涛</a></p>
</blockquote>
<h3 id="3-2-1-什么是循环依赖"><a href="#3-2-1-什么是循环依赖" class="headerlink" title="3.2.1  什么是循环依赖"></a>3.2.1  什么是循环依赖</h3><p>循环依赖就是循环引用，就是两个或多个 Bean 相互之间的持有对方，比如 CircleA 引用 CircleB，CircleB 引用 CircleC，CircleC 引用 CircleA，则它们最终反映为一个环。此处不是循环调用，循环调用是方法之间的环调用。如图 3-5 所示：</p>
<p> <img src="http://sishuok.com/forum/upload/2012/2/20/07001b6dc0a31b138de5923cf5c28314__1.JPG" alt></p>
<p>图 3-5 循环引用</p>
<pre><code>   循环调用是无法解决的，除非有终结条件，否则就是死循环，最终导致内存溢出错误。
</code></pre><p>Spring 容器循环依赖包括构造器循环依赖和 setter 循环依赖，那 Spring 容器如何解决循环依赖呢？首先让我们来定义循环引用类： </p>
<pre><code>package cn.javass.spring.chapter3.bean;
public class CircleA {
    private CircleB circleB;
    public CircleA() {
    }
    public CircleA(CircleB circleB) {
        this.circleB = circleB;
    }
public void setCircleB(CircleB circleB) 
{
        this.circleB = circleB;
    }
public void a() {
   circleB.b();
}
}
</code></pre><pre><code>package cn.javass.spring.chapter3.bean;
public class CircleB {
    private CircleC circleC;
    public CircleB() {
    }
    public CircleB(CircleC circleC) {
        this.circleC = circleC;
    }
public void setCircleC(CircleC circleC) 
{
        this.circleC = circleC;
    }
    public void b() {
        circleC.c();
    }
}
</code></pre><pre><code>package cn.javass.spring.chapter3.bean;
public class CircleC {
    private CircleC circleC;
    public CircleB() {
    }
    public CircleB(CircleC circleC) {
        this.circleC = circleC;
    }
public void setCircleC(CircleC circleC) 
{
        this.circleC = circleC;
    }
    public void b() {
        circleC.c();
    }
}
</code></pre><h3 id="3-2-2-Spring-如何解决循环依赖"><a href="#3-2-2-Spring-如何解决循环依赖" class="headerlink" title="3.2.2        Spring 如何解决循环依赖"></a>3.2.2        Spring 如何解决循环依赖</h3><p><strong>一、构造器循环依赖：</strong>表示通过构造器注入构成的循环依赖，此依赖是无法解决的，只能抛出 BeanCurrentlyInCreationException 异常表示循环依赖。</p>
<p>如在创建 CircleA 类时，构造器需要 CircleB 类，那将去创建 CircleB，在创建 CircleB 类时又发现需要 CircleC 类，则又去创建 CircleC，最终在创建 CircleC 时发现又需要 CircleA；从而形成一个环，没办法创建。</p>
<p>Spring 容器将每一个正在创建的 Bean 标识符放在一个 “当前创建 Bean 池” 中，Bean 标识符在创建过程中将一直保持在这个池中，因此如果在创建 Bean 过程中发现自己已经在 “当前创建 Bean 池” 里时将抛出 BeanCurrentlyInCreationException 异常表示循环依赖；而对于创建完毕的 Bean 将从 “当前创建 Bean 池” 中清除掉。</p>
<p>1）首先让我们看一下配置文件（chapter3/circleInjectByConstructor.xml）：</p>
<pre><code>&lt;bean id=&quot;circleA&quot; class=&quot;cn.javass.spring.chapter3.bean.CircleA&quot;&gt;
&lt;constructor-arg index=&quot;0&quot; ref=&quot;circleB&quot;/&gt;
&lt;/bean&gt;
&lt;bean id=&quot;circleB&quot; class=&quot;cn.javass.spring.chapter3.bean.CircleB&quot;&gt;
&lt;constructor-arg index=&quot;0&quot; ref=&quot;circleC&quot;/&gt;
&lt;/bean&gt;
&lt;bean id=&quot;circleC&quot; class=&quot;cn.javass.spring.chapter3.bean.CircleC&quot;&gt;
&lt;constructor-arg index=&quot;0&quot; ref=&quot;circleA&quot;/&gt;
&lt;/bean&gt;
</code></pre><p>2）写段测试代码（cn.javass.spring.chapter3.CircleTest）测试一下吧：</p>
<pre><code>@Test(expected = BeanCurrentlyInCreationException.class)
public void testCircleByConstructor() throws Throwable {
try {
      new ClassPathXmlApplicationContext(&quot;chapter3/circleInjectByConstructor.xml&quot;);
    }
    catch (Exception e) {
      //因为要在创建circle3时抛出；
      Throwable e1 = e.getCause().getCause().getCause();
      throw e1;
    }
}
</code></pre><p>让我们分析一下吧：</p>
<p>1、Spring 容器创建 “circleA” Bean，首先去“当前创建 Bean 池” 查找是否当前 Bean 正在创建，如果没发现，则继续准备其需要的构造器参数“circleB”，并将“circleA” 标识符放到“当前创建 Bean 池”；</p>
<p>2、Spring 容器创建 “circleB” Bean，首先去“当前创建 Bean 池” 查找是否当前 Bean 正在创建，如果没发现，则继续准备其需要的构造器参数“circleC”，并将“circleB” 标识符放到“当前创建 Bean 池”；</p>
<p>3、Spring 容器创建 “circleC” Bean，首先去“当前创建 Bean 池” 查找是否当前 Bean 正在创建，如果没发现，则继续准备其需要的构造器参数“circleA”，并将“circleC” 标识符放到“当前创建 Bean 池”；</p>
<p>4、到此为止 Spring 容器要去创建 “circleA”Bean，发现该 Bean 标识符在“当前创建 Bean 池” 中，因为表示循环依赖，抛出 BeanCurrentlyInCreationException。</p>
<p><strong>二、setter 循环依赖：</strong>表示通过 setter 注入方式构成的循环依赖。</p>
<p>对于 setter 注入造成的依赖是通过 Spring 容器提前暴露刚完成构造器注入但未完成其他步骤（如 setter 注入）的 Bean 来完成的，而且只能解决单例作用域的 Bean 循环依赖。</p>
<p>如下代码所示，通过提前暴露一个单例工厂方法，从而使其他 Bean 能引用到该 Bean。</p>
<pre><code>addSingletonFactory(beanName, new ObjectFactory() {
    public Object getObject() throws BeansException {
        return getEarlyBeanReference(beanName, mbd, bean);
    }
});
</code></pre><p>具体步骤如下：</p>
<p>1、Spring 容器创建单例 “circleA” Bean，首先根据无参构造器创建 Bean，并暴露一个“ObjectFactory ” 用于返回一个提前暴露一个创建中的 Bean，并将“circleA” 标识符放到“当前创建 Bean 池”；然后进行 setter 注入“circleB”；</p>
<p>2、Spring 容器创建单例 “circleB” Bean，首先根据无参构造器创建 Bean，并暴露一个“ObjectFactory” 用于返回一个提前暴露一个创建中的 Bean，并将“circleB” 标识符放到“当前创建 Bean 池”，然后进行 setter 注入“circleC”；</p>
<p>3、Spring 容器创建单例 “circleC” Bean，首先根据无参构造器创建 Bean，并暴露一个“ObjectFactory ” 用于返回一个提前暴露一个创建中的 Bean，并将 “circleC” 标识符放到“当前创建 Bean 池”，然后进行 setter 注入“circleA”；进行注入“circleA” 时由于提前暴露了 “ObjectFactory” 工厂从而使用它返回提前暴露一个创建中的 Bean；</p>
<p>4、最后在依赖注入 “circleB” 和“circleA”，完成 setter 注入。</p>
<p>对于 “prototype” 作用域 Bean，Spring 容器无法完成依赖注入，因为 “prototype” 作用域的 Bean，Spring 容器不进行缓存，因此无法提前暴露一个创建中的 Bean。</p>
<pre><code>&lt;!-- 定义Bean配置文件，注意scope都是“prototype”--&gt;
&lt;bean id=&quot;circleA&quot; class=&quot;cn.javass.spring.chapter3.bean.CircleA&quot; scope=&quot;prototype&quot;&gt;
        &lt;property name=&quot;circleB&quot; ref=&quot;circleB&quot;/&gt;
   &lt;/bean&gt;
   &lt;bean id=&quot;circleB&quot; class=&quot;cn.javass.spring.chapter3.bean.CircleB&quot; scope=&quot;prototype&quot;&gt;
       &lt;property name=&quot;circleC&quot; ref=&quot;circleC&quot;/&gt;
   &lt;/bean&gt;
   &lt;bean id=&quot;circleC&quot; class=&quot;cn.javass.spring.chapter3.bean.CircleC&quot; scope=&quot;prototype&quot;&gt;
       &lt;property name=&quot;circleA&quot; ref=&quot;circleA&quot;/&gt;
   &lt;/bean&gt;
</code></pre><pre><code>//测试代码cn.javass.spring.chapter3.CircleTest
@Test(expected = BeanCurrentlyInCreationException.class)
public void testCircleBySetterAndPrototype () throws Throwable {
    try {
        ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(
&quot;chapter3/circleInjectBySetterAndPrototype.xml&quot;);
        System.out.println(ctx.getBean(&quot;circleA&quot;));
    }
    catch (Exception e) {
        Throwable e1 = e.getCause().getCause().getCause();
        throw e1;
    }
}
</code></pre><p>对于 “singleton” 作用域 Bean，可以通过 “setAllowCircularReferences(false);” 来禁用循环引用：</p>
<pre><code>@Test(expected = BeanCurrentlyInCreationException.class)
public void testCircleBySetterAndSingleton2() throws Throwable {
    try {
        ClassPathXmlApplicationContext ctx =
new ClassPathXmlApplicationContext();
        ctx.setConfigLocation(&quot;chapter3/circleInjectBySetterAndSingleton.xml&quot;);
        ctx.refresh();
    }
    catch (Exception e) {
        Throwable e1 = e.getCause().getCause().getCause();
        throw e1;
    }
}
</code></pre><p>本文地址 <a href="https://blog.coder4j.cn/2018/01/13/spring-循环引入的问题/">https://blog.coder4j.cn/2018/01/13/spring-循环引入的问题/</a> </p>
]]></content>
      
        <categories>
            
            <category> exception </category>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
            <tag> exception </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[人的一切痛苦，本质上都是对自己无能的愤怒]]></title>
      <url>https://blog.coder4j.cn/2018/01/06/%E4%BA%BA%E7%9A%84%E4%B8%80%E5%88%87%E7%97%9B%E8%8B%A6%EF%BC%8C%E6%9C%AC%E8%B4%A8%E4%B8%8A%E9%83%BD%E6%98%AF%E5%AF%B9%E8%87%AA%E5%B7%B1%E6%97%A0%E8%83%BD%E7%9A%84%E6%84%A4%E6%80%92/</url>
      <content type="html"><![CDATA[<p>&emsp;人的一切痛苦，本质上都是对自己无能的愤怒！</p>
<p>&emsp;为什么不欺负别人，只欺负你，因为你好欺负，因为你是完美受害人，因为你无能！</p>
<p>&emsp;为什么不坑别人，只坑你，因为你傻，因为你蠢，因为你懦弱，因为你无能！</p>
<p>&emsp;为什么你活的那么累，因为你无能！</p>
<p>&emsp;为什么你总能接受不平等，因为你无能！</p>
<p>&emsp;为什么你明明可以说不，但是自我放弃，因为你无能！</p>
<p>&emsp;为什么你压力那么大，因为你无能！</p>
<p>&emsp;为什么你那么焦虑，因为你无能！</p>
<p>&emsp;为什么你觉得自己没有错，但是还是要卑躬屈膝去认错，因为你无能！</p>
<p>&emsp;为什么你一无所有，因为你无能！</p>
<p>&emsp;为什么你总是感觉尴尬，因为你无能！</p>
<p>&emsp;为什么别人可以不在乎你的感受，因为你无能！</p>
<p>&emsp;为什么你总是感到不好意思，因为你无能！</p>
<p>&emsp;为什么你总是抱怨，因为你无能！</p>
<p>&emsp;为什么你总是叹气，因为你无能！</p>
<p>&emsp;为什么别人觉得你是一个老好人，因为你无能！</p>
<p>&emsp;为什么你总是容易生气，因为你无能！</p>
<p>&emsp;为什么别人过的比你开心，比你好，因为你无能！</p>
<p>&emsp;为什么那么多机会你把握不住，因为你无能！</p>
<p>&emsp;为什么你总是觉得不公平，因为你无能！</p>
<p>&emsp;为什么你感觉害怕，因为你无能！</p>
<p>&emsp;为什么你总是不敢暴露自己的真实想法，因为你无能！</p>
<p>&emsp;为什么你喜欢看电影，因为你想逃避，逃避现实，逃避人生，逃避一切。逃避你的种种无能！</p>
<p>&emsp;为什么你什么事情都做不好，因为你无能！</p>
<p>&emsp;为什么你什么都坚持不下去，因为你无能！</p>
<p>&emsp;为什么当你想做什么事时，别人爱打击你，因为你无能！</p>
<p>&emsp;你就是一个 loser!</p>
<p>&emsp;怎么样也过不好这一生！</p>
<p>&emsp;一切的一切都是因为你无能！</p>
<p>&emsp;别人玩转着你的一切，别人侵蚀着你的一切，但是只是毫无表情的在一旁看着。因为你懦弱，因为你无能！</p>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/01/06/人的一切痛苦，本质上都是对自己无能的愤怒/">https://blog.coder4j.cn/2018/01/06/人的一切痛苦，本质上都是对自己无能的愤怒/</a> </p>
]]></content>
      
        <categories>
            
            <category> 漫漫人生路 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[[转]为什么年轻时要多赚钱？]]></title>
      <url>https://blog.coder4j.cn/2018/01/06/%E8%BD%AC-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%B9%B4%E8%BD%BB%E6%97%B6%E8%A6%81%E5%A4%9A%E8%B5%9A%E9%92%B1%EF%BC%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文由 <a href="http://ksria.com/simpread/" target="_blank" rel="noopener">简悦 SimpRead</a> 转码， 原文地址 <a href="https://mp.weixin.qq.com/s?__biz=MjM5MTA4MjE5OA%3D%3D&amp;mid=2660133503&amp;idx=1&amp;sn=cd14d3771918901b405008797c5728e8#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MjM5MTA4MjE5OA%3D%3D&amp;mid=2660133503&amp;idx=1&amp;sn=cd14d3771918901b405008797c5728e8#wechat_redirect</a></p>
</blockquote>
<p><img src="https://mmbiz.qpic.cn/mmbiz_gif/ZsUic8pXgxFibEU1JABRpqPzSdmCYRCWiajsKBGPGOqcdAKZWSDLic6ibLtibYCfOjytScMdPR8tVyPwMdGOaPkYvczw/?wx_fmt=gif" alt></p>
<p>文 | 王耳朵</p>
<p>来源 | 王耳朵先生（ID:huangezishiba）</p>
<p><strong>Part1</strong></p>
<p><strong>那年，你 23 岁。第一次去女朋友家，见父母。</strong></p>
<p>其实，以前你们也见过，在视频里。这次不一样，是女朋友父母的盛情邀请。</p>
<p>坐在满满的一桌饭菜前，场面太正式，你有些隐隐不安。</p>
<p>餐过半程，女朋友的父亲，果然开始提问，先是些无关紧要的话题，然后话锋一转：</p>
<blockquote>
<p>大概什么时候买房？</p>
</blockquote>
<p>旁边，女朋友的母亲，也漫不经心说，隔壁家老刘的准女婿，刚买了套三室两厅。</p>
<p>你不知道，说些什么才好。你脑袋里，满是那张每月 4000 的工资卡。</p>
<p>然后，气氛就冷了。你匆匆吃完饭，找了个公司有事的借口，当天就返程了。</p>
<p><strong>一个星期后，你约了女朋友出来，平静地分了手。</strong></p>
<p>她的泪水，就像决堤的坝，但你仍然冷静的走了。</p>
<p>不是你冷静，而是你开始懂得，谈不起钱的爱情，注定走不远。</p>
<p>爱情中可以没钱，但结婚不行。</p>
<p><strong>Part2</strong></p>
<p><strong>你 26 岁了，你终于有了些积蓄。</strong></p>
<p>这三年，你去了新的城市，换了新工作。你曾拼命陪客户喝酒，也曾加班到天亮。</p>
<p>你的工资翻了两倍，某个时刻，你甚至感觉全身充满了力量。你决定去买房。</p>
<p>含着职业微笑的销售顾问，带你去了样板间。</p>
<p>南北通透的户型，小区绿化很好，推开窗，你就能看到远方的山脊线。</p>
<p>但问了总价，你就沉默了。房子涨价的速度，太快了。</p>
<p>你慢慢走回家，决定过些日子，房价降了再买。但你打开朋友圈，看到的第一条动态，就是市民连夜排队买房。</p>
<p>你知道，还不出手，可能再也追不上房价了。</p>
<p>你狠下心，给父母打电话，拿来了他们的 10 万养老钱。你给所有的亲戚打电话，陪着笑脸，向他们借钱。</p>
<p>三天后，凑够了首付，你去签了购房合同。</p>
<p><strong>按上指印的那一刻，你的眼睛酸了。</strong></p>
<p>有钱多好啊。</p>
<p>你开始懂得，有钱，就有家，你就有稳稳的确定感。</p>
<p><strong>Part3</strong></p>
<p><strong>离 28 岁只有四个月的时候，你失去了工作。</strong></p>
<p>是被动的失业，集团公司撤销了华南办事处，象征性地补偿后，你被遣散了。</p>
<p>你开始重新找工作，从这个城市的南边，奔波到北边。</p>
<p>你突然发现，过了 30 以后，工作越来越难找了。</p>
<p>要么是薪水太低，要么是要求太高，一大群刚出校门的大学生，等在面试室外，随时准备把你 PK 掉。</p>
<p><strong>还完 3 个月的房贷，你突然发现，卡里只剩下 1000 块钱了。</strong></p>
<p>幸运的是，你终于赶在 28 岁前，找到了新工作。</p>
<p>虽然公司距离住的地方，有点远，但一切看起来，都是有希望的样子。</p>
<p>所以，28 岁生日那天，你特意给自己点了一个小小的蛋糕。烛光里，你安静的许愿。</p>
<p>不是为了犒劳自己。</p>
<p>而是你开始懂得，有时候，稳定的收入，也是有温度的。</p>
<p>它能免你惊，免你苦，免你无枝可依。</p>
<p><strong>Part4</strong></p>
<p><strong>转眼，你 32 岁了，成了别人眼里的中产。</strong></p>
<p>日子过得波澜不惊，一切都走上了正轨，孩子也已经 3 岁，该上幼儿园了。</p>
<p>你有两种选择：楼下的双语幼稚园；或者是把他送到隔壁安置小区，那里也有一家民营的幼教机构。</p>
<p>前一家，每月费用 4000，有外教。后一家，1800 就够了，老师都是中年的阿姨。</p>
<p>你在电脑上，看了一晚上的虐童新闻，第二天早餐时，你和妻子说：</p>
<blockquote>
<p>就去那家 4000 块的优质幼儿园吧。</p>
</blockquote>
<p>你没有和妻子说，这段时间，公司正在进行岗位调整。</p>
<p>你准备申请调岗，从现在悠闲的办公室工作，调到一线工作部门。虽然会累些，但收入会增加不少。</p>
<p><strong>知道调岗的消息后，妻子果然抱怨了你，说你不自量力。</strong></p>
<p>你没有辩解，相反你在心里笑了。</p>
<p>因为你开始懂了，累是累些，但至少在孩子需要时，你不会囊中羞涩，你不会让他在起跑线上就输了。</p>
<p><strong>Part5</strong></p>
<p><strong>又过了三年。</strong></p>
<p>所有的事情，都在向好处发展，你甚至有了野心勃勃的计划，等父母都退休了，就把他们接到身边来。</p>
<p>但清晨，母亲的电话就来了，父亲在晨练时突发脑溢血，县城的医院束手无策。</p>
<p>你疯了地开车，往老家赶，把父母接到了你住的一线城市里。</p>
<p>你相信，这里有优质的医疗资源，有一流的医生，一切会重新回到原来的样子。</p>
<p>在那家三甲医院里，科室里的医生，果然都给出了肯定的回答，你的父亲，也一天天好起来。</p>
<p><strong>但每天几千块的支出，很快就让你感觉到了压力。父亲的医保证，在这里形同废纸。</strong></p>
<p>两个月后，父亲坚持要出院。你不肯，但父亲用含糊的固执的声音告诉你，剩下的，就是康复训练了，老家也可以，哪里都一样。</p>
<p>你送他们回家，平时三个小时的路程，你开了六个小时。</p>
<p>因为你总是忍不住，想爬在方向盘上想哭。</p>
<p>父母老去的速度，比你想象的快多了。</p>
<p>你开始懂了，钱有时也是孝心。如果你有足够的钱，就不会对父母无能为力。</p>
<p><strong>Part6</strong></p>
<p>如果你没有经历过买房，你不会知道钱有多重要；</p>
<p>如果你没有经历过家人生病，你不会知道，钱是多么不可或缺；</p>
<p>如果你没有过月薪三千的生活，你不会知道，赚钱是为了什么。</p>
<p>在《亲爱的安德烈》里，作家龙应台有一段话说的很好：</p>
<blockquote>
<p>“孩子，我要求你读书用功，不是因为我要你跟别人比成绩，而是，我希望你将来会拥有选择的权利，选择有意义、有时间的工作，而不是被迫谋生。”</p>
</blockquote>
<p>同样，为什么年轻时要努力赚钱？</p>
<p><strong>不是为了成为富豪，也不是为了享受。</strong></p>
<p>而是有一天，你有底气说，我可过上更好的生活；</p>
<p>你也有底气对亲人说，亲爱的，别怕，一切有我。</p>
<p>王尔德说：</p>
<blockquote>
<p>“我年轻时还以为金钱最重要，如今年纪大了，发现那句话一点不假。”</p>
</blockquote>
<p>千万别在年轻时假装不爱钱，你应该更努力一些。</p>
<p><strong>我们努力赚钱，就是为了不对亲人无能为力，就是为了能够对世界说 “不”。</strong></p>
<p>你为什么年轻时要多赚钱？这是我听过的最好的回答。</p>
<ul>
<li>作者简介：王耳朵先生，青年作家，知名媒体前首席记者，关注于职场和个人成长，千万级阅读代表作《别扯了，这世界上根本没有稳定的工作》，微信公众号：王耳朵先生（ID：huangezishiba）。转载请联系原作者授权！</li>
</ul>
<p>— THE END —</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_gif/mTzGsLCNvribcZPNdfZUzENkKhDafiaCqARhGjSB9lWicSctia48SvEicSINjd6WhiaXlfuVnmmXSM0veibjeOxjPBvuA/?wx_fmt=gif" alt></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/01/06/转-为什么年轻时要多赚钱？/">https://blog.coder4j.cn/2018/01/06/转-为什么年轻时要多赚钱？/</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[转] springboot 过滤器和拦截器的实现和区别]]></title>
      <url>https://blog.coder4j.cn/2018/01/02/%E8%BD%AC-springboot-%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%92%8C%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文由 <a href="http://ksria.com/simpread/" target="_blank" rel="noopener">简悦 SimpRead</a> 转码， 原文地址 <a href="https://segmentfault.com/a/1190000012072060" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012072060</a></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>springmvc 中有两种很普遍的 AOP 实现：<br>1. 过滤器（Filter）<br>2. 拦截器（Interceptor）</p>
<p>本篇面对的是一些刚接触 springboot 的人群<br>所以主要讲解 filter 和 interceptor 的简单实现和它们之间到底有什么区别<br>（一些复杂的功能我会之后发出文章，请记得关注）</p>
<h2 id="Filter-的简单实现"><a href="#Filter-的简单实现" class="headerlink" title="Filter 的简单实现"></a>Filter 的简单实现</h2><p>字面意思：过滤器就是过滤的作用，在 web 开发中过滤一些我们指定的 url<br>那么它能帮我们过滤什么呢？<br>那功能可就多了：<br>比如过拦截掉我们不需要的接口请求<br>修改请求（request）和响应（response）内容<br>完成 CORS 跨域请求等等</p>
<p>现在我们来实现一个简单的过滤器：<br>可以新建一个 filter 包，随着项目的扩大过滤器会越来越多<br>在这里我新建了一个<code>TestFilter</code>类，实现 Filter 接口</p>
<pre><code>@Component
@WebFilter(urlPatterns = &quot;/Blogs&quot;,filterName = &quot;blosTest&quot;)
public class TestFilter implements Filter{}
</code></pre><p>我们一步步来<br>1.@Component 就是把这个类注入到 IOC 容器中<br>2.@WebFilter(urlPatterns = “/Blogs”,filterName = “blosTest”) 说明这是一个 web 过滤器，它拦截的 url 为<code>/Blogs</code>，过滤器名字为<code>blogsTest</code></p>
<p>下面贴出实现接口之后的三个重构方法：</p>
<pre><code>@Override
    public void init(FilterConfig filterConfig) throws ServletException {

    }

    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
        HttpServletRequest request= (HttpServletRequest) servletRequest;
        HttpServletResponse response = (HttpServletResponse) servletResponse;
        System.out.printf(&quot;过滤器实现&quot;);
        filterChain.doFilter(request,response);
    }

    @Override
    public void destroy() {

    }
</code></pre><p>初始化（init）和摧毁（destroy）方法一般不会用到，具体使用看下源码便知<br>doFilter（）是过滤器的核心<br>注意：在实现接口方法之后，我们要转换 request 和 response 类型至 HttpServlet，否则接下去的操作可能会报错。<br>如果过滤通过，执行<code>filterChain.doFilter(request,response);</code><br>说明这个 url 已经经过了我们的 Filter<br>其他不要设置，我们执行看下结果：</p>
<p><img src="https://segmentfault.com/img/bVYOwA?w=806&amp;h=168" alt></p>
<p><img src="https://segmentfault.com/img/bVYOwD?w=708&amp;h=182" alt></p>
<p>可以看到，只需要一个类我们就实现了一个简单的过滤器</p>
<p>当然可以不用注解的方式，配置启动类</p>
<pre><code>//过滤器
    @Bean
    public FilterRegistrationBean filterRegistrationBean(){
        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();
        List&lt;String&gt; urlPatterns = new ArrayList&lt;String&gt;();

        TestFilter testFilter = new TestFilter();   //new过滤器
        urlPatterns.add(&quot;/Blogs&quot;);      //指定需要过滤的url
        filterRegistrationBean.setFilter(testFilter);       //set
        filterRegistrationBean.setUrlPatterns(urlPatterns);     //set

        return filterRegistrationBean;
    }
</code></pre><p>这也是可以的，本人其实还是比较推荐这种方式添加过滤器</p>
<h2 id="Interceptor-的简单实现"><a href="#Interceptor-的简单实现" class="headerlink" title="Interceptor 的简单实现"></a>Interceptor 的简单实现</h2><p>拦截器的实现比过滤器稍微复杂一点<br>我们同样可以新建一个 interceptor 包<br>在里面新建一个名为<code>MyInterceptor</code>的类</p>
<pre><code>public class MyInterceptor implements HandlerInterceptor {}
</code></pre><p>这个类实现了<code>HandleInterceptor</code>接口<br>直接贴类代码，我会在代码中注释功能</p>
<pre><code>public class MyInterceptor implements HandlerInterceptor {
    //在请求处理之前进行调用（Controller方法调用之前
    @Override
    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception {
        System.out.printf(&quot;preHandle被调用&quot;);
        return true;    //如果false，停止流程，api被拦截
    }

    //请求处理之后进行调用，但是在视图被渲染之前（Controller方法调用之后）
    @Override
    public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception {
        System.out.println(&quot;postHandle被调用&quot;);
    }

    //在整个请求结束之后被调用，也就是在DispatcherServlet 渲染了对应的视图之后执行（主要是用于进行资源清理工作）
    @Override
    public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception {
        System.out.println(&quot;afterCompletion被调用&quot;);
    }
}
</code></pre><p>它依次实现了三个方法<br>相比过滤器，拦截器还需要在 springmvc 中注入<br>所以我们打开启动类，写入以下代码</p>
<pre><code>public class WarApplication {

    public static void main(String[] args) {
        SpringApplication.run(WarApplication.class, args);
    }

    //mvc控制器
    //@Configuration
    static class WebMvcConfigurer extends WebMvcConfigurerAdapter{
        //增加拦截器
        public void addInterceptors(InterceptorRegistry registry){
            registry.addInterceptor(new MyInterceptor())    //指定拦截器类
                    .addPathPatterns(&quot;/Handles&quot;);        //指定该类拦截的url
        }
    }
}
</code></pre><p>这里我在<code>/Handles</code>这个 url 中进行拦截<br>代码写完了，来看下结果</p>
<p><img src="https://segmentfault.com/img/bVYOyA?w=722&amp;h=200" alt></p>
<p><img src="https://segmentfault.com/img/bVYOyI?w=652&amp;h=194" alt></p>
<p>当进入指定 url 时，我们执行到了拦截器<br>接下来就可以根据需求去使用拦截器了</p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>过滤器和拦截器非常相似，但是它们有很大的区别<br>最简单明了的区别就是<strong>过滤器可以修改 request，而拦截器不能</strong><br><strong>过滤器需要在 servlet 容器中实现，拦截器可以适用于 javaEE，javaSE 等各种环境</strong><br><strong>拦截器可以调用 IOC 容器中的各种依赖，而过滤器不能</strong><br><strong>过滤器只能在请求的前后使用，而拦截器可以详细到每个方法</strong><br>区别很多，大家可以去查下</p>
<p>总的来说<br>过滤器就是筛选出你要的东西，比如 requeset 中你要的那部分<br>拦截器在做安全方面用的比较多，比如终止一些流程<br>网上有一张图片很不错，这里拷过来给大家看一下</p>
<p><img src="https://segmentfault.com/img/bVYOEG?w=1392&amp;h=808" alt></p>
<p><strong>以上便是 springboot 中过滤器和拦截器的实现和区别；</strong><br><strong>觉得还可以的请点个赞，赞不了也可以收藏下；</strong><br><strong>总之，谢谢阅读～</strong></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/01/02/转-springboot-过滤器和拦截器的实现和区别/">https://blog.coder4j.cn/2018/01/02/转-springboot-过滤器和拦截器的实现和区别/</a> </p>
]]></content>
      
        <categories>
            
            <category> 转载 </category>
            
            <category> spring boot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> 过滤器 </tag>
            
            <tag> 拦截器 </tag>
            
            <tag> web </tag>
            
            <tag> 转载 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 docker 光速安装 gitlab]]></title>
      <url>https://blog.coder4j.cn/2018/01/01/%E4%BD%BF%E7%94%A8-docker-%E5%85%89%E9%80%9F%E5%AE%89%E8%A3%85-gitlab/</url>
      <content type="html"><![CDATA[<ul>
<li>使用 docker 安装 gitlab<pre><code># 安装 postgresql
docker run --name=gitlab-postgresql -d --env DB_NAME=gitlabhq_prodution --env DB_USER=gitlab --env DB_PASS=password sameersbn/postgresql:9.4-12
# 安装 redis
docker run --name gitlab-redis -d sameersbn/redis
# 安装 gitlab
docker run --name gitlab -d --link gitlab-postgresql:postgresql --link gitlab-redis:redisio --publish 10022:22 --publish 10080:80 --env GITLAB_PORT=10080 --env GITLAB_SSH_PORT=10022 --env GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alpha-numeric-string sameersbn/gitlab:8.4.4
</code></pre></li>
<li>访问 <a href="http://本地ip:10080" target="_blank" rel="noopener">http://本地ip:10080</a><br><img src="http://ww1.sinaimg.cn/large/68f7efe0gy1fn1jbcqanij21ro11sq8s.jpg" alt></li>
</ul>
<ul>
<li>参考链接<br><a href="https://github.com/sameersbn/docker-gitlab" target="_blank" rel="noopener">docker-gitlab</a><br><a href="http://www.damagehead.com/docker-gitlab/" target="_blank" rel="noopener">Zero to GitLab in 5 seconds or less*</a>  </li>
</ul>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/01/01/使用-docker-光速安装-gitlab/">https://blog.coder4j.cn/2018/01/01/使用-docker-光速安装-gitlab/</a> </p>
]]></content>
      
        <categories>
            
            <category> docker </category>
            
            <category> gitlab </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> gitlab </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 docker 光速安装 wordpress]]></title>
      <url>https://blog.coder4j.cn/2018/01/01/%E4%BD%BF%E7%94%A8-docker-%E5%85%89%E9%80%9F%E5%AE%89%E8%A3%85-workdpress/</url>
      <content type="html"><![CDATA[<ul>
<li>使用 docker 安装 wordpress</li>
</ul>
<pre><code># 安装数据库
docker run --name db --env MYSQL_ROOT_PASSWORD=example -d mariadb

# 安装 wordpress
docker run --name MyWordPress --link db:mysql -p 8080:80 -d wordpress
</code></pre><p>安装成功效果图<br><img src="http://ww1.sinaimg.cn/large/68f7efe0gy1fn1igx342oj21sc0tsdjn.jpg" alt></p>
<ul>
<li>命令解析  <ul>
<li>安装数据库<pre><code>  docker run --name db --env MYSQL_ROOT_PASSWORD=example -d mariadb
</code></pre><ul>
<li>docker run <ul>
<li>启动容器的命令</li>
</ul>
</li>
<li>–name db<ul>
<li>指定启动容器的名称</li>
</ul>
</li>
<li>–env MYSQL_ROOT_PASSWORD=example<ul>
<li>传入环境变量，此处是设置 mysql 密码为 example</li>
</ul>
</li>
<li>-d <ul>
<li>后台运行，否则前台进行</li>
</ul>
</li>
</ul>
</li>
<li>安装 wordpress<pre><code>  docker run --name MyWordPress --link db:mysql -p 8080:80 -d wordpress
</code></pre><ul>
<li>–link db:mysql<ul>
<li>与上面启动的 db 容器建立联系</li>
</ul>
</li>
<li>-p 8080:80<ul>
<li>端口映射，把宿主机的8080端口映射到容器内的80端口</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/01/01/使用-docker-光速安装-workdpress/">https://blog.coder4j.cn/2018/01/01/使用-docker-光速安装-workdpress/</a> </p>
]]></content>
      
        <categories>
            
            <category> docker </category>
            
            <category> wordpress </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> wordpress </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018年新年愿景]]></title>
      <url>https://blog.coder4j.cn/2018/01/01/2018%E5%B9%B4%E6%96%B0%E5%B9%B4%E6%84%BF%E6%99%AF/</url>
      <content type="html"><![CDATA[<div class="tip"><br>  今天是2018年第一天，转眼2017就这样过去了，感觉荒废了大把时光，新的一年希望自己可以蜕变！<br>  成为一个靠谱的人！<br></div>

<ul>
<li><p>生活</p>
<ul>
<li>更爱萍萍，以后少怼她了。别太孩子气，老惹她生气。</li>
<li>也该考虑结婚的事了</li>
<li>学会几个拿手菜</li>
<li>活的健康一点，少吃辣，少熬夜，少喝碳酸饮料</li>
<li>减肥，回到120斤</li>
<li>看几本书</li>
<li>一个星期写一篇博客</li>
</ul>
</li>
<li><p>学习</p>
<ul>
<li>docker学习</li>
<li>elasticsearch学习</li>
<li>zookeeper学习</li>
<li>mongodb学习</li>
<li>jvm学习</li>
<li>设计模式学习</li>
<li>nginx学习</li>
<li>hadoop学习</li>
<li>hbase 学习</li>
<li>架构学习</li>
</ul>
</li>
<li><p>工作</p>
<ul>
<li>提高工作效率，不要那么累</li>
<li>提高管理能力与人际交往能力</li>
<li>提高代码的可读性，可用性</li>
<li>对业务的熟练度要提高</li>
<li>使服务器的稳定性提升一个档次，全力做到0事故，0宕机</li>
</ul>
</li>
</ul>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/01/01/2018年新年愿景/">https://blog.coder4j.cn/2018/01/01/2018年新年愿景/</a> </p>
]]></content>
      
        <categories>
            
            <category> 新年愿景 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 2018 </tag>
            
            <tag> 新年愿景 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring boot 对于 js 的 long 精度问题处理]]></title>
      <url>https://blog.coder4j.cn/2018/01/01/Spring-boot-%E5%AF%B9%E4%BA%8E-js-%E7%9A%84-long-%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>这几天前后端联调，遇到一个诡异的问题。前端请求后端提供的详情接口得到用户的 Id 与其它数据。然后前端又把这个 Id与修改的数据内容一同传回后端的修改接口。结果前端反馈死活修改不了。  </p>
<p>然后各种 debug 查日志，发现详情接口返回给前端的与前端调用修改接口传回的 Id 不一致。  </p>
<p>然后一查发现是 js 的精度问题，原以为 js 只是浮点型会有精度问题，没想到长整型也会出现。因为是语言的限制，前端要解决这个问题，还是很吃力的。所以只能在后端在传 json 的时候把 long 全部转成 string 类型。  </p>
<p>然后问题又来了，因为项目已写了差不多了。太多地方用了 long 类型，改基础类的字段类型是不可能了。于是想在对象转 json 的时候能否统一处理。  </p>
<p>因为使用的是 spring boot 框架，而 spring boot 默认的 json 框架的Jackson。就是找了一下，果然 jackson 有一个可以自定义的类型转换器机制。直接上代码↓  </p>
<ul>
<li><p>json 转换器<br>JsonLong2StrConverter</p>
<pre><code>public class JsonLong2StrConverter extends StdSerializer&lt;Long&gt; {

  public JsonLong2StrConverter() {
    super(Long.class);
  }

  @Override
  public void serialize(Long value, JsonGenerator gen, SerializerProvider provider)
      throws IOException {

    gen.writeString(value.toString());
  }
}
</code></pre></li>
<li><p>使用配置<br>JsonConf</p>
<pre><code>@Configuration
@EnableWebMvc
public class JsonConf extends WebMvcConfigurerAdapter {

  @Override
  public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) {
    converters.add(new MappingJackson2HttpMessageConverter(
        new Jackson2ObjectMapperBuilder()
//            .propertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE)
            .serializationInclusion(
                Include.NON_NULL)
            .serializerByType(Long.class, new JsonLong2StrConverter())
            .serializerByType(Long.TYPE, new JsonLong2StrConverter()).build()));
  }

}
</code></pre></li>
</ul>
<p>这样 spring boot 在转换 json 时，发现是 Long 类型就直接转成 String 类型，也就是加个单引号。</p>
<p>参考：<br><a href="http://okeeper.leanote.com/post/Spring-boot-%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89Json%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2" target="_blank" rel="noopener">Spring boot 配置自定义Json类型转换</a></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2018/01/01/Spring-boot-对于-js-的-long-精度问题处理/">https://blog.coder4j.cn/2018/01/01/Spring-boot-对于-js-的-long-精度问题处理/</a> </p>
]]></content>
      
        <categories>
            
            <category> spring boot </category>
            
            <category> json </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> json </tag>
            
            <tag> 精度 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CDN原理]]></title>
      <url>https://blog.coder4j.cn/2017/03/18/CDN%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>&emsp;&emsp;CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。<br>&emsp;&emsp;CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。  –百度百科</p>
</blockquote>
<p>&emsp;&emsp;其实CDN说白了，就是一个分布式缓存。只不过是CDN机构会把在全国各地热点的地方，部署一些服务器。如果你的网站使用CDN后，会把你网站上<strong>静态</strong>的内容缓存在这些服务器上。如果用户访问你的网站，用户的请求会被发送到离他最近的CDN服务器上，以此提高响应速度。</p>
<p>&emsp;&emsp;对于<strong>静态</strong>内容居多的网站，提速明显。对于<strong>动态网站</strong>会回源到原服务器，基本上没有任何提高。所以要想达到最好效果，可以对网站实现动静分离，比如前后端分离。把前端页面加到CDN，而后端接口还是用原服务器的。</p>
<p>&emsp;&emsp;随便说一下，CDN对DDOS有一定的防护作用，因为全国大量的肉鸡访问会被分散到各个CDN服务器，对主站影响就减小很多。当然也是只针对于静态类型有效，动态网站该挂还是会挂！</p>
<p>本文地址 <a href="https://blog.coder4j.cn/2017/03/18/CDN原理/">https://blog.coder4j.cn/2017/03/18/CDN原理/</a> </p>
]]></content>
      
        <categories>
            
            <category> 架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cdn </tag>
            
            <tag> 架构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[maven按环境加载配置文件]]></title>
      <url>https://blog.coder4j.cn/2017/03/11/maven%E6%8C%89%E7%8E%AF%E5%A2%83%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>通过maven的profile实现按环境来加载配置文件<br><a id="more"></a></p>
<h6 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h6><p><img src="/images/pasted-0.png" alt="upload successful"></p>
<h6 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h6><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config.dir</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config.dir</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config.dir</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config.dir</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>beta<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config.dir</span><span class="token punctuation">></span></span>beta<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config.dir</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>release<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config.dir</span><span class="token punctuation">></span></span>release<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config.dir</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/profile/${config.dir}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">></span></span>./<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">></span></span>./<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><blockquote>
<p>大致思路就是建一个profile的目录，这个目录名可以随意只要跟后面保持一致就行，然后在这个目录下面建几个按环境区分的目录，通常是dev(开发)，test（测试），beta（预发），release(正式)。然后再通过maven的profile特性，生成按环境的${config.dir}的值。最后通过maven的resources标签来完成配置文件的拷贝，大功告成。</p>
</blockquote>
<h5 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h5><pre><code>mvn clean install -P(profile_id)
eg. mvn clean install -Pdev  --打包开发环境的配置文件
</code></pre><p>本文地址 <a href="https://blog.coder4j.cn/2017/03/11/maven按环境加载配置文件/">https://blog.coder4j.cn/2017/03/11/maven按环境加载配置文件/</a> </p>
]]></content>
      
        <categories>
            
            <category> maven </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
            <tag> profile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo搭建整理]]></title>
      <url>https://blog.coder4j.cn/2017/03/11/hexo-%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>本博客搭建参考的教程<br><a id="more"></a></p>
<ul>
<li><p>基础教程：<br><a href="https://xuanwo.org/2015/03/26/hexo-intor/" target="_blank" rel="noopener">史上最详细的Hexo博客搭建图文教程</a></p>
</li>
<li><p>模板<br><a href="https://material.viosey.com/" target="_blank" rel="noopener">material</a></p>
</li>
<li><p>http转https:<br><a href="https://g2ex.github.io/2015/10/14/Hexo-with-SSL-Hosted-on-Github-Page/" target="_blank" rel="noopener">为Github的Hexo博客启用SSL/TLS</a></p>
</li>
<li><p>其它配置:<br><a href="http://www.jianshu.com/p/a52b68794a6b" target="_blank" rel="noopener">hexo创建个人博客（附加插入音乐、分享、评论、标签页、搜索）</a></p>
</li>
<li><p>访问分流:<br><a href="http://www.franktly.com/2016/07/05/Hexo%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%9C%A8Coding%E5%92%8CGitHub%E4%B8%8A%E5%B9%B6%E4%BD%BF%E7%94%A8DNSPod%E5%88%86%E6%B5%81/" target="_blank" rel="noopener">Hexo同时部署在Coding和GitHub上并使用DNSPod分流</a></p>
</li>
<li><p>SEO:<br><a href="http://www.jianshu.com/p/86557c34b671" target="_blank" rel="noopener">Hexo Seo优化让你的博客在google搜索排名第一</a><br><a href="http://www.jianshu.com/p/619dab2d3c08" target="_blank" rel="noopener">hexo提交搜索引擎（百度+谷歌）</a></p>
</li>
</ul>
<p>本文地址 <a href="https://blog.coder4j.cn/2017/03/11/hexo-教程/">https://blog.coder4j.cn/2017/03/11/hexo-教程/</a> </p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Aop注解教程]]></title>
      <url>https://blog.coder4j.cn/2017/03/10/Spring-Aop%E6%B3%A8%E8%A7%A3%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>spring aop常用的有以下：</p>
<ul>
<li><p>通知类型：</p>
<ul>
<li>前置通知（Before advice）：在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。</li>
<li>后置通知（After returning advice）：在某连接点正常完成后执行的通知：例如，一个方法没有抛出任何异常，正常返回。</li>
<li>异常通知（After throwing advice）：在方法抛出异常退出时执行的通知。</li>
<li>最终通知（After (finally) advice）：当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。</li>
<li>环绕通知（Around Advice）：包围一个连接点的通知，如方法调用。这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它自己的返回值或抛出异常来结束执行。</li>
</ul>
</li>
<li><p>核心配置只要在AOP的实现方法上加上@Aspect与在spring 配置文件中加上 <aop:aspectj-autoproxy>,spring 就可以配置aop方法，然后再根据方法的增强标签不同的效果，这里需要注意是它们的参数不同。</aop:aspectj-autoproxy></p>
</li>
</ul>
</blockquote>
<ul>
<li><p>pom.xml</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mrwood_study<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xyz.mrwood.study<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>study-spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>study-spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.apache.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>4.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!-- spring开始 --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context-support<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!--spring 结束--></span>

      <span class="token comment" spellcheck="true">&lt;!-- AOP begin --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjrt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!-- AOP end --></span>

      <span class="token comment" spellcheck="true">&lt;!-- 日志开始 --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!-- 日志结束 --></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>spring-context.xml</p>
</li>
</ul>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--自动注入--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.mrwood.study<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

    <span class="token comment" spellcheck="true">&lt;!--开启aop--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>AopHandler.java</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * Copyright (c) 2016, 791650277@qq.com(Mr.kiwi) All Rights Reserved.
 */</span>
<span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>aop<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>JoinPoint<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ProceedingJoinPoint<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 项目：study
 * 包名：xyz.mrwood.study.aop
 * 功能：aop实现
 * 时间：2016-05-28 10:33
 * 作者：Mr.Kiwi
 * 通知类型：
 * 前置通知（Before advice）：在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。
 * 后置通知（After returning advice）：在某连接点正常完成后执行的通知：例如，一个方法没有抛出任何异常，正常返回。
 * 异常通知（After throwing advice）：在方法抛出异常退出时执行的通知。
 * 最终通知（After (finally) advice）：当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。
 * 环绕通知（Around Advice）：包围一个连接点的通知，如方法调用。这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它自己的返回值或抛出异常来结束执行。
 */</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AopHandler</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 拦截工程下所有的切点
     */</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* xyz.mrwood.study..*.*(..))"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getAllPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 拦截所有service层下的切点
     */</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* xyz.mrwood.study.service..*.*(..))"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getServicePoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true">/**
     * 前置增强
     * @param joinPoint
     */</span>
    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"getServicePoint()"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[前置增强开始]："</span> <span class="token operator">+</span> <span class="token string">"方法开始了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"getServicePoint()"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"ex"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionMethod</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[异常增强]："</span> <span class="token operator">+</span> <span class="token string">"如果你看到这行，就说明你的程序报错了！"</span> <span class="token operator">+</span> <span class="token string">"异常信息："</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 后置增强，只有在方法正常结束才会调用
     * @param returnVal
     */</span>
    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"getServicePoint()"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"returnVal"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturningMethod</span><span class="token punctuation">(</span>Object returnVal<span class="token punctuation">)</span><span class="token punctuation">{</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[后置增强]："</span> <span class="token operator">+</span> <span class="token string">"当你看到这个说明，你的方法没有正常结束了！"</span> <span class="token operator">+</span> <span class="token string">"它的返回值为："</span> <span class="token operator">+</span> returnVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 最终增强，类似于finally的功能
     */</span>
    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"getServicePoint()"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[最终增强]："</span> <span class="token operator">+</span> <span class="token string">"无论发论发生什么事，我都会运行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 环绕增强
     * @param proceedingJoinPoint
     */</span>
    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"getServicePoint()"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Object <span class="token function">aroundMethod</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[环绕增强开始]："</span> <span class="token operator">+</span> <span class="token string">"方法开始了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Object returnVal <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[环绕增强结束]："</span> <span class="token operator">+</span> <span class="token string">"方法已经结束了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> returnVal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>TargetService.java</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * Copyright (c) 2016, 791650277@qq.com(Mr.kiwi) All Rights Reserved.
 */</span>
<span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>service<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 项目：study
 * 包名：xyz.mrwood.study.service
 * 功能：被拦截的目标类
 * 时间：2016-05-28 10:32
 * 作者：Mr.Kiwi
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetService</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token keyword">return</span> <span class="token string">"hello "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>


        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>运行结果<pre><code>[环绕增强开始]：方法开始了！
[前置增强开始]：方法开始了
[环绕增强结束]：方法已经结束了！
[最终增强]：无论发论发生什么事，我都会运行！
[后置增强]：当你看到这个说明，你的方法没有正常结束了！它的返回值为：test
</code></pre></li>
</ul>
<p>本文地址 <a href="https://blog.coder4j.cn/2017/03/10/Spring-Aop注解教程/">https://blog.coder4j.cn/2017/03/10/Spring-Aop注解教程/</a> </p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
            <category> aop </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
            <tag> aop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring 集成druid]]></title>
      <url>https://blog.coder4j.cn/2017/02/17/spring-%E9%9B%86%E6%88%90druid/</url>
      <content type="html"><![CDATA[<p><strong>application.properties</strong></p>
<pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">######################数据库访问配置#########################</span>
<span class="token comment" spellcheck="true"># 数据库链接</span>
<span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/coder4j?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span>
<span class="token comment" spellcheck="true"># 数据库用户名</span>
<span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span>
<span class="token comment" spellcheck="true"># 数据库用户密码</span>
<span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span>
<span class="token comment" spellcheck="true"># 数据库驱动类</span>
<span class="token comment" spellcheck="true"># spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span>
<span class="token comment" spellcheck="true"># mysql driver 6.0以后要使用下面的类</span>
<span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token comment" spellcheck="true"># 主数据源(这里使用的druid),如果是通过代码注入，这里没什么用</span>
<span class="token comment" spellcheck="true">#spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span>
<span class="token comment" spellcheck="true">######################数据库连接池配置#########################</span>
<span class="token comment" spellcheck="true"># sb1.3以前这样配置是可以直接注入的，1.4之后只支持几种内置的，所以我们要通过</span>
<span class="token comment" spellcheck="true"># 代码手动注入，代码配置优先级比配置文件的高</span>
<span class="token comment" spellcheck="true"># 初始化大小，最小，最大</span>
<span class="token attr-name">spring.datasource.initialSize</span><span class="token punctuation">=</span><span class="token attr-value">5</span>
<span class="token attr-name">spring.datasource.minIdle</span><span class="token punctuation">=</span><span class="token attr-value">5</span>
<span class="token attr-name">spring.datasource.maxActive</span><span class="token punctuation">=</span><span class="token attr-value">20</span>
<span class="token comment" spellcheck="true"># 配置获取连接等待超时的时间</span>
<span class="token attr-name">spring.datasource.maxWait</span><span class="token punctuation">=</span><span class="token attr-value">60000</span>
<span class="token comment" spellcheck="true"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span>
<span class="token attr-name">spring.datasource.timeBetweenEvictionRunsMillis</span><span class="token punctuation">=</span><span class="token attr-value">60000</span>
<span class="token comment" spellcheck="true"># 配置一个连接在池中最小生存的时间，单位是毫秒</span>
<span class="token attr-name">spring.datasource.minEvictableIdleTimeMillis</span><span class="token punctuation">=</span><span class="token attr-value">300000</span>
<span class="token attr-name">spring.datasource.validationQuery</span><span class="token punctuation">=</span><span class="token attr-value">SELECT 1 FROM DUAL</span>
<span class="token attr-name">spring.datasource.testWhileIdle</span><span class="token punctuation">=</span><span class="token attr-value">true</span>
<span class="token attr-name">spring.datasource.testOnBorrow</span><span class="token punctuation">=</span><span class="token attr-value">false</span>
<span class="token attr-name">spring.datasource.testOnReturn</span><span class="token punctuation">=</span><span class="token attr-value">false</span>
<span class="token comment" spellcheck="true"># 打开PSCache，并且指定每个连接上PSCache的大小</span>
<span class="token attr-name">spring.datasource.poolPreparedStatements</span><span class="token punctuation">=</span><span class="token attr-value">true</span>
<span class="token attr-name">spring.datasource.maxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">=</span><span class="token attr-value">20</span>
<span class="token comment" spellcheck="true"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span>
<span class="token attr-name">spring.datasource.filters</span><span class="token punctuation">=</span><span class="token attr-value">stat,wall,log4j</span>
<span class="token comment" spellcheck="true"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span>
<span class="token attr-name">spring.datasource.connectionProperties</span><span class="token punctuation">=</span><span class="token attr-value">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span>
<span class="token comment" spellcheck="true"># 合并多个DruidDataSource的监控数据</span>
<span class="token comment" spellcheck="true">#spring.datasource.useGlobalDataSourceStat=true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：spring boot 1.4以前版本，这些配置已经够了，spring boot会自动注入，但是之后的版本，只有几种内置的数据源可以通过配置注入，druid暂时没有内置，所以要通过代码注入</strong></p>
<p><strong>DruidConfig.java</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * Copyright (c) 2017, 791650277@qq.com(Mr.kiwi) All Rights Reserved.
 */</span>
<span class="token keyword">package</span> cn<span class="token punctuation">.</span>coder4j<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>support<span class="token punctuation">.</span>http<span class="token punctuation">.</span>StatViewServlet<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>support<span class="token punctuation">.</span>http<span class="token punctuation">.</span>WebStatFilter<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterRegistrationBean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRegistrationBean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Primary<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 项目：jalfred
 * 包名：cn.coder4j
 * 功能：数据源druid的配置
 * 时间：2017-02-17 23:30
 * 作者：Mr.Kiwi
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token comment" spellcheck="true">// Primary同名bean，会以些为准</span>
<span class="token annotation punctuation">@Primary</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token comment" spellcheck="true">// ConfigurationProperties会注入同名属性</span>
    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DataSource <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        DruidDataSource druidDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> druidDataSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true">/**
     * 注册一个StatViewServlet
     * durid统计页面相关的servlet
     * @return
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">druidStatViewServle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        ServletRegistrationBean servletRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"/druid2/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token operator">/</span><span class="token operator">/</span>添加初始化参数：initParams

        <span class="token operator">/</span><span class="token operator">/</span>白名单：
        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"allow"</span><span class="token punctuation">,</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">/</span><span class="token operator">/</span>IP黑名单 <span class="token punctuation">(</span>存在共同时，deny优先于allow<span class="token punctuation">)</span> <span class="token operator">:</span> 如果满足deny的话提示<span class="token operator">:</span>Sorry<span class="token punctuation">,</span> you are not permitted to view <span class="token keyword">this</span> page<span class="token punctuation">.</span>
        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"deny"</span><span class="token punctuation">,</span><span class="token string">"192.168.1.73"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">/</span><span class="token operator">/</span>登录查看信息的账号密码<span class="token punctuation">.</span>
        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span><span class="token string">"admin2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">/</span><span class="token operator">/</span>是否能够重置数据<span class="token punctuation">.</span>
        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"resetEnable"</span><span class="token punctuation">,</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> servletRegistrationBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>
     <span class="token operator">*</span> 注册一个：filterRegistrationBean
     <span class="token operator">*</span> 拦截要被druid统计的页面
     <span class="token operator">*</span> @<span class="token keyword">return</span>
     <span class="token operator">*</span><span class="token operator">/</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">druidStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        FilterRegistrationBean filterRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//添加过滤规则.</span>
        filterRegistrationBean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//添加不需要忽略的格式信息.</span>
        filterRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span><span class="token string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> filterRegistrationBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>本文地址 <a href="https://blog.coder4j.cn/2017/02/17/spring-集成druid/">https://blog.coder4j.cn/2017/02/17/spring-集成druid/</a> </p>
]]></content>
      
        <categories>
            
            <category> spring boot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> druid </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot 集成 redis]]></title>
      <url>https://blog.coder4j.cn/2016/11/14/spring-boot-%E9%9B%86%E6%88%90-redis/</url>
      <content type="html"><![CDATA[<pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--集成redis--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-propreties"><code class="language-propreties">######################redis配置#########################
# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=localhost
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>  
<span class="token keyword">private</span> StringRedisTemplate stringRedisTemplate<span class="token punctuation">;</span>  
<span class="token annotation punctuation">@Resource</span>  
<span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Users<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>然后就可以在类里使用了，使用泛型的时候如果用@Autowired按类型注入会报错，要用@Resource    </p>
</blockquote>
<p><em>如果方法想用缓存，要在配置类上加上@EnableCaching打开缓存，并且要在方法上加上@Cacheable(value = “getByUsername”)</em></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2016/11/14/spring-boot-集成-redis/">https://blog.coder4j.cn/2016/11/14/spring-boot-集成-redis/</a> </p>
]]></content>
      
        
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot 集成监控]]></title>
      <url>https://blog.coder4j.cn/2016/10/12/spring-boot-%E9%9B%86%E6%88%90%E7%9B%91%E6%8E%A7/</url>
      <content type="html"><![CDATA[<pre class="line-numbers language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!--spring boot 系统监控--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 对外开放监控</span>
<span class="token comment" spellcheck="true"># 将其它健康接口也暴露出去</span>
<span class="token attr-name">endpoints.health.sensitive</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span>
<span class="token attr-name">management.security.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span>
<span class="token comment" spellcheck="true"># 设置健康监控的应用名</span>
<span class="token comment" spellcheck="true">#management.context-path=/manage/api/</span>
<span class="token comment" spellcheck="true"># 开启基础鉴权</span>
<span class="token comment" spellcheck="true">#security.basic.enabled=true</span>
<span class="token comment" spellcheck="true"># 要鉴权路径</span>
<span class="token comment" spellcheck="true">#security.basic.path=/manage/api/*</span>
<span class="token comment" spellcheck="true">#security.user.name=admin</span>
<span class="token comment" spellcheck="true">#security.user.password=123456</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><em>不加security也可以使用，但是会报权限不足</em></p>
<blockquote>
<p>有两种方法解决这个问题，一个是加上security，做拦截，并且配置相应的账号密码。另一个配置上面所示的属性，对监控页面关闭默认权限验证，然后我们自己去实现</p>
</blockquote>
<p>本文地址 <a href="https://blog.coder4j.cn/2016/10/12/spring-boot-集成监控/">https://blog.coder4j.cn/2016/10/12/spring-boot-集成监控/</a> </p>
]]></content>
      
        <categories>
            
            <category> spring boot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> 监控 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat配置https证书]]></title>
      <url>https://blog.coder4j.cn/2016/09/10/tomcat-https/</url>
      <content type="html"><![CDATA[<h1 id="Tomcat配置https证书"><a href="#Tomcat配置https证书" class="headerlink" title="Tomcat配置https证书"></a>Tomcat配置https证书</h1><blockquote>
<p>网上搜索出来大多数是通过keytool自已生成证书来完成，这种在工作很少用到（浏览器会报不安全）。以下是通过申请的证书配置过程。因为在配置中遇到了一些坑，记之  </p>
</blockquote>
<h4 id="1、准备证书与私钥"><a href="#1、准备证书与私钥" class="headerlink" title="1、准备证书与私钥"></a>1、准备证书与私钥</h4><p><code>demo.crt</code>  <code>demo.key</code></p>
<h4 id="2、合并证书"><a href="#2、合并证书" class="headerlink" title="2、合并证书"></a>2、合并证书</h4><pre><code>openssl pkcs12 -export -in demo.crt -inkey demo.key -out demo.p12 -name demo
</code></pre><blockquote>
<p>注意：<br>1、 demo.crt 是你的证书<br>2、 demo.key 是你的私钥<br>3、 demo.p12 是合并后的证书<br>4、-name 后面的demo是指定的别名，后面配置tomcat8.5之后的版本需要用到，要记住<br>5、执行这条命令要设置一个导出密码，后面要用到，要记住，最好6位以上  </p>
</blockquote>
<h4 id="3、生成keystore文件"><a href="#3、生成keystore文件" class="headerlink" title="3、生成keystore文件"></a>3、生成keystore文件</h4><pre><code>keytool -importkeystore -srckeystore demo.p12 -srcstoretype PKCS12 -destkeystore demo.jks
</code></pre><blockquote>
<p>注意：<br>1、demo.p12 是第二步生成的证书名<br>2、demo.jks 是生成的keystore文件名<br>3、执行这条命令会首先让你设置一个密码，这个密码后面配置会用到，要记住。然后验证上一步设置的密码。推荐该步骤设置的密码与上一步一致，如果不一致可能会出现错误详见 <a href="http://hw1287789687.iteye.com/blog/1965703" target="_blank" rel="noopener">java.security.UnrecoverableKeyException: Cannot recover key - 简单的幸福 - ITeye技术网站</a>   </p>
</blockquote>
<h4 id="4、配置tomcat"><a href="#4、配置tomcat" class="headerlink" title="4、配置tomcat"></a>4、配置tomcat</h4><p><code>tomcat 8.5 之前</code></p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">SSLEnabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">acceptCount</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">clientAuth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>
    <span class="token attr-name">disableUploadTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">enableLookups</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">maxThreads</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span>
    <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token attr-name">keystoreFile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~/ssl/demo.jks<span class="token punctuation">"</span></span> <span class="token attr-name">keystorePass</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span>
    <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.coyote.http11.Http11NioProtocol<span class="token punctuation">"</span></span> <span class="token attr-name">scheme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https<span class="token punctuation">"</span></span>
    <span class="token attr-name">secure</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">sslProtocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TLS<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>tomcat 8.5 之后</code></p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8643<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.coyote.http11.Http11NioProtocol<span class="token punctuation">"</span></span>
<span class="token attr-name">maxThreads</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span> <span class="token attr-name">SSLEnabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SSLHostConfig</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Certificate</span> <span class="token attr-name">certificateKeystoreFile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~/ssl/demo.jks<span class="token punctuation">"</span></span>
<span class="token attr-name">certificateKeyAlias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span>
<span class="token attr-name">certificateKeystorePassword</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span>
<span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RSA<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SSLHostConfig</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Connector</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意：<br>1、~_ssl_demo.jks  是你前面步骤生成的storekey文件的路径<br>2、123456 是前面第3步设置的密码<br>3、tomcat8.5之后有一个certificateKeyAlias这个是2步设置-name的值  </p>
</blockquote>
<h4 id="参数地址："><a href="#参数地址：" class="headerlink" title="参数地址："></a>参数地址：</h4><p><a href="http://blog.csdn.net/freeiceflame/article/details/50420059" target="_blank" rel="noopener">TOMCAT导入通过第三方证书机构获取的证书 - IceFlame博客频道 - CSDN.NET</a></p>
<p>  <a href="http://hw1287789687.iteye.com/blog/1965703" target="_blank" rel="noopener">java.security.UnrecoverableKeyException: Cannot recover key - 简单的幸福 - ITeye技术网站</a></p>
<p><a href="https://www.oschina.net/question/12_23148" target="_blank" rel="noopener">5分钟内搞定 Tomcat 的 SSL 配置 - 开源中国社区</a></p>
<p><a href="https://bbs.wosign.com/forum.php?mod=viewthread&amp;tid=2881" target="_blank" rel="noopener">tomcat 8.5+版本SSL证书部署-沃通CA官方论坛 -  专业数字证书论坛</a></p>
<p>本文地址 <a href="https://blog.coder4j.cn/2016/09/10/tomcat-https/">https://blog.coder4j.cn/2016/09/10/tomcat-https/</a> </p>
]]></content>
      
        <categories>
            
            <category> tomcat </category>
            
            <category> https </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tomcat </tag>
            
            <tag> https </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lombok使用教程]]></title>
      <url>https://blog.coder4j.cn/2016/09/01/lombok-base/</url>
      <content type="html"><![CDATA[<h1 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h1><h4 id="作用：帮使用者提高编码效率，减少重复与冗余的代码"><a href="#作用：帮使用者提高编码效率，减少重复与冗余的代码" class="headerlink" title="作用：帮使用者提高编码效率，减少重复与冗余的代码"></a>作用：帮使用者提高编码效率，减少重复与冗余的代码</h4><h4 id="原理：ASM-动态修改class文件"><a href="#原理：ASM-动态修改class文件" class="headerlink" title="原理：ASM  动态修改class文件"></a>原理：ASM  动态修改class文件</h4><hr>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><pre class="line-numbers language-xml"><code class="language-xml">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.16.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><pre class="line-numbers language-xml"><code class="language-xml">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.16.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h3><ul>
<li>安装插件<br><img src="http://ww2.sinaimg.cn/large/68f7efe0gw1fb0hl2gmyzj20su0kagqg.jpg" alt></li>
</ul>
<hr>
<h1 id="常用注解："><a href="#常用注解：" class="headerlink" title="常用注解："></a>常用注解：</h1><h2 id="java-bean相关"><a href="#java-bean相关" class="headerlink" title="java bean相关"></a>java bean相关</h2><h3 id="Setter"><a href="#Setter" class="headerlink" title="@Setter"></a>@Setter</h3><ul>
<li><p><code>功能</code></p>
<blockquote>
<p>生成setter方法</p>
</blockquote>
</li>
</ul>
<ul>
<li><p><code>源码</code>     </p>
<pre class="line-numbers language-java"><code class="language-java">  <span class="token annotation punctuation">@Setter</span>
      <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

          <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
          <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><code>编译后</code></li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">
  <span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
      <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

      <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Getter"><a href="#Getter" class="headerlink" title="@Getter"></a>@Getter</h3><ul>
<li><p><code>功能</code></p>
<blockquote>
<p>生成getter方法</p>
</blockquote>
</li>
</ul>
<ul>
<li><p><code>源码</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

<span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
<span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><code>编译后</code></li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​</p>
<h3 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h3><ul>
<li><p><code>功能</code></p>
<blockquote>
<p>生成toString方法</p>
</blockquote>
</li>
</ul>
<ul>
<li><p><code>源码</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ToString</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"LombokDemo(id="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​</p>
</li>
</ul>
<h3 id="Getter-lazy-true"><a href="#Getter-lazy-true" class="headerlink" title="@Getter(lazy = true)"></a>@Getter(lazy = true)</h3><ul>
<li><p><code>功能</code></p>
<blockquote>
<p>懒加载属性</p>
</blockquote>
</li>
</ul>
<ul>
<li><p><code>注意:</code></p>
<blockquote>
<p>这个与上面@Getter不同，那个是修饰在类上的，也可以修饰在属性上。如果有lazy=true只能修饰在属性，并且还要是private final修饰，限制很大</p>
</blockquote>
</li>
<li><p><code>编码</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Getter</span><span class="token punctuation">(</span>lazy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicReference<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicReference<span class="token operator">&lt;</span>Object<span class="token operator">></span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">getIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Object value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ids<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            AtomicReference var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ids<span class="token punctuation">;</span>
            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ids<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    List actualValue <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    value <span class="token operator">=</span> actualValue <span class="token operator">==</span> null<span class="token operator">?</span><span class="token keyword">this</span><span class="token punctuation">.</span>ids<span class="token operator">:</span>actualValue<span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>ids<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ids<span class="token operator">?</span>null<span class="token operator">:</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​</p>
</li>
</ul>
<h3 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h3><ul>
<li><p><code>功能</code></p>
<blockquote>
<p>生成equals方法与hashCode方法</p>
</blockquote>
</li>
</ul>
<ul>
<li><code>源码</code></li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EqualsAndHashCode</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>编译后</code></li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">LombokDemo</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            LombokDemo other <span class="token operator">=</span> <span class="token punctuation">(</span>LombokDemo<span class="token punctuation">)</span>o<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>other<span class="token punctuation">.</span><span class="token function">canEqual</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                Integer <span class="token keyword">this</span>$id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
                Integer other$id <span class="token operator">=</span> other<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span>$id <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>other$id <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span>$id<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other$id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                String <span class="token keyword">this</span>$name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
                String other$name <span class="token operator">=</span> other<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span>$name <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>other$name <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span>$name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other$name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">canEqual</span><span class="token punctuation">(</span>Object other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> other <span class="token keyword">instanceof</span> <span class="token class-name">LombokDemo</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> PRIME <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        Integer $id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
        <span class="token keyword">int</span> result1 <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">59</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$id <span class="token operator">==</span> null<span class="token operator">?</span><span class="token number">43</span><span class="token operator">:</span>$id<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String $name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        result1 <span class="token operator">=</span> result1 <span class="token operator">*</span> <span class="token number">59</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$name <span class="token operator">==</span> null<span class="token operator">?</span><span class="token number">43</span><span class="token operator">:</span>$name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​</p>
<h3 id="NoAragsConstructor"><a href="#NoAragsConstructor" class="headerlink" title="@NoAragsConstructor"></a>@NoAragsConstructor</h3><ul>
<li><p><code>功能</code></p>
<blockquote>
<p>添加一个无参构造函数</p>
</blockquote>
</li>
<li><p><code>注意</code></p>
<blockquote>
<p>这个注解在没有其它有参构造函数的情况下使用意义不大，因为在这种情况下java默认会添加一个无参构造函数</p>
</blockquote>
</li>
<li><p><code>源码</code></p>
<pre><code>@NoArgsConstructor
public class LombokDemo {

    private Integer id;
    private String name;
}
</code></pre></li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​</p>
</li>
</ul>
<h3 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h3><ul>
<li><p><code>功能</code></p>
<blockquote>
<p>添加一个所有参数的构造函数</p>
</blockquote>
</li>
</ul>
<ul>
<li><p><code>源码</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>ConstructorProperties<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ConstructorProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​</p>
</li>
</ul>
<h3 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a>@RequiredArgsConstructor</h3><ul>
<li><p><code>功能</code></p>
<blockquote>
<p>生成一个包含必填参数的构造函数</p>
</blockquote>
</li>
<li><p><code>注意</code></p>
<blockquote>
<p>要与@NonNull 搭配使用，该注解修饰的属性就是必填参数</p>
</blockquote>
</li>
<li><p><code>源码</code></p>
<pre class="line-numbers language-jav"><code class="language-jav">@RequiredArgsConstructor
public class LombokDemo {

    @NonNull private Integer id;
    private String name;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>ConstructorProperties<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NonNull<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@NonNull</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ConstructorProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​</p>
</li>
</ul>
<h3 id="Date"><a href="#Date" class="headerlink" title="@Date"></a>@Date</h3><ul>
<li><p><code>功能</code></p>
<blockquote>
<p>这是一个综合注解了，等于同时使用</p>
<p><code>@Getter</code>, <code>@Setter</code>, <code>@ToString</code>, <code>@EqualsAndHashCode</code>,<code>@RequiredArgsConstructor</code></p>
</blockquote>
</li>
<li><p><code>源码</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NonNull</span> <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">LombokDemo</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            LombokDemo other <span class="token operator">=</span> <span class="token punctuation">(</span>LombokDemo<span class="token punctuation">)</span>o<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>other<span class="token punctuation">.</span><span class="token function">canEqual</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                Integer <span class="token keyword">this</span>$id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Integer other$id <span class="token operator">=</span> other<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span>$id <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>other$id <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span>$id<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other$id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                String <span class="token keyword">this</span>$name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                String other$name <span class="token operator">=</span> other<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span>$name <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>other$name <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span>$name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other$name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">canEqual</span><span class="token punctuation">(</span>Object other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> other <span class="token keyword">instanceof</span> <span class="token class-name">LombokDemo</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> PRIME <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        Integer $id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> result1 <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">59</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$id <span class="token operator">==</span> null<span class="token operator">?</span><span class="token number">43</span><span class="token operator">:</span>$id<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String $name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result1 <span class="token operator">=</span> result1 <span class="token operator">*</span> <span class="token number">59</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$name <span class="token operator">==</span> null<span class="token operator">?</span><span class="token number">43</span><span class="token operator">:</span>$name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"LombokDemo(id="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​</p>
</li>
</ul>
<h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3><ul>
<li><p><code>功能</code></p>
<blockquote>
<p>不可变类的@Date, 他会默认给属性加上final</p>
</blockquote>
</li>
<li><p><code>源码</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>ConstructorProperties<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> String name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ConstructorProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">LombokDemo</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            LombokDemo other <span class="token operator">=</span> <span class="token punctuation">(</span>LombokDemo<span class="token punctuation">)</span>o<span class="token punctuation">;</span>
            Integer <span class="token keyword">this</span>$id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Integer other$id <span class="token operator">=</span> other<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span>$id <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>other$id <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span>$id<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other$id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            String <span class="token keyword">this</span>$name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String other$name <span class="token operator">=</span> other<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span>$name <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>other$name <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span>$name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other$name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> PRIME <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        Integer $id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> result1 <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">59</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$id <span class="token operator">==</span> null<span class="token operator">?</span><span class="token number">43</span><span class="token operator">:</span>$id<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String $name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result1 <span class="token operator">=</span> result1 <span class="token operator">*</span> <span class="token number">59</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$name <span class="token operator">==</span> null<span class="token operator">?</span><span class="token number">43</span><span class="token operator">:</span>$name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"LombokDemo(id="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​</p>
</li>
</ul>
<h3 id="Accessors"><a href="#Accessors" class="headerlink" title="@Accessors"></a>@Accessors</h3><ul>
<li><p><code>功能</code></p>
<blockquote>
<p>这个注解要搭配@Getter与@Setter使用，用来修改默认的setter与getter方法的形式</p>
</blockquote>
</li>
<li><p><code>注意</code></p>
<blockquote>
<p>@Accessors有三个参数可以使用</p>
<ol>
<li>chain  链式的形式</li>
<li>fluent  流式的形式</li>
<li>prefix  生成指定前缀的属性的getter与setter方法，并且生成的getter与setter方法时会去除前缀</li>
</ol>
</blockquote>
</li>
<li><p><code>源码 chain = true</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token annotation punctuation">@Getter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后 chain = true</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> LombokDemo <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> LombokDemo <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>源码 fluent = true</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>fluent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token annotation punctuation">@Getter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后 fluent = true</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> LombokDemo <span class="token function">id</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> LombokDemo <span class="token function">name</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Integer <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>源码 prefix = &quot;xxx&quot;</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token annotation punctuation">@Getter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Integer xxxId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后 prefix = &quot;xxx&quot;</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Integer xxxId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer xxxId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>xxxId <span class="token operator">=</span> xxxId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xxxId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​</p>
</li>
</ul>
<hr>
<h1 id="其它注解："><a href="#其它注解：" class="headerlink" title="其它注解："></a>其它注解：</h1><h2 id="日志相关"><a href="#日志相关" class="headerlink" title="日志相关"></a>日志相关</h2><h3 id="Log4j"><a href="#Log4j" class="headerlink" title="@Log4j"></a>@Log4j</h3><ul>
<li><p><code>源码</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Log4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Integer xxxId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>LombokDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Integer xxxId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="CommonsLog"><a href="#CommonsLog" class="headerlink" title="@CommonsLog"></a>@CommonsLog</h3><ul>
<li><p><code>源码</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@CommonsLog</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Integer xxxId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>Log<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>LogFactory<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Log log <span class="token operator">=</span> LogFactory<span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span>LombokDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Integer xxxId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="Log"><a href="#Log" class="headerlink" title="@Log"></a>@Log</h3><ul>
<li><p><code>源码</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Log</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Integer xxxId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>LombokDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Integer xxxId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="Log4j2"><a href="#Log4j2" class="headerlink" title="@Log4j2"></a>@Log4j2</h3><ul>
<li><p><code>源码</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Log4j2</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Integer xxxId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>LogManager<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger log <span class="token operator">=</span> LogManager<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>LombokDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Integer xxxId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="Slf4j"><a href="#Slf4j" class="headerlink" title="@Slf4j"></a>@Slf4j</h3><ul>
<li><p><code>源码</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Integer xxxId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>LombokDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Integer xxxId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="设计模式相关"><a href="#设计模式相关" class="headerlink" title="设计模式相关"></a>设计模式相关</h2><h3 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h3><ul>
<li><p><code>功能</code></p>
<blockquote>
<p>通过建造者模块来生成bean</p>
</blockquote>
</li>
</ul>
<ul>
<li><p><code>源码</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Builder</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token function">LombokDemo</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> LombokDemo<span class="token punctuation">.</span>LombokDemoBuilder <span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LombokDemo<span class="token punctuation">.</span>LombokDemoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemoBuilder</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

        <span class="token function">LombokDemoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> LombokDemo<span class="token punctuation">.</span>LombokDemoBuilder <span class="token function">id</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> LombokDemo<span class="token punctuation">.</span>LombokDemoBuilder <span class="token function">name</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> LombokDemo <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LombokDemo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">"LombokDemo.LombokDemoBuilder(id="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​</p>
</li>
</ul>
<h3 id="Delegate"><a href="#Delegate" class="headerlink" title="@Delegate"></a>@Delegate</h3><ul>
<li><p><code>功能</code></p>
<blockquote>
<p>@Delegate注释的属性，会把这个属性对象的公有非静态方法合到当前类</p>
</blockquote>
</li>
<li><p><code>注意</code></p>
<blockquote>
<p>公共 非静态方法</p>
</blockquote>
</li>
<li><p><code>源码</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Delegate</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">byte</span> <span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">short</span> <span class="token function">shortValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">shortValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Integer arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arg0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h2><h3 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a>@Cleanup</h3><ul>
<li><p><code>功能</code></p>
<blockquote>
<p>关闭流</p>
</blockquote>
</li>
<li><p><code>注意</code></p>
<blockquote>
<p>关闭流的方式有点怪异，而且没有在<strong>finally</strong>里面关闭，如果出现异常的就不会关闭了</p>
</blockquote>
</li>
<li><p><code>源码</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Cleanup</span> InputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"xxx.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        FileInputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"xxx.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​</p>
</li>
</ul>
<h3 id="Synchronized"><a href="#Synchronized" class="headerlink" title="@Synchronized"></a>@Synchronized</h3><ul>
<li><p><code>功能</code></p>
<blockquote>
<p>给方法加一个同步块</p>
</blockquote>
</li>
<li><p><code>源码</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Synchronized</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> Object $lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        Object var1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$lock<span class="token punctuation">;</span>
        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​</p>
</li>
</ul>
<h3 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="@SneakyThrows"></a>@SneakyThrows</h3><ul>
<li><p><code>功能</code></p>
<blockquote>
<p>忽略异常</p>
</blockquote>
</li>
<li><p><code>源码</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> Object $lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        Object var1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$lock<span class="token punctuation">;</span>
        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h3><ul>
<li><p><code>功能</code></p>
<blockquote>
<p>设置不能为空的参数</p>
</blockquote>
</li>
<li><p><code>源码</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String val<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

  <span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NonNull<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
      <span class="token keyword">public</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="UtilityClass"><a href="#UtilityClass" class="headerlink" title="@UtilityClass"></a>@UtilityClass</h3></li>
<li><p><code>功能</code></p>
<blockquote>
<p>把普通类转为工具类</p>
</blockquote>
</li>
<li><p><code>源码</code></p>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@UtilityClass</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> Integer id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> String name <span class="token operator">=</span> <span class="token string">"kiwi"</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">util</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>编译后</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>mrwood<span class="token punctuation">.</span>study<span class="token punctuation">.</span>lombok<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Integer id <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String name <span class="token operator">=</span> <span class="token string">"kiwi"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">util</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token function">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"This is a utility class and cannot be instantiated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​</p>
</li>
</ul>
<p>本文地址 <a href="https://blog.coder4j.cn/2016/09/01/lombok-base/">https://blog.coder4j.cn/2016/09/01/lombok-base/</a> </p>
]]></content>
      
        
        <tags>
            
            <tag> lombok </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
